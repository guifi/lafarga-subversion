<?php
/*
 * Created on 1/08/2008 by rroca
 *
 * functions for tracroute tools
 */

function guifi_traceroute($path, $to, &$routes, $maxhops = 15,$cost = 0) {
  $btime = microtime(true);

  $hop = count($path);
  $kpath = array_keys($path);
  end($path);
  $parent = key($path);

//  print "Hop# $hop path ".implode(',',$kpath)." parent $parent looking for ".implode(',',$to)."\n<br>";

  $qry = db_query(
    'SELECT l1.*, l2.device_id ddevice_id, l2.ipv4_id dipv4_id, l2.interface_id dinterface_id, l2.nid dnid
     FROM {guifi_links} l1, {guifi_links} l2
     WHERE l1.device_id=%d AND l1.id=l2.id AND l2.device_id != %d AND l1.flag != "Dropped" AND l1.flag="Working"',
     $parent, $parent);

  $c = 0;
  $links = array();
  while ($linked = db_fetch_object($qry)) {
    // if loopback, ignore this link
    if (in_array($linked->ddevice_id,$kpath))
      continue;

    $links[] = $linked;
  }

  foreach ($links as $linked) {
    $c++;

//    print "Linked $linked->device_id to $linked->ddevice_id \n<br>";

    $npath = $path;
    $npath[$parent]['from'] = array(
      $linked->id,
      $linked->link_type,
      $linked->flag,
      $linked->interface_id,
      $linked->ipv4_id
    );
    $npath[$linked->ddevice_id]['to'] = array(
      $linked->dnid,
      $linked->dinterface_id,
      $linked->dipv4_id
    );

    $ncost = $cost;
    // calculating the current route cost
    switch ($linked->link_type) {
      case 'cable': $ncost += 1; break;
      case 'wds': $ncost += 5; break;
      default: $ncost += 10; break;
    }
    if ($linked->flag != 'Working')
      $ncost += 100;

    // if linked device in target destinations, add to routes
    if (in_array($linked->ddevice_id,$to)) {
      $routes[] = array($ncost,$npath);
    }

    // if #hops < #maxhops and cost < 200, next hop
    if ((count($npath) < $maxhops) and ($ncost < 200)) {
      $c += guifi_traceroute($npath,$to,$routes,$maxhops,$ncost);
    }
  }
  return $c;
}

function guifi_traceroute_search($params = null) {

  if (count($params)) {
    $to = explode(',',$params);
    $from = array_shift($to);
  }

  $output = drupal_get_form('guifi_traceroute_search_form',$from,$to);

  if (!count($to))
    return $output;

  if (is_numeric($to[0])) {
    $dto=guifi_get_devicename($to[0],'nick');
  } else {
    $dto=$to[0];
    $qry = db_query('SELECT device_id FROM {guifi_services} WHERE service_type="%s"',
      $to[0]);
    $nto = array();
    while ($service = db_fetch_object($qry))
      $nto[] = $service->device_id;
    $to = $nto;
  }

  $routes = array();
  $btime = microtime(true);
  $explored = guifi_traceroute(array($from=>array()),$to,$routes);

  $trace = t('%results routes found.%explored routes analyzed in %secs seconds',
    array('%results'=>count($routes),
          '%explored'=>number_format($explored),
          '%secs'=>number_format(microtime(true)-$btime,4)));

  $trace .= '<br><small>'.
   t('Note that this is a software traceroute generated by the information currently available at the database, it might be distinct than the real routes at the network, however this information could be helpful in cleaning the data and network planning.').
   '</small><hr>';

  sort($routes);

  foreach ($routes as $route) {
    end($route[1]);
    $target = key($route[1]);

    $trace .= theme('box',t('Route from %oname to %dname, cost %cost',
      array(
        '%cost'=>$route[0],
        '%oname'=>guifi_get_devicename($from,'nick'),
        '%dname'=>guifi_get_devicename($target,'nick'))),
      theme_guifi_traceroute($route[1]));
  }

  $output .= theme('box',t('Software traceroute result from %from to %to',
    array('%from'=>guifi_get_devicename($from,'nick'),'%to'=>$dto)),$trace);

  guifi_log(GUIFILOG_TRACE,'Routes',$routes);

  return $output;
}

// IP search
function guifi_traceroute_search_form($form_state, $from = null, $to = array()) {

  $ftitle = t('From:');
  if ($from) {
    $fname = guifi_get_devicename($from,'large');
    $ftitle .= ' '.$fname;
  }

  $search_help = t('To find the device, you can write some letters to find the available devices in the database.');
  $form['from'] = array(
    '#type' => 'fieldset',
    '#title' => $ftitle,
    '#collapsible' => true,
    '#collapsed' => $from
  );
  $form['from']['from_description'] = array(
    '#type' => 'textfield',
    '#title' => t('Device'),
    '#required' => true,
    '#default_value' => $fname,
    '#size' => 60,
    '#maxlength' => 128,
    '#autocomplete_path'=> 'guifi/js/select-node-device',
    '#element_validate' => array('guifi_devicename_validate'),
    '#description' => t('Search for a device to trace the route from.').'<br>'.
        $search_help,
  );

  $dtitle = t('To:');
  if (count($to)) {
    if (is_numeric($to[0])) {
      $dname = guifi_get_devicename($to[0],'large');
      $dservice = '';
      $dtitle .= ' '.$dname;
    } else {
      $dservice = $to[0];
      $dname = '';
      $dtitle .= ' '.t('Explore service !service',array('!service'=>$to[0]));
    }
  }

  $form['to'] = array(
    '#type' => 'fieldset',
    '#title' => $dtitle,
    '#collapsible' => true,
    '#collapsed' => count($to),
    '#description' => t('Choose between tracing a route to a known device, or discover services by selecting a service type. Yo use only one option at a time, and then press the <em>"Get traceroute"</em> button to get the list of possible known routes ordered by best route first.')
  );
  $form['to']['to_description'] = array(
    '#type' => 'textfield',
    '#title' => t('Device'),
    '#default_value' => $dname,
    '#size' => 60,
    '#maxlength' => 128,
    '#element_validate' => array('guifi_devicename_validate'),
    '#autocomplete_path'=> 'guifi/js/select-node-device',
    '#description' => t('Target device to trace the route to.').'<br>'.
        $search_help,
    '#prefix'=>'<table><tr><td>',
    '#suffix'=>'</td>',
  );
  $types[] = t('<select one from this list>');
  $form['to']['discover_service'] = array(
    '#type' => 'select',
    '#title' => t("Service"),
    '#default_value' => $dservice,
    '#options' => array_merge($types,guifi_types('service')),
    '#description' => t('Type of service to be discovered'),
    '#prefix'=>'<td>',
    '#suffix'=>'</td>',
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value'=>t('Get traceroute'),
    '#prefix'=>'<td>',
    '#suffix'=>'</td></tr></table>',
  );

  return $form;
}

function guifi_traceroute_search_form_validate($form, $form_state) {
  if ((!$form_state['values']['discover_service']) and
       ($form_state['values']['to_description'] == '')
     )
    form_set_error('discover_service', t('You must select either a service to discover or a device destination'));
  if (($form_state['values']['discover_service']) and
       ($form_state['values']['to_description'] != '')
     )
    form_set_error('to_description', t('You must select a service to discover or a device destination, not both'));
}

function guifi_traceroute_search_form_submit($form, &$form_state) {
   $from = explode('-',$form_state['values']['from_description']);
   ($form_state['values']['to_description'] != '') ?
     $to = explode('-',$form_state['values']['to_description'])
     : $to = array($form_state['values']['discover_service']);

   drupal_goto('guifi/menu/ip/traceroute/'.$from[0].','.$to[0]);
   return;
}

function theme_guifi_traceroute($route) {
  $oGC = new GeoCalc();
  $tDist = 0;

  foreach ($route as $did=>$hop) {
    $cols = array();
    $cols[] = l(guifi_get_devicename($did,'nick'),'guifi/device/'.$did);

    if (isset($hop['to'])) {
      $cols[] = l(guifi_get_nodename($hop['to'][0]),'node/'.$hop['to'][0]);
      $ip = db_fetch_object(db_query(
        'SELECT ipv4, netmask FROM {guifi_ipv4} WHERE id=%d AND interface_id=%d',
        $hop['to'][2],$hop['to'][1]));
      $cols[] = $ip->ipv4.'/'.guifi_ipcalc_get_maskbits($ip->netmask);
    } else {
      $cols[] = array('data'=>null,'colspan'=>2);
    }


    if (isset($hop['from'])) {
      $ip = db_fetch_object(db_query(
        'SELECT ipv4, netmask FROM {guifi_ipv4} WHERE id=%d AND interface_id=%d',
        $hop['from'][4],$hop['from'][3]));
      $cols[] = $ip->ipv4.'/'.guifi_ipcalc_get_maskbits($ip->netmask);
      $cols[] = $hop['from'][1];     // type
                                     // status
      $cols[] = array('data'=>t($hop['from'][2]),'class'=>$hop['from'][2]);
    } else {
      $cols[] = array('data'=>null,'colspan'=>3);
    }

    // if not same location, give the distance
    if ($hop['from'][1] != 'cable') {
      $qry = db_query(
        'SELECT n.id nid, lat, lon
         FROM {guifi_location} n, {guifi_links} l
         WHERE l.id=%d
           AND l.nid=n.id',
         $hop['from'][0]);
      $loc1 = db_fetch_object($qry);
      $loc2 = db_fetch_object($qry);
      $gDist = round($oGC->EllipsoidDistance($loc1->lat, $loc1->lon, $loc2->lat, $loc2->lon),3);

      if ($gDist) {
        $cols[] = array('data'=>$gDist,'align'=>right);
        $tDist += $gDist;
      }
    }


    $rows[] = $cols;
  }
  $rows[] = array(
    t('Total distance %tDist kms., %hops hops',
      array('%tDist'=>$tDist,'%hops'=>count($route) - 1))
  );

  $header = array(
    t('Device'),
    t('Node'),
    t('From address'),
    t('To address'),
    t('Type'),
    t('Status'),
    t('Kms')
  );
  return theme('table',$header,$rows);

}

?>
