<?php
// $Id: guifi.module x$
// prova 
include_once("guifi_zone.inc.php");      // zone management
include_once("guifi_ipv4.inc.php");      // ipv4 network management
include_once("guifi_node.inc.php");      // node (location) management
include_once("guifi_service.inc.php");   // services management
include_once("guifi_devices.inc.php");   // device management
include_once("guifi_radios.inc.php");    // radios management
include_once("guifi_interfaces.inc.php");// interfaces management
include_once("guifi_links.inc.php");     // links management
include_once("guifi_users.inc.php");     // user management
include_once("guifi_graphs.inc.php");    // graphs management
include_once("guifi_unsolclic.inc.php"); // unsolclic generator 
include_once("guifi_nodexchange.inc.php");// nodeXchange (XML) generator 
include_once("guifi_cnml.inc.php");      // CNML (XML) generator 
include_once("guifi_gml.inc.php");       // gml (geographic XML export)
                                         // generator 
include_once("guifi_maps.inc.php");      // maps management
include_once("guifi_includes.inc.php");  // misc. routines
include_once("guifi_networkutils.inc.php");  // network calc routines
include_once("guifi_sql.inc.php");       // database changes 
include_once("GeoCalc.class.php");       // geographic routines


/** Implementation of drupal main hooks.
 *
 
/** menu hooks
*/  

 
function guifi_menu() {
  $items = array();
  
  //
  // ADMINISTRATION settings
  //
  $items['admin/settings/guifi'] = array(
    'title' => 'guifi.net configuration',
    'description' => 'Configure guifi.net module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('guifi_admin_settings'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
   );
   
   // General guifi menu
/*   $items['guifi/users'] = array( 
     'title' => 'proxy users list',
     'description' => 'Handles proxy users queues',
     'page callback' => 'guifi_zone_map',
     'page arguments' => array(0),
     'access callback' => 'user_access',
     'access arguments' => array('administer guifi networks'),
     'type' => MENU_LOCAL_TASK);
*/   
   //
   // ZONE menus & tabs
   //
   $items['node/%guifi_zone/view/nodes'] = array(
     'title' => 'nodes',
     'page callback' => 'guifi_zone_nodes',
     'page arguments' => array(1),
     'access callback' => 'user_access',
     'access arguments' => array('access_content'),
     'type' => MENU_LOCAL_TASK,
//     'weight' => 2,
   );
   $items['node/%guifi_zone/view/map'] = array( 
     'title' => 'map',
     'page callback' => 'guifi_zone_map',
     'page arguments' => array(1),
     'access callback' => 'user_access',
     'access arguments' => array('access content'),
//     'weight' => 3,
     'type' => MENU_LOCAL_TASK
   );
   $items['node/%guifi_zone/view/data'] = array( 
     'title' => 'data',
     'page callback' => 'guifi_zone_print',
     'page arguments' => array(1),
     'access callback' => 'user_access',
     'access arguments' => array('access content'),
//     'weight' => 4,
     'type' => MENU_LOCAL_TASK);
   $items['node/%guifi_zone/view/availability'] = array( 
     'title' => 'availability',
     'page callback' => 'guifi_zone_availability',
     'page arguments' => array(1),
     'access callback' => 'user_access',
     'access arguments' => array('access content'),
//     'weight' => 5,
     'type' => MENU_LOCAL_TASK);
   $items['node/%guifi_zone/view/services'] = array( 
     'title' => 'services',
     'page callback' => 'guifi_list_services',
     'page arguments' => array(1),
     'access callback' => 'user_access',
     'access arguments' => array('access content'),
//     'weight' => 6,
     'type' => MENU_LOCAL_TASK);   
   $items['node/%guifi_zone/view/ipv4'] = array( 
     'title' => 'networks',
     'page callback' => 'guifi_zone_ipv4',
     'page arguments' => array(1),
     'access callback' => 'user_access',
     'access arguments' => array('access content'),
//     'weight' => 7,
     'type' => MENU_LOCAL_TASK);
   $items['node/%guifi_zone/view/ipv4/add'] = array( 
     'title' => 'add ipv4 network',
     'page callback' => 'guifi_add_ipv4',
     'page arguments' => array(1),
     'access callback' => 'user_access',
     'access arguments' => array('administer guifi networks'),
//     'weight' => 7,
     'type' => MENU_LOCAL_TASK);
   $items['guifi/ipv4/%/edit'] = array( 
     'title' => 'edit ipv4 network',
     'page callback' => 'guifi_edit_ipv4',
     'page arguments' => array(2),
     'access callback' => 'user_access',
     'access arguments' => array('administer guifi networks'),
     'type' => MENU_LOCAL_TASK);
   $items['guifi/ipv4/%/delete'] = array( 
     'title' => 'delete ipv4 network',
     'page callback' => 'guifi_delete_ipv4',
     'page arguments' => array(2),
     'access callback' => 'user_access',
     'access arguments' => array('administer guifi networks'),
     'type' => MENU_LOCAL_TASK);
     
   // node (location) menus
   $items['node/%guifi_node/view/distances'] = array( 
     'title' => 'distances',
     'page callback' => 'guifi_node_distances',
     'page arguments' => array(1),
     'access arguments' => array('access content'),
//     'weight' => 3,
     'type' => MENU_LOCAL_TASK
   );
   $items['node/%guifi_node/view/distancesmap'] = array( 
     'title' => 'profiles map',
     'page callback' => 'guifi_node_distances_map',
     'page arguments' => array(1),
     'access arguments' => array('access content'),
//     'weight' => 3,
     'type' => MENU_LOCAL_TASK
   );
   $items['node/%guifi_node/view/data'] = array( 
     'title' => 'data',
     'page callback' => 'guifi_node_print',
     'page arguments' => array(1),
     'access callback' => 'user_access',
     'access arguments' => array('access content'),
//     'weight' => 3,
     'type' => MENU_LOCAL_TASK
   );
   $items['node/%guifi_node/view/devices'] = array( 
     'title' => 'devices',
     'page callback' => 'guifi_node_radio_list',
     'page arguments' => array(1),
     'access callback' => 'user_access',
     'access arguments' => array('access content'),
//     'weight' => 3,
     'type' => MENU_LOCAL_TASK
   );
   $items['node/%guifi_node/view/links'] = array( 
     'title' => 'links',
     'page callback' => 'guifi_node_links',
     'page arguments' => array(1),
     'access callback' => 'user_access',
     'access arguments' => array('access content'),
//     'weight' => 3,
     'type' => MENU_LOCAL_TASK
   );
   $items['node/%guifi_node/view/graphs'] = array( 
     'title' => 'graphs',
     'page callback' => 'guifi_node_graphs',
     'page arguments' => array(1),
     'access callback' => 'user_access',
     'access arguments' => array('access content'),
//     'weight' => 3,
     'type' => MENU_LOCAL_TASK
   );

   // Devices menus
   $items['guifi/device/add/%guifi_node/radio'] = array( 
     'title' => 'add device',
     'page callback' => 'guifi_add_device',
//     'page arguments' => array(1),
     'access callback' => 'user_access',
     'access arguments' => array('create guifi nodes'),
//     'weight' => 3,
     'type' => MENU_LOCAL_TASK
   );
   $items['guifi/device/%guifi_device'] = array( 
     'title' => 'add device',
     'page callback' => 'guifi_device_print',
     'page arguments' => array(2),
     'access callback' => 'user_access',
     'access arguments' => array('access_content'),
//     'weight' => 3,
     'type' => MENU_LOCAL_TASK
   );
   $items['guifi/device/%guifi_device/edit'] = array( 
     'title' => 'edit device',
     'page callback' => 'guifi_edit_device',
     'page arguments' => array(2),
     'access callback' => 'guifi_device_access',
     'access arguments' => array('update',array(2)),
     'type' => MENU_LOCAL_TASK
   );   
   $items['guifi/device/%guifi_device/delete'] = array( 
     'title' => 'edit device',
     'page callback' => 'guifi_delete_device',
     'page arguments' => array(2),
     'access callback' => 'guifi_device_access',
     'access arguments' => array('update',array(2)),
     'type' => MENU_LOCAL_TASK
   );   
    return $items;
/*  

    $items[] = array('path' => 'admin/guifi/list', 'title' => t('list'),
      'type' => MENU_DEFAULT_LOCAL_TASK, 'weight' => -10);
    $items[] = array('path' => 'admin/guifi/ipv4/add', 
      'title' => t('add ipv4 network allocation'),
      'callback' => 'guifi_edit_ipv4',
      'access' => user_access('administer guifi networks'),
      'type' => MENU_LOCAL_TASK);
    $items[] = array('path' => 'admin/guifi/ipv4/edit', 
      'title' => t('edit guifi zone network range'),
      'callback' => 'guifi_edit_ipv4',
      'access' => user_access('administer guifi networks'),
      'type' => MENU_CALLBACK);
    $items[] = array('path' => 'admin/guifi/ipv4/delete', 
      'title' => t('delete guifi zone network range'),
      'callback' => 'guifi_delete_ipv4',
      'access' => user_access('administer guifi networks'),
      'type' => MENU_CALLBACK);


     $items[] = array('path' => 'guifi/add/device', 
      'title' => t('add device'),	 
      'callback' => 'guifi_add_device', 	 
      'access' => user_access('create guifi nodes'), 	 
      'type' => MENU_LOCAL_TASK);
     $items[] = array('path' => 'guifi/graph', 
      'title' => t('display graph'),
      'callback' => 'guifi_graph',
      'access' => user_access('access content'),
      'type' => MENU_SUGGESTED_ITEM);
     $items[] = array('path' => 'guifi/graph_detail', 
      'title' => t('display detailed node graphs'),
      'callback' => 'guifi_graph_detail',
      'access' => user_access('access content'),
      'type' => MENU_SUGGESTED_ITEM);
     $items[] = array('path' => 'guifi/purge', 
      'title' => t('purge orphan devices/interfaces/ip addresses'),
      'callback' => 'guifi_purge',
      'access' => user_access('administer guifi networks'),
      'type' => MENU_SUGGESTED_ITEM);
     $items[] = array('path' => 'guifi/mrtg', 
      'title' => t('generate mrtg config file'),
      'callback' => 'guifi_mrtg',
      'access' => user_access('access content'),
      'type' => MENU_SUGGESTED_ITEM);
     $items[] = array('path' => 'guifi/nodexchange', 
      'title' => t('export zone in nodeXchange format'),
      'callback' => 'guifi_nodexchange',
      'access' => user_access('access content'),
      'type' => MENU_SUGGESTED_ITEM);
     $items[] = array('path' => 'guifi/cnml', 
      'title' => t('export zone in CNML format'),
      'callback' => 'guifi_cnml',
      'access' => user_access('access content'),
      'type' => MENU_SUGGESTED_ITEM);
     $items[] = array('path' => 'guifi/gml', 
      'title' => t('export zone in gml format'),
      'callback' => 'guifi_gml',
      'access' => user_access('access content'),
      'type' => MENU_SUGGESTED_ITEM);
     $items[] = array('path' => 'guifi/refresh', 
      'title' => t('check if data must be refreshed'),
      'callback' => 'guifi_refresh',
      'access' => user_access('access content'),
      'type' => MENU_SUGGESTED_ITEM);
     $items[] = array('path' => 'admin/settings/guifi/upgrade', 
      'title' => t('upgrade from previous versions'),
      'callback' => 'guifi_upgrade',
      'access' => user_access('access content'),
      'type' => MENU_SUGGESTED_ITEM);


    // guifi module menus
    $items[] = array('path' => 'guifi', 
      'title' => t('guifi mesh networking database & provisioning system'),
      'callback' => 'guifi_page',
      'access' => user_access('access content'),
      'type' => MENU_SUGGESTED_ITEM);

    // cron tasks: Empty notification queue
    $items[] = array('path' => 'guifi/notify',
      'title' => t('send notifications'),
      'callback' => 'guifi_notify_send',
      'access' => 'administer guifi networks',
      'type' => MENU_LOCAL_TASK,
    );

    // device management menus
    if (arg(1) == 'device') {
    $items[] = array('path' => 'guifi/device/'.arg(2), 
      'title' => t('view device'),
      'callback' => 'guifi_device_print',
      'callback arguments' => arg(2),
      'access' => user_access('access content'),
      'type' => MENU_SUGGESTED_ITEM);
    $items[] = array('path' => 'guifi/device/add', 
      'title' => t('Add device'),
      'callback' => 'guifi_add_device',
      'access' => user_access('create guifi nodes'),
      'type' => MENU_SUGGESTED_ITEM);
    $items[] = array('path' => 'guifi/device/'.arg(2).'/view', 
      'title' => t('view'),
      'callback arguments' => arg(2),
      'type' => MENU_DEFAULT_LOCAL_TASK, 'weight' => -10);
    $items[] = array('path' => 'guifi/device/'.arg(2).'/view/all', 
      'title' => t('all'),
      'callback arguments' => arg(2),
      'type' => MENU_DEFAULT_LOCAL_TASK, 'weight' => -10);
    $items[] = array('path' => 'guifi/device/'.arg(2).'/view/data', 
      'title' => t('data'),
      'callback' => 'guifi_device_print',
      'callback arguments' => arg(2),
      'type' => MENU_LOCAL_TASK, 'weight' => 7);
    $items[] = array('path' => 'guifi/device/'.arg(2).'/view/graphs', 
      'title' => t('graphs'),
      'callback' => 'guifi_device_print',
      'callback arguments' => arg(2),
      'type' => MENU_LOCAL_TASK, 'weight' => 8);
    $items[] = array('path' => 'guifi/device/'.arg(2).'/view/links', 
      'title' => t('links'),
      'callback' => 'guifi_device_print',
      'callback arguments' => arg(2),
      'type' => MENU_LOCAL_TASK, 'weight' => 9);
    $items[] = array('path' => 'guifi/device/'.arg(2).'/view/interfaces', 
      'title' => t('interfaces'),
      'callback' => 'guifi_device_print',
      'callback arguments' => arg(2),
      'type' => MENU_LOCAL_TASK, 'weight' => 10);
    $items[] = array('path' => 'guifi/device/'.arg(2).'/view/services', 
      'title' => t('services'),
      'callback' => 'guifi_device_print',
      'callback arguments' => arg(2),
      'type' => MENU_LOCAL_TASK, 'weight' => 11);
    $items[] = array('path' => 'guifi/device/'.arg(2).'/edit', 
      'title' => t('edit device'),
      'callback' => 'guifi_edit_device',
      'callback arguments' => arg(2),
      'access' => guifi_device_access('update',arg(2)),
      'type' => MENU_LOCAL_TASK);
    $items[] = array('path' => 'guifi/device/'.arg(2).'/view/unsolclic', 
      'title' => t('unsolclic'),
      'callback' => 'guifi_unsolclic',
      'callback arguments' => arg(2),
      'weight' => 10,
      'type' => MENU_LOCAL_TASK);
    $items[] = array('path' => 'guifi/device/'.arg(2).'/delete', 
      'title' => t('delete device'),
      'callback' => 'guifi_delete_device',
      'callback arguments' => arg(2),
      'access' => guifi_device_access('update',arg(2)),
      'weight' => 10,
      'type' => MENU_LOCAL_TASK);
    }


      // node (location) menus
      if (($node->nid) && ($node->type == 'guifi_node')) {
        $items[] = array('path' => 'node/'. arg(1) .'/add', 
          'title' => t('Add device'),
          'callback' => 'guifi_device_create',
          'callback arguments' => arg(1),
          'access' => user_access('create guifi nodes'),
          'weight' => 10,
          'type' => MENU_LOCAL_TASK);
        $items[] = array('path' => 'node/'. arg(1) .'view', 
          'title' => t('view'),
          'callback' => 'guifi_node_view',
          'callback arguments' => arg(1),
          'access' => user_access('access content'),
          'weight' => -10,
          'type' => MENU_DEFAULT_LOCAL_TASK);
        $items[] = array('path' => 'node/'. arg(1) .'/view/all', 
          'title' => t('all'),
          'callback' => 'guifi_node_view',
          'callback arguments' => arg(1),
          'access' => user_access('access content'),
          'weight' => -10,
          'type' => MENU_DEFAULT_LOCAL_TASK);
        $items[] = array('path' => 'node/'. arg(1) .'/view/data', 
          'title' => t('data'),
          'callback' => 'guifi_node_view',
          'callback arguments' => arg(1),
          'access' => user_access('access content'),
          'weight' => 1,
          'type' => MENU_LOCAL_TASK);
        $items[] = array('path' => 'node/'. arg(1) .'/view/graphs', 
          'title' => t('graphs'),
          'callback' => 'guifi_node_view',
          'callback arguments' => arg(1),
          'access' => user_access('access content'),
          'weight' => 2,
          'type' => MENU_LOCAL_TASK);
        $items[] = array('path' => 'node/'. arg(1) .'/view/devices', 
          'title' => t('devices'),
          'callback' => 'guifi_node_view',
          'callback arguments' => arg(1),
          'access' => user_access('access content'),
          'weight' => 3,
          'type' => MENU_LOCAL_TASK);
        $items[] = array('path' => 'node/'. arg(1) .'/view/links', 
          'title' => t('links'),
          'callback' => 'guifi_node_view',
          'callback arguments' => arg(1),
          'access' => user_access('access content'),
          'weight' => 4,
          'type' => MENU_LOCAL_TASK);
        if ((($node->lat != '') and ($node->lon != '')) 
           and (($node->lat > 0) and ($node->lon > 0)))
          $items[] = array('path' => 'node/'. arg(1) .'/view/distances', 
            'title' => t('distances'),
            'callback' => 'guifi_node_view',
            'callback arguments' => arg(1),
            'access' => user_access('access content'),
            'weight' => 5,
            'type' => MENU_LOCAL_TASK);
        $items[] = array('path' => 'node/'. arg(1) .'/view/services', 
          'title' => t('services'),
          'callback' => 'guifi_node_view',
          'callback arguments' => arg(1),
          'access' => user_access('access content'),
          'weight' => 6,
          'type' => MENU_LOCAL_TASK);
        $items[] = array('path' => 'node/'. arg(1) .'/view/users', 
          'title' => t('users'),
          'callback' => 'guifi_node_view',
          'callback arguments' => arg(1),
          'access' => user_access('access content'),
          'weight' => 7,
          'type' => MENU_LOCAL_TASK);
      }

      // service menus
      if (($node->nid) && ($node->type == 'guifi_service')) {
        $items[] = array('path' => 'node/'. arg(1) .'view', 
          'title' => t('view'),
          'callback' => 'guifi_service_view',
          'callback arguments' => arg(1),
          'access' => user_access('access content'),
          'weight' => -10,
          'type' => MENU_DEFAULT_LOCAL_TASK);
        $items[] = array('path' => 'node/'. arg(1) .'/view/all', 
          'title' => t('all'),
          'callback' => 'guifi_service_view',
          'callback arguments' => arg(1),
          'access' => user_access('access content'),
          'weight' => -10,
          'type' => MENU_DEFAULT_LOCAL_TASK);
        $items[] = array('path' => 'node/'. arg(1) .'/view/view', 
          'title' => t('page'),
          'callback' => 'guifi_service_view',
          'callback arguments' => arg(1),
          'access' => user_access('access content'),
          'weight' => 1,
          'type' => MENU_LOCAL_TASK);
        $items[] = array('path' => 'node/'. arg(1) .'/view/data', 
          'title' => t('data'),
          'callback' => 'guifi_service_view',
          'callback arguments' => arg(1),
          'access' => user_access('access content'),
          'weight' => 2,
          'type' => MENU_LOCAL_TASK);
        if ($node->service_type == 'Proxy') {
          $items[] = array('path' => 'node/'. arg(1) .'/view/users', 
            'title' => t('users'),
            'callback' => 'guifi_service_view',
            'callback arguments' => arg(1),
            'access' => user_access('access content'),
            'weight' => 3,
            'type' => MENU_LOCAL_TASK);
          $items[] = array('path' => 'node/'. arg(1) .'/view/passwd', 
            'title' => t('passwd'),
            'callback' => 'guifi_service_view',
            'callback arguments' => arg(1),
            'access' => user_access('access content'),
            'type' => MENU_CUSTOM_ITEM);
          $items[] = array('path' => 'node/'. arg(1) .'/view/federated', 
            'title' => t('federated'),
            'callback' => 'guifi_service_view',
            'callback arguments' => arg(1),
            'access' => user_access('access content'),
            'type' => MENU_CUSTOM_ITEM);
          $items[] = array('path' => 'node/'. arg(1) .'/view/federated_md5',
            'title' => t('federated_md5'),
            'callback' => 'guifi_service_view',
            'callback arguments' => arg(1),
            'access' => user_access('access content'),
            'type' => MENU_CUSTOM_ITEM);
          $items[] = array('path' => 'node/'. arg(1) .'/view/ldif', 
            'title' => t('ldif'),
            'callback' => 'guifi_service_view',
            'callback arguments' => arg(1),
            'access' => user_access('access content'),
            'type' => MENU_CUSTOM_ITEM);
        }
      }
    }
  

  return $items;*/
}

/* guifi_init(): Initialization hook: Load stylesheet */
function guifi_init() {
  drupal_add_css(drupal_get_path('module', 'guifi') .'/guifi.css');
}
/** info hook.
 */
function guifi_node_info() {
  return array(
    'guifi_zone' => array(
      'name' => t('guifi.net zone'),
      'module' => 'guifi_zone',
      'description' => t("Create a community, area or zone. A typical zone hierarchy can be related to the territory (Country/Region/City...) but not have to, i.e. a single city can have many groups or communities with distinct IP addressing policies.<br />Every zone will have it's own page so it can be used as the homepage of that community.<br />The zones must belong at least to the root zone, but can also belong to other zones, so in that way a hierarchy is created.<br />Every zone have its own properties like maps or ip ranges and every node will have to be assigned to an existing zone, and will inherit the zone properties like his IP address and drawn in the corresponding map.<br />If zone properties are leaved blank, will inherit the parent zone properties."),
    ),
    'guifi_node' => array(
      'name' => t('guifi.net node'),
      'module' => 'guifi_node',
      'description' => t("Create a node. A node is a physical location (will be dynamically drawed on the maps using lat/lon coordinates) where there are network devices, servers, etc.<br />Every node have to assigned to a guifi zone."),
    ),
    'guifi_service' => array(
      'name' => t('guifi.net service'),
      'module' => 'guifi_service',
      'description' => t("Create a service. A service is any resource available on the network that should be listed in the content directory of the site, like a web server, internet proxy,ntp, instant messaging, voip gateway, etc... ."),
    ),
  );
}

/** help hook
 */
function guifi_help($section) {
  switch ($section) {
    case 'admin/modules#description':
      return t('Manage the guifi.net, a mesh network community.');
    case 'admin/guifi':
      return t('Select an operation from the menus to manage zones.');
    case 'admin/guifi/zone/add':
      return t('Enter de zone information.');
    case 'node/add#guifi-node':
      return t("Create a node. A node is a physical location (will be dynamically drawed on the maps using lat/lon coordinates) where there are network devices, servers, etc.<br />Every node have to assigned to a guifi zone.");
    case 'node/add#guifi-zone':
      return t("Create a community, area or zone. A typical zone hierarchy can be related to the territory (Country/Region/City...) but not have to, i.e. a single city can have many groups or communities with distinct IP addressing policies.<br />Every zone will have it's own page so it can be used as the homepage of that community.<br />The zones must belong at least to the root zone, but can also belong to other zones, so in that way a hierarchy is created.<br />Every zone have its own properties like maps or ip ranges and every node will have to be assigned to an existing zone, and will inherit the zone properties like his IP address and drawn in the corresponding map.<br />If zone properties are leaved blank, will inherit the parent zone properties.");
    case 'node/add#guifi-service':
      return t("Create a service. A service is any resource available on the network that should be listed in the content directory of the site, like a web server, internet proxy,ntp, instant messaging, voip gateway, etc... .");
  }
}

/**
 * Implementation of hook_perm().
 */
function guifi_perm() {
  return array('administer guifi zones','administer guifi networks','create guifi zones','create guifi nodes','administer guifi users','manage guifi users','edit own guifi zones','edit own guifi nodes');
}

function guifi_admin_settings() {
  global $user;

  $form_weight = -20;

  $form['guifi_license'] = array(
    '#type' => 'textarea', 
    '#title' => t('License agreement'), 
    '#default_value' => variable_get("guifi_license", t("By creating this node, you accept the <a href=\"http://guifi.net/WirelessWCL_EN\">Wireless commons license.</a><br />Note that this database is inteded for supporting a real network, will assign ip addresses and show the network information in various formats, so might be <b>not</b> the right place for submitting ficticious data or just have fun. If you want to run tests or do some self training, be sure you are doing it at some of the <a href=\"http://proves.guifi.net\">test sites</a>.<br />Your access to this site might be banned or your data might be deleted if inappropiate use is detected.<br>You will be allways responsible of the information you give, agree to make it publicly available and you will be able to modify or delete it, network administrators can also update or delete your data.<br>If you want to promote your role within the community you can ask for it contacting the current administrators and they will grant the privileges that you qualify for.")), 
    '#cols' => 60, 
    '#rows' => 10, 
    '#description' => t("Agreement &#038; help message when creating new nodes, users will not be able to create nodes unless they accept this message."),
    '#weight' => $form_weight++,
  );
  $form['guifi_title'] = array(
    '#type' => 'textfield',
    '#title' => t('Block title'),
    '#required' => FALSE,
    '#default_value' => variable_get("guifi_title", t("network statistics")),
    '#size' => 35,
    '#maxlength' => 255, 
    '#description' => t("Title of guifi block..."),
    '#weight' => $form_weight++,
  );
  $form['guifi_root'] = array(
    '#type' => 'textfield',
    '#title' => t('Root zone'),
    '#required' => FALSE,
    '#default_value' => variable_get("guifi_root", 'guifi_zones'),
    '#size' => 35,
    '#maxlength' => 255, 
    '#description' => t("URL of the root zone..."),
    '#weight' => $form_weight++,
  );  
  $form['guifi_contact'] = array(
    '#type' => 'textfield',
    '#title' => t('Default contact'),
    '#required' => FALSE,
    '#default_value' => variable_get("guifi_contact", $user->mail),
    '#size' => 55,
    '#maxlength' => 255, 
    '#description' => t("An email will be submitted to this address when no contact address is present."),
    '#weight' => $form_weight++,
  );
  $form['guifi_notify_period'] = array(
    '#type' => 'select',
    '#title' => t('Send notifications every'),
    '#required' => FALSE,
    '#default_value' => variable_get("guifi_notify_period", 86400),
    '#options' => array(
      -1=>t('Never (disabled)'),
      0=>t('Every cron'),
      3600=>t('Hourly'),
      72000=>t('Every 2 hours'),
      21600=>t('Every 6 hours'),
      43200=>t('Every 12 hours'),
      86400=>t('Daily'),
      172800=>t('Every other day'),
      604800=>t('Weekly')),
    '#description' => t('When the notification messages queue will be delivered, if set to "Never", no messages will be post at the queue.'),
    '#weight' => $form_weight++,
  );
  
  $form['hotspot_ssid'] = array(
    '#type' => 'textfield',
    '#title' => t('Hotspot SSID'),
    '#required' => FALSE,
    '#default_value' => variable_get("hotspot_ssid", t("HotSpot")),
    '#size' => 35,
    '#maxlength' => 255, 
    '#description' => t("SSID name for the hotspot open access for guests"),
    '#weight' => $form_weight++,
  );
  $form['guifi_loglevel'] = array(
    '#type' => 'select',
    '#title' => t('Log level'),
    '#required' => FALSE,
    '#default_value' => variable_get("guifi_loglevel", 0),
    '#options' => array(0=>'None',1=>'Basic',2=>'Trace',3=>'Full'),
    '#description' => t('Trace log level to screen:<ol><li><em>None</em>, normal operation</li><li><em>Basic</em>, general messages</li><li><em>Trace</em> provides follow-up of functions being executed, for developers</li><li><em>Full</em> dumps variable values, very long, for fine debug</li></ol>Change the log level to figure out whats happening.'),
    '#weight' => $form_weight++,
  );
  $form['guifi_gmap_key'] = array(
    '#type' => 'textfield',
    '#title' => t('Key for Google Maps API'),
    '#required' => FALSE,
    '#default_value' => variable_get("guifi_gmap_key", ''),
    '#size' => 80,
    '#maxlength' => 1024,
    '#description' => t("If not present, Google Maps API will be disabled.<br>Get it at: ").
       '<a href="http://code.google.com/apis/maps/signup.html">'.
          'http://code.google.com/apis/maps/signup.html'.'</a>',
    '#weight' => $form_weight++,
  );
  $form['guifi_wms_service'] = array(
    '#type' => 'textfield',
    '#title' => t('URL for WMS service'),
    '#required' => FALSE,
    '#default_value' => variable_get("guifi_wms_service", 'http://wms.guifi.net/cgi-bin/mapserv?map=/home1/fgs/www/htdocs/guifimaps/GMap.map'),
    '#size' => 80,
    '#maxlength' => 1024,
    '#description' => t("URL to call to get WMS guifi mapping services"),
    '#weight' => $form_weight++,
  );
  $form['guifi_maps'] = array(
    '#type' => 'textfield',
    '#title' => t('URL for maps module'),
    '#required' => FALSE,
    '#default_value' => variable_get("guifi_maps", 'http://maps.guifi.net'),
    '#size' => 35,
    '#maxlength' => 255, 
    '#description' => t("Base URL for the mapping GIS application (guifimaps)"),
    '#weight' => $form_weight++,
  );
  $form['guifi_decimal'] = array(
    '#type' => 'textfield',
    '#title' => t('Decimal separator'),
    '#required' => FALSE,
    '#default_value' => variable_get("guifi_decimal", ','),
    '#size' => 1,
    '#maxlength' => 1, 
    '#description' => t("Decimal character for formatting numbers"),
    '#weight' => $form_weight++,
  );
  $form['guifi_thousand'] = array(
    '#type' => 'textfield',
    '#title' => t('Thousands separator'),
    '#required' => FALSE,
    '#default_value' => variable_get("guifi_thousand", '.'),
    '#size' => 1,
    '#maxlength' => 1, 
    '#description' => t("Thousands separatos for formatting numbers"),
    '#weight' => $form_weight++,
  );
  
  
  return system_settings_form($form);
}


function guifi_block($op = "list", $delta = 0) {
  $oGC = new GeoCalc();
  $dTotals = array();
  

  if ($op == "list") {
    $blocks[0]["info"] = t(variable_get("guifi_title",t("guifi nodes")));
    return $blocks;
  }
  else {
    $block['subject'] = t(variable_get("guifi_title",
      "<a href=\"guifi\">" .t("List of guifi nodes") ."</a>"));
    $tnodes = db_query('
      SELECT 
        status_flag, count(*) c 
      FROM {guifi_location} 
      GROUP BY status_flag');
    $str = '';
    $rows = array();
    $totals = 0;
    while ($summary = db_fetch_object($tnodes)) {
      $rows[] = array(
        t($summary->status_flag),
        array(
          'data'=>
            number_format(
              $summary->c,
              0,
              null,
              variable_get(
                'guifi_thousand',
                ',')
            ),
            'class'=>$summary->status_flag));
      $totals = $totals + $summary->c;
    }
    $header = array(
      t('Nodes'),
      '<p align=RIGHT>'.
        number_format(
          $totals,
          0,
          null,
          variable_get('guifi_thousand','.')
        ).'</p>');
    $content = theme('table', $header, $rows);
    $content .= '<div class="more-link">'. 
      l(t('node list and maps...'),
        variable_get('guifi_root','/guifi_zones'), 
        array(
          'title' => t('Go to the list of nodes root page and their maps.'))) .'</div>';

    $qlinks = db_query('
      SELECT 
        l1.id, n1.id nid1, n2.id nid2, l1.link_type, n1.lat lat1, 
        n1.lon lon1, n2.lat lat2, n2.lon lon2 
      FROM guifi_links l1 
        LEFT JOIN guifi_links l2 ON l1.id=l2.id 
        LEFT JOIN guifi_location n1 ON l1.nid=n1.id 
        LEFT JOIN guifi_location n2 ON l2.nid=n2.id 
      WHERE l1.nid != l2.nid AND l1.device_id != l2.device_id');
    unset($listed);
    while ($link = db_fetch_object($qlinks)) {
      if (!isset($listed[$link->id]) )
        $listed[$link->id] = $link;
      else
        continue; 
      $d = 
        round($oGC->EllipsoidDistance(
          $link->lat1, 
          $link->lon1, 
          $link->lat2, 
          $link->lon2),
          1);
      switch ($link->link_type) {
        case 'wds': $type=t('PtP link'); break;
        case 'ap/client': $type=t('ap/client'); break;
        default: $type=t('unknown'); 
      }
      if ($d < 100) {
        $dTotals[$type]['dTotal'] += $d; 
        $dTotals[$type]['count'] ++;
      } else
       guifi_log(GUIFILOG_BASIC,sprintf('Probable DISTANCE error between nodes (%d and %d) %d kms.',
        $link->nid1,
        $link->nid2,
        $d));
    }

    unset($rows);
    $rows=array();
    if (count($dTotals)) foreach ($dTotals as $key=>$dTotal) 
    if ($dTotal['dTotal']) {
      $rows[] = array(
        $key,
        array(
          'data'=>number_format(
            $dTotal['count'],
            0,
            null,
            variable_get('guifi_thousand','.')),
          'align'=>'right'),
        array(
          'data'=>number_format(
            $dTotal['dTotal'],
            2,
            variable_get('guifi_decimal',','),
            variable_get('guifi_thousand','.')),
          'align'=>'right')
        );
      $lcount += $dTotal['count'];
      $ldTotal += $dTotal['dTotal'];
    }
    if ($lcount)
      $rows[] = array(
        '<strong>'.t('Total').'</strong>',
        array(
          'data'=>number_format(
            $lcount,
            0,
            null,
            variable_get('guifi_thousand','.')),
          'align'=>'right'),
        array(
          'data'=>number_format(
            $ldTotal,
            2,
            variable_get('guifi_decimal',','),
            variable_get('guifi_thousand','.')),
          'align'=>'right')
      );
    $content.= theme(
      'table',
      array(t('Wireless<br />links'),
      '<p align="right">#</p>',t('kms.')),$rows);

    $block['content'] = $content;
    return $block;

  }
}

function guifi_access($op, $node) {
  global $user;

  switch($op) {
    case 'create':
      return user_access("create guifi nodes");
    case 'update':
    case 'delete':
      if ($node->type == 'guifi_node') {
        if ((user_access('administer guifi zones')) ||
          (user_access('administer guifi networks')) ||
          ($node->uid == $user->uid)) 
          return TRUE;
        return FALSE;
      } else {
        return user_access("create guifi nodes");
      }
  }
}

function guifi_device_access($op, $id) {
  global $user;

  guifi_log(GUIFILOG_TRACE,'function guifi_device_access()',$id);
  guifi_log(GUIFILOG_FULL,'user=',$user);

  if ($user->uid==0)
    return FALSE;
  
  if (empty($id) || ($id < 1))
   return FALSE;

  $device = guifi_get_device($id);

  $node = node_load(array('nid'=>$device['nid']));

  switch($op) {
    case 'create':
      return user_access("create guifi nodes");
    case 'update':
      if ((user_access('administer guifi networks')) ||
        (user_access('administer guifi zones')) ||
        ($device['user_created'] == $user->uid) || 
        ($node->user_created == $user->uid))
        return TRUE;
      return FALSE;
  }
}

function guifi_link($type, $node = 0){
  $links = array();

  if ($type == "node" && $node->type == "guifi_zone") {
    $links['mrtg'] = array(
      'title'=> t('create mrtg config'),
      'href'=>"guifi/mrtg/$node->nid",
      'attributes'=>array(
        'title'=>t('get an mrtg configuration file for this zone')));
    $links['nodeXchange'] = array(
      'title'=> t('nodeXchange'),
      'href'=>"guifi/nodexchange/$node->nid",
      'attributes'=>array('title'=>t('export zone in nodeXchange format')));
    $links['cnml'] = array(
      'title'=> t('CNML'),
      'href'=>"guifi/cnml/$node->nid",
      'attributes'=>array('title'=>t('export zone in CNML format')));
    $links['gml'] = array(
      'title'=> t('gml'),
      'href'=>"guifi/gml/$node->nid",
      'attributes'=>array('title'=>t('export zone in gml format')));
    if (module_exists('budgets')) {
      $links['budgets'] = array(
        'title'=> t('budgets'),
        'href'=>"budgets/$node->nid",
        'attributes'=>array('title'=>t('view budgets for this zone')));
    }
  }
  if ($type == "node" && $node->type == "guifi_node") {
    $links['cnml'] = array(
      'title'=> t('CNML'),
      'href'=>"guifi/cnml/$node->nid/node",
      'attributes'=>array('title'=>t('export node in CNML format')));
  }
 
  return $links;
}

function guifi_page() {
  //TODO: Make some welcome page
  return $output;

}

/* Obsolete after upgarde to drupal 6.x
 * 
 * function guifi_view(&$node, $teaser = 0, $page = 0) {
  
  
  if (!is_object($node))  {
    $nid = $node;
    unset($node);
    $node = node_load(array('nid' => $nid));
  }

  switch ($node->type) {
    case 'guifi_zone':
//      guifi_zone_view($node);
      break;
    case 'guifi_node':
      guifi_node_view($node);
      break;
    case 'guifi_service':
      guifi_service_view($node);
  }
}
*/


function guifi_cron() {
  // delete orphan devices, radios, ip addresses & links
  $msg_exp = variable_get('guifi_notify_last',0) +
    variable_get('guifi_notify_period',86400);
  if ($msg_exp >= 0)
  if (time() > $msg_exp) {
    guifi_notify_send();
    variable_set('guifi_notify_last',time());
  }
  guifi_purge();
}

/** putge orphan data
 */
function guifi_purge() {
  // deleting orphan devices
  unset($del);
  $q =db_query('SELECT 
                  d.id 
                FROM {guifi_devices} d 
                  LEFT JOIN {guifi_location} n ON d.nid=n.id 
                WHERE n.id IS NULL');
  while ($r = db_fetch_object($q) )
    $del[] .= $r->id;

  if (count($del)) {
    $SqlDelDev = 
      sprintf("DELETE FROM {guifi_devices} WHERE id IN (%s)",
        implode(',',$del));
    db_query($SqlDelDev);
    $SqlDelRad = 
      sprintf("DELETE FROM {guifi_radios} WHERE id IN (%s)",
        implode(',',$del));
    db_query($SqlDelRad);
  }

  // deleting orphan radios
  unset($del);
  $q =db_query('SELECT 
                  r.id 
                FROM {guifi_radios} r LEFT JOIN {guifi_devices} d ON r.id=d.id
                WHERE d.id IS NULL');
  while ($r = db_fetch_object($q) )
    $del[] .= $r->id;

  if (count($del)) {
    $SqlDelRad = 
      sprintf("DELETE FROM {guifi_radios} WHERE id IN (%s)",
        implode(',',$del));
    print $SqlDelRad;
    db_query($SqlDelRad);
  }

  // deleting orphan interfaces
  unset($del);
  $q =db_query('SELECT 
                  i.id 
                FROM {guifi_interfaces} i 
                  LEFT JOIN {guifi_devices} d ON i.device_id=d.id 
                WHERE d.id IS NULL');
  while ($r = db_fetch_object($q) )
    $del[] .= $r->id;

  if (count($del)) {
    $SqlDel= 
      sprintf("DELETE FROM {guifi_interfaces} WHERE id IN (%s)",
        implode(',',$del));
    print $SqlDel;
    db_query($SqlDel);
  }

  // deleting orphan ip addresses
  unset($del);
  $q =db_query('SELECT a.interface_id 
                FROM {guifi_ipv4} a 
                  LEFT JOIN {guifi_interfaces} i ON a.interface_id=i.id 
                WHERE i.id IS NULL');
  while ($r = db_fetch_object($q) )
    $del[] .= $r->interface_id;

  if (count($del)) {
    $SqlDel= 
      sprintf("DELETE FROM {guifi_ipv4} WHERE interface_id IN (%s)",
        implode(',',$del));
    print $SqlDel;
    db_query($SqlDel);
  }

  // deleting orphan links
  unset($del);
  $q =db_query('SELECT 
                  l.id 
                FROM {guifi_links} l 
                  LEFT JOIN {guifi_devices} d ON l.device_id=d.id 
                WHERE d.id IS NULL');
  while ($r = db_fetch_object($q) )
    $del[] .= $r->id;

  if (count($del)) {
    $SqlDel= 
      sprintf("DELETE FROM {guifi_links} WHERE id IN (%s)",
        implode(',',$del));
    print $SqlDel;
    db_query($SqlDel);
  }

}

?>
