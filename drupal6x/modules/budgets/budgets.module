<?php
// $Id: budgets.module x$

include_once("budgets_todo.inc.php");

/**
 * @file
 * allow to create budgets, allocated to projects, and then collect funds for them
 */

/**
* Implementation of hook_menu().
*/
function budgets_menu() {
  $items = array();
  
  $items['admin/settings/budgets'] = array(
    'title' => 'Budgets',
    'description' => 'Administer Budget defaults.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('budgets_admin_settings'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM);
  
  $items['budgets'] = array(
    'title' => 'budget and funding',
    'page callback' => 'budgets_page',
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'type' => MENU_SUGGESTED_ITEM);
  $items['node/%budgets/view/page'] = array(
    'title' => 'page',
    'page callback' => 'budgets_view',
    'page arguments' => array(1),
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'weight' => -9,
    'type' => MENU_DEFAULT_LOCAL_TASK);
  $items['node/%budgets/view/items'] = array(
    'title' => 'budget details',
    'page callback' => 'budgets_view',
    'page arguments' => array(1),
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'weight' => -8,
    'type' => MENU_LOCAL_TASK);
  
  $items['node/%budgets/view/funds'] = array( 
    'title' => 'funds report',
    'page callback' => 'budgets_view',
    'page arguments' => array(1),
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'weight' => -7,
    'type' => MENU_LOCAL_TASK);
  
  $items['node/%budgets/view/contribute'] = array( 
    'title' => 'make your donation',
    'page callback' => 'budgets_view',
    'page arguments' => array(1),
    'access callback' => 'user_access',
    'access arguments' => array('access content'),
    'weight' => -6,
    'type' => MENU_LOCAL_TASK);
    
  $items['budgets/js/select-budget/%'] = array(
    'title' => 'Javascript/autocomplete find Budget',
    'page callback' => 'budgets_ahah_select_budget',
    'page arguments' => array(3),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  $items['budgets/js/select-quote/%'] = array(
    'title' => 'Javascript/autocomplete find supplier quote',
    'page callback' => 'budgets_ahah_select_quote',
    'page arguments' => array(3),
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK,
  );
  
  return $items;
}

/**
* Implementation of hook_init().
*/
function budgets_init() {
  drupal_add_css(drupal_get_path('module', 'budgets') .'/budgets.css');
}

/**
* Implementation of hook_node_info().
*/
function budgets_node_info() {
  return array(
    'budgets' => array(
      'name' => t('guifi.net Proposal/Budget'),
      'module' => 'budgets',
      'description' => t('Create a proposal/budget. ' .
          'A proposal is an itemized project description with allocated due costs. ' .
          'Therefore, contributors can donate funds to it, or can be used as a ' .
          'RFP formal document (Requirement for proposals).'),
    ),
    'supplier' => array(
      'name' => t('guifi.net provider/supplier'),
      'module' => 'budgets',
      'description' => t("A provider is a commercial supplier. Once you become a " .
          "supplier, you will be able to quote services " .
          "or materials to deploy/build open networks. " 
          )
    ),
    'supplier_quote' => array(
      'name' => t('guifi.net quote'),
      'module' => 'budgets',
      'description' => t("A supply quote is a priced item given by a supplier which " .
          "can be used as a guidance while filling proposals/budgets."),
    ),
  );
    }

/**
* Implementation of hook_perm().
*/
function budgets_perm() {
  return array('administer budgets', 'create budgets');
}

/**
* Implementation of hook_access().
*/
function budgets_access($op, $node) {

  switch($op) {
    case 'create':
      return user_access('create budgets');
    case 'update':
      if ($node->type == 'budget') {
        if ((user_access('administer budgets')) || ($node->uid == $user->uid)) {
          return TRUE;
        }
        else {
          return FALSE;
        }
      }
      else {
        return user_access('create budgets');
      }
  }
}

/**
 * Implementation of hook_help().
 */
function budgets_help($path, $arg) {
  switch ($path) {
    case 'node/add#budgets':
      return t("<p>Create a budget. A budget is an itemized project with allocated due costs. Therefore, contributors can donate funds to it.</p>");
  }
}

/**
 * Implementation of hook_link().
 */
 
function budgets_link($type, $node = 0, $main) {
  $links = array();

  if (($node->type == 'budgets') and ($node->budget_status == 'Open')) {
    $links[] = 
               array(
               'title' => t('make your donation'),
               'href'=> 'node/'. $node->nid.'/view/contribute',
               'attributes'=>array(
               'title' => t('make your donation to this project')
               ));
  }      
  return $links;
}

/**
* Implementation of hook_variable().
*/
function budgets_variable($var) {

  $payment_default = t("
To contribute to this budget, please allocate your desired contribution and:
<ul>
<li>Provide your contact information (name, telf. or email) so a promoter will be able to contact you,</li>
<li>... or if you wish, make a money transfer to the account EEEE OOOO DD CCCCCC specifying clearly your name for validation purposes.</li>
</ul>
Your contribution will be in 'Submitted' status. Once is verified, the promoter will update the status of your contibution to <i>'Approved'<i/> if accepts it, <i>'Declined'</i> if for any reason this contribution can't be acceped, or <i>'Paid'</i> to confirm that the money has arrived.");
  
$terms_default = t("<ol>
<li>An open project budget may change without advice depending in how many funds is receiving. Contributors may ask for a return of their funds if they not agree with those changes.</li>
<li>Once a budget is closed, promoters are responsible to execute it, and contributors are not longer allowed to ask for a return.</li>
<li>Promoters are not liable for the results of the project, just for spending the funds in a similar way as described in the budget.</li>
<li>If a project does not execute, promoters will be responsible of returning funds to contributors or allocate them to a another project.</li>
<li>The promoters/contributors are liable by their budgets and fundings. This site just provides a way to communicate between them, with no other responibilities.</li>
</ul>");

  switch ($var) {
    case 'budget_payment':
      return variable_get($var, $payment_default);
    case 'budget_terms':
      return variable_get($var, $terms_default);
  }
}
/**
* Implementation of hook_admin_seetings().
*/
function budgets_admin_settings() {
  global $user;

  $form_weight = -20;

  $form['budget_title'] = array(
    '#type' => 'textfield',
    '#title' => t('Block title'),
    '#required' => FALSE,
    '#default_value' => variable_get("budget_block_title", t("budgets & funds")),
    '#size' => 35,
    '#maxlength' => 255,
    '#description' => t("Title of budgets block..."),
    '#weight' => $form_weight++,
  );

  $form['budget_payment'] = array(
    '#type' => 'textarea', 
    '#title' => t('Default payment instructions'), 
    '#default_value' => budgets_variable("budget_payment"),
    '#cols' => 60, 
    '#rows' => 10, 
    '#description' => t("Default text for payment instructions."),
    '#weight' => $form_weight++,
  );

  $form['budget_terms'] = array(
    '#type' => 'textarea', 
    '#title' => t('Default terms & conditions'), 
    '#default_value' => budgets_variable("budget_terms"),
    '#cols' => 60, 
    '#rows' => 10, 
    '#description' => t("Default text for budget 'Terms & Conditions' box."),
    '#weight' => $form_weight++,
  );

  $form['budget_expires'] = array(
    '#type' => 'select',
    '#title' => t('Default expiration'),
    '#required' => FALSE,
    '#default_value' => variable_get("budget_expires", '1h'),
    '#options' => _budget_expires_list(),
    '#description' => t('By default, how many weeks the budget will expire (closed if not covered)'),
    '#weight' => $form_weight++,
  );

  $form['budget_currency_txt'] = array(
    '#type' => 'textfield',
    '#title' => t('Default currency text'),
    '#required' => FALSE,
    '#default_value' => variable_get("budget_currency_symbol", "â‚¬"),
    '#size' => 5,
    '#maxlength' => 5,
    '#description' => t('By default, currency symbol'),
    '#weight' => $form_weight++,
  );

  $form['budget_currency_symbol'] = array(
    '#type' => 'textfield',
    '#title' => t('Default currency symbol'),
    '#required' => FALSE,
    '#default_value' => variable_get("budget_currency_txt", "Euros"),
    '#size' => 10,
    '#maxlength' => 10,
    '#description' => t('By default, currency abbreviation'),
    '#weight' => $form_weight++,
  );

  $form['budget_minimum'] = array(
    '#type' => 'textfield',
    '#title' => t('Default minimum contribution'),
    '#required' => FALSE,
    '#default_value' => variable_get("budget_minimum", "0"),
    '#size' => 10,
    '#maxlength' => 10,
    '#description' => t('By default, minimum amount of each single contribution'),
    '#weight' => $form_weight++,
  );
  $form['budget_maximum'] = array(
    '#type' => 'textfield',
    '#title' => t('Default maximum contribution'),
    '#required' => FALSE,
    '#default_value' => variable_get("budget_maximum", "50000"),
    '#size' => 10,
    '#maxlength' => 10,
    '#description' => t('By default, maximum amount of each single contribution'),
    '#weight' => $form_weight++,
  );
 

  return system_settings_form($form);
}

/**
* Implementation of hook_block().
*/
function budgets_block($op = "list", $delta = 0, $edit = array()) {
 switch ($op) {
    case 'list':
    $blocks[0]["info"] = variable_get("budget_block_title", t("Open budgets"));
    return $blocks;

  case 'configure':
    $form['items'] = array(
      '#type' => 'select',
      '#title' => t('Number of items'),
      '#default_value' => variable_get('budgets_block_items', 0),
      '#options' => array('1', '2', '3'),
    );
    return $form;
    case 'save':
    variable_set('budgets_block_items', $edit['items']);
    
  case 'view':
    switch($delta) {
      case 0:
    $block['subject'] = variable_get('budget_block_title', t("budgets"));
    $block['content'] = budgets_display_block_1($content);
        break;
    }
    return $block;
  }
}

function budgets_display_block_1() {
    $content .= t("Help raising the green bars with your donations!") ."<br />";
    $qbudgets = db_query(
      "SELECT b.id " .
      "FROM {budgets} b " .
      "WHERE b.budget_status = 'Open' " .
      "ORDER BY b.id DESC");
    while ($budget = db_fetch_object($qbudgets)) {
      $b = node_load(array('nid'=>$budget->id));
      $content .= '<div>&middot;&nbsp;<a href="' .base_path() .'node/' .$budget->id .'">' .$b->title .'</a></div>';
      $content .= budgets_bar($b->total,$b->covered,$b->currency_symbol);
    }
    $content .= '<div style="text-align: right;">' .l(t('view all open projects'), 'budgets') .'</div>';
    return $content;
}

/**
* Implementation of hook_load().
*/
function budgets_load($node) {
  if (is_object($node))
    $k = $node->nid;
  else
    $k = $node;
  
  $node = db_fetch_object(
    db_query("SELECT * FROM {budgets} WHERE id = '%d'", $k));
    
  $items = array();
  $total = 0;
  $covered = 0;
  $funds = array();
  
  $qry = db_query(
    "SELECT * " .
    "FROM {budget_items} " .
    "WHERE budget_id='%d' " .
    "ORDER BY weight, id",
    $k);
  while ($item = db_fetch_array($qry)) { 
    $items[] = $item;
    $total += ($item['quantity'] * $item['cost']);
  }
  $node->items = $items;
  $node->total = $total;
  
  $qry = db_query(
    "SELECT * " .
    "FROM {budget_funds} " .
    "WHERE budget_id='%d' " .
    "ORDER BY timestamp_created",
    $k);
  while ($fund = db_fetch_array($qry)) { 
    $funds[] = $fund;
    if ($fund['fund_status'] != 'Declined')
      $covered += $fund['amount'];
  }
  $node->funds = $funds;
  $node->covered = $covered;
  
  list($node->arrexpires['year'],
    $node->arrexpires['month'],
    $node->arrexpires['day']) = explode(',',date("Y,n,j",$node->expires));
  
  return $node;
}

function _budget_expires_list() {
  return array('1w' => t('One week'), '2w' => t('Two weeks'), '1m' => t('One month'), '2m' => t('Two months'), '1q' => t('One quarter'), '4m' => t('4 months'), '1h' => t('Half year'), '1y' => t('One year'));
}

/**
* Implementation of hook_form().
*/
function budgets_form(&$node, &$param) {
  
  guifi_log(GUIFILOG_TRACE,'function budgets_form()',$param);
  
  if (!empty($param['values'])) {
     foreach ($param['values'] as $k=>$v)
       $node->$k = $v;
     guifi_log(GUIFILOG_TRACE,'function budgets_form(READ)',$node);
  }           

  budgets_items_clean($node->items);
  
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#required' => TRUE,
    '#default_value' => !empty($node->title) ? $node->title : NULL,
  );

  $form['budgets_general'] = array(
    '#type' => 'fieldset',
    '#title' => t('General'),
//    '#collapsible' => true,
//    '#collapsed' => true,  
  );
  $form['budgets_general']['budget_status'] = array(
    '#type' => 'select',
    '#title' => t('Status'),
    '#default_value' => $node->budget_status,
    '#options' => array(
      'Preparation' => t('Preparation'),
      'Open' => t('Open'), 
      'Closed' => t('Closed')),
    '#prefix' => '<table><tr><td>',
    '#suffix' => '</td>'
  );  

  $form['budgets_general']['arrexpires'] = array(
    '#type' => 'date',
    '#title' => t('Expiration'),
    '#default_value' => $node->arrexpires,
    '#description' => t("Date when this proposal/budget will expire"),
    '#required' => true,
    '#prefix' => '<td>',
    '#suffix' => '</td></tr></table>'
  );
  
  $form['budgets_currency'] = array(
    '#type' => 'fieldset',
    '#title' => t('Currency'),
    '#collapsible' => true,
    '#collapsed' => true,  
  );
  $form['budgets_currency']['currency_txt'] = array(
    '#type' => 'textfield',
    '#title' => t('Text'),
    '#default_value' => $node->currency_txt,
    '#size' => 10,
    '#maxlength' => 10, 
    '#description' => t("abbreviation"),
    '#prefix' => '<table><tr><td>',
    '#suffix' => '</td>'
  );  
  $form['budgets_currency']['currency_symbol'] = array(
    '#type' => 'textfield',
    '#title' => t('Symbol'),
    '#default_value' => $node->currency_symbol,
    '#size' => 5,
    '#maxlength' => 5,
    '#prefix' => '<td>',
    '#suffix' => '</td></tr></table>'
  );

  $form['budgets_contribution'] = array(
    '#type' => 'fieldset',
    '#title' => t('Contribution limits'),
    '#collapsible' => true,
    '#collapsed' => true,  
  );
  
  $form['budgets_contribution']['min_contribution'] = array(
    '#type' => 'textfield',
    '#title' => t('Minimum'),
    '#default_value' =>  $node->min_contribution,
    '#size' => 10,
    '#maxlength' => 10,
    '#description' => t("Below this amount, contributions will not be accepted"),
    '#prefix' => '<table><tr><td>',
    '#suffix' => '</td>'
  );
  
  $form['budgets_contribution']['max_contribution'] = array(
    '#type' => 'textfield',
    '#title' => t('Maximum'),
    '#default_value' =>  $node->max_contribution,
    '#size' => 10,
    '#maxlength' => 10,
    '#description' => t("Above this amount, contributions will not be accepted"),
    '#prefix' => '<td>',
    '#suffix' => '</td></tr></table>'
    );
    
  $form['zone_id'] = guifi_zone_select_field($node->zone_id,'zone_id');
  
  $form['items'] = budgets_items_form($node->items);
  
  $form['batch'] = array(
    '#type'=>'fieldset',
    '#title'=>t('Add items from previous proposals or quotes provided by suppliers'),
    '#collapsible'=>false,
    '#collapsed'=>false
  );
  $form['batch']['loadbudget'] = array(
    '#type'=>'textfield',
    '#title'=>t('Proposal'),
    '#description'=>t('Find an existng proposal, and then press "Load proposal"' .
        ' to get the existing items of that proposal loaded into this one'),
    '#default_value' => t('None'),
    '#autocomplete_path'=> 'budgets/js/select-budget',
  );
  $form['batch']['loaddo'] = array(
    '#type' => 'submit',
    '#submit' => array('budgets_form_load_budget'),
    '#value' => t('Load Proposal')
  );
  
  
  $form['body'] = array(
    '#title' => t("Body"),
    '#type' => 'textarea',
    '#default_value' => $node->body,
    '#description' => t('Description of the project. Describe here it\'s purpose, expected benefits and beneficiaries, justifications, etc. Use de default drupal node syntax for constructing a teaser with the first lines of text or by inserting the <!-- header --> tag'),
    '#rows' => 10,
    '#weight' => $form_weight++
  );
  
  
 
//    $form['zones'] = array(
//        '#type' => 'select',
//        '#title' => t('Zones'),
//        '#default_value' => $node->zones,
//        '#options' => guifi_zones_listbox(),
//        '#description' => t("If there are, zones where this budget apply specifically."),
//        '#multiple' => TRUE,
//        '#weight' => $form_weight++
//    );
    $form['others'] = array(
      '#type'=>'fieldset',
      '#title'=>t('Promoter, payment instructions, terms & conditions'),
      '#collapsible'=>true,
      '#collapsed'=>true
    );
    $form['others']['promoter'] = array(
        '#title' => t("Promoter(s)"),
        '#type' => 'textarea',
        '#default_value' => $node->promoter,
        '#description' => t('Explain here who are you, how to contact you, why people have to trust you, what you have already done...'),
        '#rows' => 3,
        '#weight' => $form_weight++
    );

    $form['others']['payment_instructions'] = array(
        '#title' => t("Payment instructions"),
        '#type' => 'textarea',
        '#default_value' => $node->payment_instructions,
        '#description' => t("Explain here how to send money funds for this project, it can be an account for money transfers, ask for contact information, links to paypal or similar online applications..."),
        '#rows' => 7,
        '#weight' => $form_weight++
    );

    $form['others']['terms'] = array(
        '#title' => t("Terms & Conditions"),
        '#type' => 'textarea',
        '#default_value' => $node->terms,
        '#description' => t("Explain here the terms and conditions of this project or use the default text provided"),
        '#rows' => 7,
        '#weight' => $form_weight++
    );

  return $form;
}

function budgets_item_form($item) {

  $it = $item;
  unset($it['weight']);
  if (empty($it)) {
    $title = t('New item (unfold to fill a new item)');
    $folded = true;
  } else {
    if (empty($item['title']))
      $title = t('item');
    else
      $title = $item['title'];
    
    $title .= str_pad("",10,'_').
      $item['quantity'] .'*'. $item['cost'] .' = '.
      $item['quantity'] * $item['cost'];
       
      
    $folded = false;
  }
  
  $f = array (
    '#type' => 'fieldset',
    '#title' => $title,
    '#tree' => true,
    '#collapsible' => true,
    '#collapsed' => true
  );
  if (isset($item['id']))
    $f['id'] = array(
      '#type' => 'hidden',
      '#value' => $item['id']
    );
  else
    $f['new'] = array(
      '#type' => 'hidden',
      '#value' => true
    );
    
  $f['id'] = array(
    '#type' => 'hidden',
    '#value' => $item['id']
  );
  $f['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#required' => false,
    '#default_value' => !empty($item['title']) ? $item['title'] : NULL,
        '#prefix' => '<table><tr><td>',
        '#suffix' => '</td>',    
  );
  $f['quantity'] = array(
    '#type' => 'textfield',
    '#title' => t('Quantity'),
    '#default_value' =>  $item['quantity'],
    '#size' => 6,
    '#maxlength' => 12,
    '#prefix' => '<td>',
    '#suffix' => '</td>',
  );
  $f['cost'] = array(
    '#type' => 'textfield',
    '#title' => t('Cost'),
    '#default_value' =>  $item['cost'],
    '#size' => 10,
    '#maxlength' => 12,
    '#prefix' => '<td>',
    '#suffix' => '</td>',
  );      
  $f['weight'] = array(
    '#type' => 'weight',
    '#title' => t('Weight'),
    '#default_value' => $item['weight'],
    '#delta'=>30,
    '#prefix' => '<td>',
    '#suffix' => '</td></tr></table>',
  );
  
  // Description 
  $f['description'] = array(
    '#type' => 'textarea', 
    '#description' => t('Description'),
    '#default_value' => $item['description'],
  );
  // Comments 
  $f['comments'] = array(
    '#type' => 'textarea',
    '#description' => t('Comments'), 
    '#value' => $item['comments'],
  );
  
  return $f;
}

function budgets_items_form($items) {
  $txtmore = t('If you need more items, save & edit again ' .
        'or press "Preview" and you will get 3 more items to fill');
  $f = array(
    '#type' => 'fieldset',
    '#title' => t('Budget items'),
    '#tree' => true,
    '#collapsible' => true,
    '#collapsed' => false,
    '#description' => $txtmore
  );  
  
  // Sort items by weight
  foreach ($items as $ki=>$item) 
    $witems[$ki] = $item['weight'];
  asort($witems);
  
  // list items
  $cw = -30;
  foreach ($witems as $ki=>$item) {
//    print_r($items[$ki]);
//    print "\n<br>";
    $f[$ki] = budgets_item_form($items[$ki]);  
    if ($cw < $items[$ki]['weight'])
      $cw = ($items[$ki]['weight']+1);
  } // foreach item
  
  for ($c = $ki + 1; $c < ($ki + 4); $c++) {
    $f[$c] = budgets_item_form(array('weight'=>$cw));
    $cw++;      
  }
  
  $f['items_help'] = array(
    '#type' => 'item',
    '#title' => t('Already filled all items and need for more?'),
    '#value' => $txtmore,
  );
  
  return $f;
    $form['items']['items_help'] = array(
        '#type' => 'item',
        '#title' => t('Budget items'),
        '#value' => $help_text,
        '#weight' => $form_weight++
    );
    $headers = array(
//                     '<span>&nbsp;&nbsp;'.t('Select').'</span>',
                     '&nbsp;',
                     '<span>'.t('Description').'</span>',
                     t('Comments'),
                     '<span>'.t('Units').'</span>',
                     '<span>'.t('Cost').'</span>',
                     '<span>'.t('Total').'</span>',
                     '<span>'.t('Weight').'</span>'
                     );
    $output .= theme('table', $headers, $rows);
//    $output .= form_button(t('Edit selected'), 'form_item[edit]');
      $output .= 'form_button';
//    $output .= form_button(t('Delete selected'), 'form_item[delete]');
      $output .= 'form_button';

//  } else {

 //   $output .= form_item(t('Budget items'),t('There is no budget items yet for this project'),t('Add values by pressing the "Add budget item" button'));
      $output .=     $form['menu']['_path'] = array(
      '#type' => 'item',
      '#title' =>t('Budget items'),
      '#description' => t('There is no budget items yet for this project'),t('Add values by pressing the "Add budget item" button'),
    );

//  }

 // $output .= form_button(t('Add budget item'), 'form_item[add]');
    $form['form_item[add]'] = array(
        '#type' => 'button',
        '#value' => t('Add budget item'),
        '#weight' => $form_weight++
    );

  if (!empty($node->budget_items)) {
  }
}

function budgets_form_load_budget($form,&$form_state) {
  $node = &$form_state['values'];
  guifi_log(GUIFILOG_TRACE,'function budgets_form_load_budget()',$node);
  
  $toLoad = explode('-',$node['loadbudget']);
  if ($toLoad[0] == t('None'))
    return;
    
  budgets_items_clean($node['items']);

  // find higest weight  
  $cw = -30;
  foreach ($node['items'] as $k=>$v)
    if ($v['weight']>$cw)
      $cw=$v['weight']+1;
  
  // query existing budget/proposal
  $qry = db_query(
    'SELECT i.* ' .
    'FROM {budget_items} i ' .
    'WHERE budget_id=%d ' .
    'ORDER BY i.weight, i.id',
    $toLoad[0]
  );
  
  // load items found into current budget
  while ($newI = db_fetch_array($qry)) {
    $newI['weight'] = $cw;
    $node['items'][] = $newI;
    $cw++;
  }
  guifi_log(GUIFILOG_TRACE,'function budgets_form_load_budget(OUT)',$node);  
  
  $form_state['#redirect'] = FALSE;
  $form_state['rebuild'] = true;
}

function budgets_items_clean(&$nitems) {
  $items = $nitems;  
  foreach ($items as $k=>$i) {
    if (empty($i['title']))
    if (empty($i['quantity']))
    if (empty($i['cost']))
    if (empty($i['description']))
    if (empty($i['comments'])) {
       unset($nitems[$k]);
    }
  }
  
}
/**
* Implementation of hook_validate().
*/
function budgets_validate(&$node) {
  guifi_log(GUIFILOG_TRACE,'function budgets_validate()',$node);
  
  if (empty($node->nid)) {
    // Fill default values
    if (empty($node->payment_instructions))
      $node->payment_instructions = budgets_variable("budget_payment");
    if (empty($node->terms))
      $node->terms = budgets_variable("budget_terms");
    if (empty($node->expires)) {
      switch (variable_get("budget_expires",'1q')) {
        case '1w': $dexp = mktime(0, 0, 0, date("m"),  date("d")+7,  date("Y")); break; 
        case '2w': $dexp = mktime(0, 0, 0, date("m"),  date("d")+14,  date("Y")); break;
        case '1m': $dexp = mktime(0, 0, 0, date("m")+1,  date("d"),  date("Y")); break;
        case '2m': $dexp = mktime(0, 0, 0, date("m")+2,  date("d"),  date("Y")); break;
        case '1q': $dexp = mktime(0, 0, 0, date("m")+3,  date("d"),  date("Y")); break;
        case '4m': $dexp = mktime(0, 0, 0, date("m")+4,  date("d"),  date("Y")); break;
        case '1h': $dexp = mktime(0, 0, 0, date("m")+6,  date("d"),  date("Y")); break;
        case '1y': $dexp = mktime(0, 0, 0, date("m"),  date("d"),  date("Y")+1); break;
      }
      list(
        $node->arrexpires['year'],
        $node->arrexpires['month'],
        $node->arrexpires['day']) = explode(',',date('Y,n,j',$dexp));
    }
    if (empty($node->currency_txt))
      $node->currency_txt = variable_get("budgets_currency_txt",'Euros');
    if (empty($node->currency_symbol))
      $node->currency_symbol = variable_get("budgets_currency_symbol",'â‚¬');
    if (empty($node->min_contribution))
      $node->min_contribution = variable_get("budgets_minimum",0);
    if (empty($node->max_contribution))
      $node->max_contribution = variable_get("budgets_maximum",50000);
  }

  budgets_items_clean($node->items);
    
//  guifi_log(GUIFILOG_BASIC,'function budgets_validate(3)',$node);
  
  
  // Follow the framework if going to edit other forms
  if (isset($_POST['form_item'])) {
    // If we are adding a new componenet or removing a old one
    // we have to do what the framework would do for us so we don't lose
    // information.
    if( isset($_POST['edit']) ) {
      $node = (object) $_POST['edit'];
    }
    $action = array_keys($_POST['form_item']);

    // if not adding an item and no item selected, set error
    // else, goes to item form
    if (($action[0] != 'add') and (!isset($node->item_checked)))  
      form_set_error('', t('You must select an item to perform this action'));
    else switch ($action[0]) {
        case 'delete': 
          unset($node->items[$node->item_checked]);
          break;
        default:
          budgets_edit_item($node,$action[0]);
          exit(0);
    }
  }
  if( isset($_POST['back_to_form']) ) {
    $node->items = $_POST['edit']['items'];
  }

  // validate budget items
  if (!empty($node->items)) foreach ($node->items as $item_id=>$item) {
    if (empty($item['description']))
      form_set_error('items]['.$item_id.'][quantity', t('Item description is mandatory'));
    $item['quantity'] = str_replace(',','.',$item['quantity']);
    if (!is_numeric($item['quantity'])) 
      form_set_error('items]['.$item_id.'][quantity', t('Quantity must be numeric'));
    $item['cost'] = str_replace(',','.',$item['cost']);
    if (!is_numeric($item['cost'])) 
      form_set_error('items]['.$item_id.'][cost', t('Cost must be numeric'));
  }

//  if (!empty($node->arrexpires)) {
//    if (strtotime($node->txtexpire) != -1) {
//      $node->expires = strtotime($node->txtexpire);
//      if ($node->expires < time())
//        form_set_error('txtexpire',t('Expiration must be in the future'));
//    } else 
//      form_set_error('txtexpire', t('Invalid date, use format YYYY-MM-DD'));
//  } else
//    form_set_error('txtexpire', t('You must specify a date when this budget will expire'));
    
}

function budgets_insert($node) {
    if (empty($node->payment_instructions))
      $node->payment_instructions = budgets_variable("budget_payment");
    if (empty($node->terms))
      $node->terms = budgets_variable("budget_terms");
    $node->expires = strtotime($node->txtexpire);

  db_query("INSERT INTO {budgets} ( nid, budget_status, promoter, expires, terms, payment_instructions, guifi_zones, currency_symbol, currency_txt, min_contribution, max_contribution) VALUES (%d, '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', %d, %d)", $node->nid, $node->budget_status, $node->promoter, $node->expires, $node->terms, $node->payment_instructions, implode(',',$node->zones), $node->currency_symbol, $node->currency_txt, $node->min_contribution, $node->max_contribution);
  budgets_insert_items($node->nid,$node->items);
}

function budgets_update($node) {
    $node->expires = strtotime($node->txtexpire);
  db_query("UPDATE {budgets} SET budget_status = '%s', promoter ='%s', expires = '%s', terms = '%s', payment_instructions = '%s', guifi_zones = '%s', currency_symbol = '%s', currency_txt = '%s', min_contribution = %d, max_contribution = %d WHERE nid = '%d'", $node->budget_status, $node->promoter, $node->expires, $node->terms, $node->payment_instructions, implode(',',$node->zones), $node->currency_symbol, $node->currency_txt, $node->min_contribution, $node->max_contribution, $node->nid);
  budgets_insert_items($node->nid,$node->items);
}

/**
* Implementation of hook_delete().
*/
function budgets_delete(&$node) {
  db_query("DELETE FROM {budgets} WHERE nid = '%s'", $node->nid);
  db_query("DELETE FROM {budget_items} WHERE nid = '%s'", $node->nid);
  db_query("DELETE FROM {budget_funds} WHERE nid = '%s'", $node->nid);
}

function budgets_insert_items($nid, $items) {
  if (!empty($items)) {
    db_query("DELETE FROM {budget_items} WHERE nid = %d",$nid);
    foreach ($items as $item_id => $item)
    db_query("INSERT INTO {budget_items} (nid, item_id, description, comments, quantity, cost, weight) VALUES (%d, %d, '%s', '%s', %.10f, %.10f, %d)",
    $nid, $item_id, $item['description'],$item['comments'],$item['quantity'],$item['cost'],$item['weight']);
  }
}

/**
* Implementation of hook_page().
*/
function budgets_page($zone = NULL) {
  $result = pager_query("SELECT n.nid,b.guifi_zones FROM {node} n, {budgets} b WHERE n.nid=b.nid ORDER BY FIND_IN_SET(budget_status,'Open,Preparation,Closed'), n.changed DESC", variable_get('default_nodes_main', 10));
  if ($result > 0) {

    $output = '';
    while ($node = db_fetch_object($result)) {
      if ($zone == null) 
      $output .= node_view(node_load($node->nid), 1);
      else {
        $zones = explode(",",$node->guifi_zones);
        if (in_array($zone,$zones))
          $output .= node_view(node_load($node->nid), 1);
      }
    }
    $output .= theme('pager', NULL, variable_get('default_nodes_main', 10));
  }
  else {
    $output = t("Welcome to budget module. This module will allow your community to maintain budgets, allocate due costs for them, ansd accept donations");
  }
  print theme('page', $output);
}

/**
* Implementation of hook_view().
*/
function budgets_view($node, $teaser = FALSE, $page = FALSE) {
  node_prepare($node, $teaser);
  switch (arg(3)) {
    case 'page':
    case 'items':
    case 'funds':
    case 'contribute':
      $op = arg(3);
      break;
    default:
      if (!isset($_POST['form_item']))
        $op = "default";
      else
        return;
      break;
  } 
  switch ($op) {
    case 'page': case 'default':
     
      $show_bar = budgets_bar($node->total,$node->covered,$node->currency_symbol);

      if ($teaser) {
        $node->content['data'] = array(
          '#value' => $show_bar,
          '#weight' => 1,
        );
        return $node;
      }
      if ($block)
        return $node;
      if ($page) {

        $node->content['body'] = array(
          array(
            '#value' => $teaser ? $node->teaser : $node->body,
            '#weight' => 0,
          ),
          array(
            '#value' => $show_bar,
             '#weight' => 1,
          ),
          array(
            '#value' => theme('box', t('budget information')),
            '#weight' => 2,
          ),
          array(
            '#value' => budgets_print_data($node),
            '#weight' => 3,
          )
        );
      }
    return $node;
      break;
    case 'items':
      return budgets_print_items($node);
    break;
    case 'funds':
      return budgets_print_funds($node);
    break;
    case 'contribute':
      return budgets_contribute($node);
      break;
  }
}

function budgets_print_data($node) {

  if (!empty($node->zones)) {
    $output = '<div class="breadcumb"><font size=3>';
    $output .= t('Zones').': ';
    foreach ($node->zones as $zid)
    if ($zid > 0) {
      $result = db_fetch_array(db_query('SELECT z.id, z.title FROM {guifi_zone} z WHERE z.id = %d ',$zid));
      $output .= guifi_zone_l('budgets/'.$result['id'], $result['title'], $link);
      $output .= '&nbsp;&raquo;&nbsp;';
    }
    $output .= '</div>';
  }
  $output .= '<h2>'.t('Status').'</h2>'.t($node->budget_status);
  if ($node->budget_status == 'Open') {
    $output .= '&nbsp;'.t('until').'&nbsp;'.format_date($node->expires);
  }
  $output .= '<h2>'.t('Promoter(s)').'</h2>';
  $output .= $node->promoter;
  $output .= budgets_print_items($node);
  $output .= '<h2>'.t('Payment Instructions').'</h2>';
  $output .= '<small>';
  $output .= $node->payment_instructions;
  $output .= "</small>\n";
  $output .= '<h2>'.t('Terms & Conditions').'</h2>';
  $output .= '<small>';
  $output .= $node->terms;
  $output .= "</small>\n";

  return $output;

}

function budgets_bar($total,$subtotal,$currency = 'â‚¬') {
  if ($subtotal > 0)
    $pct_green = round( (100*$subtotal) / $total  );
  else
    $pct_green = 0;
  if ($pct_green > 100)
    $pct_green = 100;
  
  $output .= "\n\r".'<div class="budgets_bar"><div class="bar">';
  $output .= "\n\r".'<div class="foreground" style="width: '.$pct_green.'%;">';
  //  $output .= $pct_green.'% ('.number_format($subtotal,1,',','.').' '.t('of').' '.number_format($total,1,",",'.').$currency.')';
  //  $output .= '</div></div></div>';
  $output .= '</div></div>';
  $output .= "\n\r".'<div class="total">'.$pct_green.'% ('.number_format($subtotal,1,',','.').' '.t('of').' '.number_format($total,1,",",'.').$currency.')</div></div>';
  
  return $output;
}

function budgets_print_items($node) {

  $output = '<h2>'.t('Budget details').'</h2>';
  $total = 0;
  if (!empty($node->items)) foreach ($node->items as $item_id => $item) {
    $subtotal = $item['quantity'] * $item['cost'];
    $total = $total + $subtotal;
    $rows[] = array(
    $item['description'],
    $item['comments'],
    array('data'=>number_format($item['quantity'],2,',','.'),'align'=>'right'),
    array('data'=>number_format($item['cost'],2,'.',',').$node->currency_symbol,'align'=>'right'),
    array('data'=>number_format($subtotal,2,',','.').$node->currency_symbol,'align'=>'right'));
  }
  $rows[] = array(
                 '<strong>Total</strong',
  null,null,null,
  array('data'=>'<strong>'.number_format($total,2,',','.').$node->currency_symbol.'</strong>','align'=>'right')
  );
  $header = array(t('Description'),t('Comments'),
  array('data'=>t('Units'),'align'=>'right'),
  array('data'=>t('Cost per unit'),'align'=>'right'),
  array('data'=>t('Subtotal'),'align'=>'right'));

  return $output.theme('table', $header, $rows);
}

function budgets_print_funds($node) {

  drupal_set_title(t('Contribuitions to').': '.$node->title);
  if (isset($_POST['edit'])) {
    $op = $_POST['op'];
    $edit = $_POST['edit'];
    switch ($op) {
      case t('Delete selected'):
         if (!isset($edit ['fund_checked'])) 
          form_set_error(null,t('A fund must be selected for its deletion'));
         else {
           if ($edit['confirm']) {
            db_query("DELETE FROM {budget_funds} WHERE nid = %d AND fund_id = %d",$node->nid,$edit['fund_checked']);
            drupal_set_message(t('Fund deleted'));
            drupal_goto('node/'.$node->nid.'/view/funds');
           } else {
           $form['fund_checked'] = array(
                '#type' => 'hidden',
                '#value' => $edit['fund_checked'],
                 );
             $f = db_fetch_object(db_query("SELECT contributor_name, amount FROM {budget_funds} WHERE nid = %d AND fund_id = %d",$node->nid, $edit['fund_checked']));
             $output .= drupal_render($form['fund_checked']);
             $output .= theme('confirm',   t('This action cannot be undone.'),  'node/'.$node->nid.'/view/funds/', t('Are you sure that you want to delete the fund from %name of %amount?',array('%name'=>$f->contributor_name,'%amount'=>$f->amount)), t('Delete selected'));
           }
         }
         break;
      case t('Submit'):

        foreach ($edit['fund_status'] as $fund_id=>$new_status) {

          if ($node->funds[$fund_id - 1]['fund_status'] != $new_status) {

            db_query("UPDATE {budget_funds} SET fund_status = '%s' WHERE nid = %d AND fund_id =%d",$new_status,$node->nid,$fund_id);
          }
        }
        drupal_set_message($output.' '.t('Changes saved'));
        drupal_goto('node/'.$node->nid.'/view/funds');
        break;
    }
  }

  $output .= '<h2>'.t('Fundings').'</h2>';
  
  $total = 0; 

  // Going to report the funds
  $rows = array();

  if (empty($node->funds)) {
    $rows[] = array(t('There is no contributions to this project yet'),
                    array('data'=>0,'align'=>'right'));
  } else
    foreach ($node->funds as $fund_id => $fund) {
      if ($fund['fund_status'] != 'Declined')
        $total = $total + $fund['amount'];
      if (budgets_access('update',$node)) {

        $rows[] = array(
                   format_date($fund['timestamp_created']),
                   $fund['contributor_name'],
                   number_format($fund['amount'],2,',','.').$node->currency_symbol,
                   //form_select('','fund_status]['.$fund['fund_id'],$fund['fund_status'],array('Submitted'=>t('Submitted'),'Accepted'=>t('Accepted'),'Declined'=>t('Declined'),'Paid'=>t('Paid'))),
                     $fund['fund_status'],
                   //form_radio('','fund_checked',$fund['fund_id'])
                    );
     }  else{ 
        $rows[] = array(
                   format_date($fund['timestamp_created']),
                   $fund['contributor_name'],
                   number_format($fund['amount'],2,',','.').$node->currency_symbol,
                   array('data'=>$fund['fund_status'],'align'=>'right'),
                   $fund['comments']);
  }}
  $rows[] = array(
                 '<strong>Total</strong',null,
                 array('data'=>'<strong>'.number_format($total,2,',','.').$node->currency_symbol.'</strong>','align'=>'right'),
                 null,null);
  $header = array(t('Date'),t('Name'),t('Amount'),t('Status'));
  if (budgets_access('update',$node)) {
    $header = array_merge($header);
    $output .= theme('table', $header, $rows);

    return $output;
  } else
  return $output;
}

function budgets_validate_fund(&$fund) {
  if (($fund['amount'] < $fund['min_contribution']) or (empty($fund['amount'])) )
  form_set_error('amount',t('Minimum donation is').'&nbsp;'.$fund['min_contribution']);
  if (($fund['amount'] > $fund['max_contribution']) or (empty($fund['amount'])) )
    form_set_error('amount',t('Maximum donation is').'&nbsp;'.$fund['max_contribution']);
  $fund['amount'] = str_replace(',','.',$fund['amount']);
  $fund['amount'] = str_replace('â‚¬',null,$fund['amount']);
  $fund['amount'] = str_replace('$',null,$fund['amount']);
  $fund['amount'] = str_replace('EUR',null,$fund['amount']);
  $fund['amount'] = str_replace('euros',null,$fund['amount']);
  $fund['amount'] = str_replace('USD',null,$fund['amount']);
  $fund['amount'] = str_replace('dollars',null,$fund['amount']);
  if (!is_numeric($fund['amount']))
  form_set_error('amount',t('Amount must be numeric'));
  if ( (empty($fund['contributor_telf'])) and (empty($fund['contributor_email'])) )
  form_set_error('contributor_email',t('You must provide at least telf. or email for payment verification purposes'));
  if (empty($fund['contributor_name']))
  form_set_error('contributor_name',t('Name is mandatory'));
  if (($fund['agree']) != 1)
  form_set_error('agree',t('You must accept the Terms & Conditions'));
  if (!empty($fund['contributor_email'])) {
    if (!valid_email_address($fund['contributor_email']))
    form_set_error('contributor_email',t('You must use a valid email address'));
  }
}


function budgets_ahah_select_budget($string){
  $matches = array();
  
  $string = strtoupper(arg(3));
  
  $qry = db_query(
    'SELECT ' .
    '  CONCAT(b.id, "-", z.title, ", ",n.title) str '.
    'FROM {budgets} b, {guifi_zone} z, {node} n ' .
    'WHERE b.zone_id = z.id ' .
    '  AND b.id=n.nid ' .
    '  AND (CONCAT(b.id, "-", upper(z.title), ", ",upper(n.title)) ' .
    '    LIKE "%'.$string.'%") ' .
    'ORDER BY b.id DESC'
  );
  $c = 0;
  $na = t('None');
  $matches[$na] = $na;
  while (($value = db_fetch_array($qry)) and ($c < 50)) {
    $c++;
    $matches[$value['str']] = $value['str'];
  }
  print drupal_to_js($matches);
  exit();
}



/**
* Implementation of hook_cron().
*/
function budgets_cron() {
}


?>
