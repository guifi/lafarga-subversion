<?php
// $Id: subscriptions.module,v 1.30 2005/03/25 07:57:47 tdobes Exp $

/**
 * Implementation of hook_help().
 */
function subscriptions_help($section) {
  switch ($section) {
    case 'admin/help#subscriptions':
      // appears on the admin module help page
      return t('
        <p>This module enables users to subscribe to be notified of changes to threads or categories.
        Once enabled, all nodes will have an additional link that allows the user to change their subscriptions.
        Additionally, all users will be given an account option to auto-subscribe to any thread to which they post.
        No configuration is required for this module, although roles must be given permission to
        use it.</p>

        <p>Note that because this module causes the comment insert to pause while all
        subscribers are notified, it may not be practical for large sites.</p>');
    case 'admin/modules#description':
      // appears on the admin module selection page
      return t('Allows users to subscribe to nodes and taxonomy terms.');
  }
}

/**
 * Implementation of hook_perm().
 */
function subscriptions_perm() {
  return array('maintain subscriptions');
}

// this section will be commented out until the mailqueue module is completed
/*
function subscriptions_settings() {
  $mailevent = "This variable sets the event that will initiate the sending of update notification.  ";
  $mailevent .= "By default, subscription noticies are sent out as soon as a subscribed ";
  $mailevent .= "node recieved a comment.  This may be inefficient for some large sites.";
  $mailevent .= "Alternativly, if you have the mailqueue module installed, you can send the messages ";
  $mailevent .= "to that module for handling.";
  if ( module_exist( 'mailqueue' ) ) {
    $output = form_radios( t( "Mailer Event" ), "subscriptions_event", variable_get( "subscriptions_event", "insert" ), array( "insert" => t( "On Comment Insert/Update" ), "queue" => t( "Send to mail queue" ) ) , t( $mailevent ) );
  }
  else {
    $output = "Subscription notifications will be sent upon insert/update.  This should be ";
    $output .= "sufficient for most installations, but you can install the mailqueue module to send on a batched schedule.";
    $output = t( $output );
  }
  return $output;
}
*/

/**
 * Implementation of hook_user().
 */
function subscriptions_user($type, $edit, &$user, $category = NULL) {
  switch ($type) {
    case 'form':
      if (user_access('maintain subscriptions') && $category == 'account') {
        return array(array('title' => t('Subscription settings'), 'data' => form_checkbox(t('Automatically subscribe to threads in which you post.'), 'subscriptions_auto', 1, isset($edit->subscriptions_auto) ? $edit->subscriptions_auto : $user->subscriptions_auto, t('Checking this box allows you to be automatically subscribe to any thread you create or post a comment to.'))));
      }
  }
}

/**
 * Implementation of hook_settings().
 */
function subscriptions_settings() {
  $vocabularies = taxonomy_get_vocabularies();
  $select[0] = '<'. t('none') .'>';
  foreach ($vocabularies as $vocabulary) {
    $select[$vocabulary->vid] = $vocabulary->name;
  }
  $output = form_select(t('Omitted vocabularies'), 'subscriptions_omitted_taxa', variable_get('subscriptions_omitted_taxa', array()), $select, t('Select vocabularies which should be <strong>omitted</strong> from subscription listings.'), '', 1);
  return $output;
}

/**
 * Returns all subscriptions, and displayed metadata, for a given user.
 * (uses caching)
 */
function subscriptions_get_user($account = NULL) {
  global $user;
  static $subscriptions;

  if (is_null($account)) {
    $account = $user;
  }
  if (is_null($subscriptions[$account->uid])) {
    // query string for node subscriptions
    $queryn = 'SELECT td.tid, td.name, n.nid, n.title, s.stype, s.sid FROM ';
    $queryn .= '(({subscriptions} s LEFT JOIN {node} n ON n.nid = s.sid) ';
    $queryn .= 'LEFT JOIN {term_node} tn ON tn.nid = s.sid) ';
    $queryn .= 'LEFT JOIN {term_data} td ON td.tid = tn.tid ';
    $queryn .= 'WHERE n.status = 1 AND s.uid = %d AND s.stype = \'node\'';
    // query string for blog subscriptions (by blog owner)
    $queryb = 'SELECT u.uid, u.name, s.stype, s.sid FROM ';
    $queryb .= '({subscriptions} s LEFT JOIN {users} u ON u.uid = s.sid) ';
    $queryb .= 'WHERE u.status = 1 AND s.uid = %d AND s.stype = \'blog\'';
    // query string for category subscriptions
    $queryt .= 'SELECT td.tid, td.name FROM ';
    $queryt .= '{subscriptions} s INNER JOIN {term_data} td ON td.tid = s.sid ';
    $queryt .= 'WHERE s.uid = %d AND s.stype = \'taxa\'';
    $resultn = db_query($queryn, $account->uid);
    $resultb = db_query($queryb, $account->uid);
    $resultt = db_query($queryt, $account->uid);

    $subscriptions[$account->uid]['node'] = $subscriptions[$account->uid]['taxa'] = $subscriptions[$account->uid]['blog'] = array();
    while ($nsub = db_fetch_object($resultn)) {
      $subscriptions[$account->uid]['node'][$nsub->nid] = $nsub;
    }
    while ($bsub = db_fetch_object($resultb)) {
      $subscriptions[$account->uid]['blog'][$bsub->uid] = $bsub;
    }
    while ($tsub = db_fetch_object($resultn)) {
      $subscriptions[$account->uid]['taxa'][$tsub->tid] = $tsub;
    }
  }
  return $subscriptions[$account->uid];
}

/*
 * Returns a summary of all subscriptions
 */
function subscriptions_get_summary() {
  static $subssumm;

  // query string for node subscriptions
  $queryn = 'SELECT n.nid, n.title, s.sid, COUNT(*) as ncount FROM ';
  $queryn .= '{subscriptions} s INNER JOIN {node} n ON n.nid = s.sid ';
  $queryn .= 'WHERE s.stype = \'node\' ';
  $queryn .= 'GROUP BY s.sid ';
  $queryn .= 'ORDER BY s.sid ';
  // query string for blog subscriptions (by blog owner)
  $queryb = 'SELECT u.uid, u.name, s.sid, COUNT(*) as ncount FROM ';
  $queryb .= '{subscriptions} s INNER JOIN {users} u ON u.uid = s.sid ';
  $queryb .= 'WHERE s.stype = \'blog\' ';
  $queryb .= 'GROUP BY s.sid ';
  $queryb .= 'ORDER BY s.sid ';
  // query string for category subscriptions
  $queryt .= 'SELECT s.sid, td.name, COUNT(*) as ncount FROM ';
  $queryt .= '{subscriptions} s RIGHT JOIN {term_data} td ON td.tid = s.sid ';
  $queryt .= 'WHERE s.stype = \'taxa\' ';
  $queryt .= 'GROUP BY s.sid ';
  $queryt .= 'ORDER BY s.sid ';

  $resultn = db_query($queryn);
  $resultb = db_query($queryb);
  $resultt = db_query($queryt);

  $subssumm['node'] = $subssumm['taxa'] = $subssumm['blog'] = array();
  while ($nsub = db_fetch_object($resultn)) {
    $subssumm['node'][$nsub->nid] = $nsub;
  }
  while ($bsub = db_fetch_object($resultb)) {
    $subssumm['blog'][$bsub->uid] = $bsub;
  }
  while ($tsub = db_fetch_object($resultn)) {
    $subssumm['taxa'][$tsub->tid] = $tsub;
  }
  return $subssumm;
}

/*
 * Formats the mail and sends it.
 */
function subscriptions_sendmail($name, $to, $subject, $body, $headers) {
  $mail_success = user_mail($to, $subject, $body, $headers);
  if ($mail_success) {
    watchdog('regular', t('subscription notification for ') .'"'. $name .'" &lt;'. $to .'&gt;');
  }
  else {
    watchdog('error', t('error mailing subscription notification: ') .'"'. $name .'"  &lt;'. $to .'&gt;');
  }
}

/*
 * Get e-mail vars
 */
function subscriptions_mailvars($sid, $ssid, $uid, $stype, $strsent) {
  global $base_url;
  global $locale;
  $initial_locale = $locale;
  if (function_exists('locale')) {
    $languages = locale_supported_languages();
    $languages = $languages['name'];
  }

  $from = variable_get('site_mail', ini_get('sendmail_from'));
  // if comment insertion, get vars
  if ($stype == 'node') {
    $result = db_query('SELECT title FROM {node} WHERE nid = %d', $sid);
    $subj = db_result($result);
    $result = db_query('SELECT u.uid, u.name, u.mail, u.language FROM {users} u INNER JOIN {subscriptions} s ON u.uid = s.uid WHERE s.sid = %d AND s.stype = \'node\'', $sid);
    $strtype = 'thread';
    $nid = $sid;
    $cid = "comment-$ssid";
  }
  // if node insert, test if node has a taxonomy else skip
  if ($stype == 'taxa' && !is_null($sid)) {
    $result = db_query('SELECT name FROM {term_data} WHERE tid = %d', $sid);
    $subj = db_result($result);
    $result = db_query('SELECT u.mail, u.name, u.uid, u.language FROM {users} u INNER JOIN {subscriptions} s ON u.uid = s.uid WHERE s.sid = %d AND stype = \'taxa\'', $sid);
    $strtype = 'category';
    $nid = $ssid;
    $cid = NULL;
  }
  // if blog insert, get vars
  if ($stype == 'blog') {
    $result = db_query('SELECT name FROM {users} WHERE uid = %d', $uid);
    $subj = t('new blog for ') . db_result($result);
    $result = db_query('SELECT u.uid, u.name, u.mail, u.language FROM {users} u INNER JOIN {subscriptions} s ON u.uid = s.uid WHERE s.sid = %d AND s.stype = \'blog\'', $sid);
    $strtype = 'blog';
    $nid = $ssid;
    $cid = NULL;
  } 
  // loop through subscribers and call mail function
  while ($subscriptions = db_fetch_object($result)) {
    if ($subscriptions->uid != $uid && !is_null($sid) && strpos($strsent , '!'. $subscriptions->uid .'!') === false) {
      // add this user to "previously notified" string
      $strsent .= $subscriptions->uid .'!';

      // translate the message using the reciever's language
      if (function_exists('locale') && $languages[$subscriptions->language]) {
        $locale = $subscriptions->language;
      }

      $headers = "From: $from\nReply-to: $from\nX-Mailer: Drupal\nReturn-path: $from\nErrors-to: $from";
      $subject = t('[%site] %type subscription update for %name : %subject', array('%site' => variable_get('site_name', 'drupal'), '%type' => $strtype, '%name' => $subscriptions->name, '%subject' => $subj));
      $body = t('Greetings, %name.

A %type to which you have subscribed has been updated.  To view the thread,
navigate to %url

--
This is an automatic mail from %site.
To manage your subscriptions, browse to %manage-url', array('%name' => $subscriptions->name, '%type' => $strtype, '%url' => url('node/'. $nid, NULL, $cid, 1), '%site' => variable_get('site_name', 'drupal'), '%manage-url' => url('subscriptions', NULL, NULL, 1)));

      // revert to original locale
      $locale = $initial_locale;

      if (variable_get('subscriptions_event', 'insert') == 'queue' && module_exist('mailqueue')) {
        mailqueue_insert($uid, $subject, null, $body, 1);
      }
      else {
        subscriptions_sendmail($subscriptions->name, $subscriptions->mail, $subject, $body, $headers);
      }
    }
  }
  return $strsent;
}

/*
 * Subscribes users to nodes in which they post, if not already subscribed
 */
function subscriptions_autosubscribe($uid, $nid) {
  global $user;
  // if user has auto subscribe enabled
  if ($user->subscriptions_auto) {
    // check to see if already subscribed
    $result = db_query('SELECT sid FROM {subscriptions} WHERE sid = %d AND stype = \'node\' AND uid = %d', $nid, $uid);
    if (!db_num_rows($result)) {
      // if not, subscribe
      subscriptions_add($nid, $user->uid, 'node');
    }
  }
}

/**
 * Implementation of hook_comment().
 */
function subscriptions_comment($op, $comment) {
  global $user;
  $strsent = '!';
  // TODO: it appears the comment status is not provided by this hook... we'll have to look into that later
  if (/* $comment['status'] == 0 && */ ($op == 'insert' || $op == 'update')) {
    $nid = $comment['nid'];
    $cid = $comment['cid'];
    subscriptions_mailvars($nid, $cid, $user->uid, 'node', $strsent);
    subscriptions_autosubscribe($user->uid, $nid);
  }
}

/**
 * Implementation of hook_nodeapi().
 */
function subscriptions_nodeapi(&$node, $op, $arg = 0) {
  global $user;
  $strsent = '!';
  switch ($op) {
    case 'insert':
      if ($node->status) {
        if (!empty($node->taxonomy)) {
          foreach ($node->taxonomy as $tid){
            $strsent = $strsent . subscriptions_mailvars($tid, $node->nid, $user->uid, 'taxa', $strsent);
          }
        }
        $strsent = $strsent . subscriptions_mailvars($node->nid, 0, $user->uid, 'node', $strsent);
        if ($node->type == 'blog') {
          $strsent = $strsent . subscriptions_mailvars($node->uid, $node->nid, $user->uid, 'blog', $strsent);
        }
        subscriptions_autosubscribe($user->uid, $node->nid);
      }
      if (isset($node->subscriptions_subscribe)) {
        if ($node->subscriptions_subscribe) {
          subscriptions_add($node->nid, $user->uid, 'node');
        }
        user_save($user, array('subscriptions_subscribe' => $node->subscriptions_subscribe));
      }
      break;
    case 'form post':
      if (!$user->subscriptions_auto) {
        $allsubs = subscriptions_get_user();
        $val = isset($node->subscriptions_subscribe) ? $node->subscriptions_subscribe : $allsubs['node'][$node->nid] ? 1 : $user->subscriptions_subscribe;
        return form_item(t('Subscribe'), form_checkbox(t('Receive notification of replies to this %name.', array('%name' => node_invoke($node, 'node_name'))), 'subscriptions_subscribe', 1, $val));
      }
      break;
  }
}

/**
 * Implementation of hook_menu().
 */
function subscriptions_menu($may_cache) {
  $items = array();

  if ($may_cache) {
    $items[] = array('path' => 'subscriptions', 'title' => t('my subscriptions'),
      'access' => user_access('maintain subscriptions'),
      'callback' => 'subscriptions_page');
    $items[] = array('path' => 'admin/subscriptions', 'title' => t('subscriptions'),
      'access' => user_access('administer users'),
      'callback' => 'subscriptions_page');
  }
  return $items;
}

/**
 * Implementation of hook_link().
 */
function subscriptions_link($type, $node = 0, $main) {
  if (user_access('maintain subscriptions') && $type == 'node' && $node->comment == 2) {
    $subscriptions = subscriptions_get_user();
    $name = node_invoke($node, 'node_name');
    if ($node->type == 'blog') {
      if (isset($subscriptions['blog'][$node->uid])) {
        $links[] = l(t('unsubscribe blog'), 'subscriptions/del/blog/'. $node->uid, array('title' => t('Stop receiving an e-mail whenever a new entry is made to this person\'s blog.')));
      }
      else {
        $links[] = l(t('subscribe blog'), 'subscriptions/add/blog/'. $node->uid, array('title' => t('Receive an e-mail whenever a new entry is made to this person\'s blog.')));
      }
    }
    if (isset($subscriptions['node'][$node->nid])) {
      $links[] = l(t('unsubscribe post'), 'subscriptions/del/node/'. $node->nid, array('title' => t('Stop receiving an e-mail whenever a new comment is posted to this %n.', array('%n' => $name))));
    }
    else {
      $links[] = l(t('subscribe post'), 'subscriptions/add/node/'. $node->nid, array('title' => t('Receive an e-mail whenever a comment is posted to this %n.', array('%n' => $name))));
    }
  }
  return $links ? $links : array();
}

function subscriptions_get_taxa($uid) {
  $result = db_query('SELECT sid FROM {subscriptions} WHERE uid = %d and stype=\'taxa\'', $uid);
  while ($taxasub = db_fetch_object($result)) {
    $tsubscriptions[] = $taxasub->sid;
  }
  return $tsubscriptions ? $tsubscriptions : array();
}

function subscriptions_get_taxa_count() {
  $result = db_query('SELECT sid, count(*) as tcount FROM {subscriptions} WHERE stype=\'taxa\' GROUP BY sid');
  while ($taxasub = db_fetch_object($result)) {
    $tsubscriptions[$taxasub->sid] = $taxasub->tcount;
  }
  return $tsubscriptions ? $tsubscriptions : array();
}

function subscriptions_gen_taxa_links($tid, $taxa) {
  if (in_array($tid, $taxa)) {
    $link = l(t('unsubscribe'), 'subscriptions/del/taxa/'. $tid, array('title' => t('Unsubscribe from this category.')));
  }
  else {
    $link = l(t('subscribe'), 'subscriptions/add/taxa/'. $tid, array('title' => t('Subscribe to this category.')));
  }
  return $link;
}

function subscriptions_add($sid, $uid, $stype) {
  db_query('INSERT INTO {subscriptions} ( sid , uid, stype )  VALUES (%d , %d, \'%s\')', $sid, $uid, $stype);
}

/*
 * Menu callback:
 * Pages where users add and delete their subscriptions to nodes
 */
function subscriptions_page() {
  global $user;
  $subscribed = false;
  $uid = $user->uid;
  if (!arg(2)) {
    $sid = arg(1);
    $nid = $sid;
    $op = arg(0);
  }
  else {
    $op = arg(1);
    $stype = arg(2);
    $sid = arg(3);
    $nid = arg(4);
    if ($stype == 'node') {
      $nid = $sid;
    }
  }

  switch ($op) {
    // inserts a new subscription into the subscriptions_nodes table
    case 'add':
      subscriptions_add($sid, $uid, $stype);
      $message = t('<p>Your subscription was activated.</p>');
      if (!(arg(2) == 'taxa')) {
        if (arg(2) == 'blog') {
          $message .= l(t('Return to the blog'), 'blog/'. $sid) .' | ';
        }
        else {
          $message .= l(t('Return to the thread'), 'node/'. $nid) .' | ';
        }
      }
      $message .= l(t('Return to the subscriptions'), 'subscriptions') .'<br />';
      drupal_set_title(t('Subscription Activated'));
      print theme('page', $message);
      break;

    // removes a subscription from the subscriptions_nodes table
    case 'del':
      db_query('DELETE FROM {subscriptions} WHERE sid = %d AND uid = %d AND stype = \'%s\'', $sid, $uid, $stype);
      $message = t('<p>Your subscription was deactivated.</p>');
      if (!(arg(2) == 'taxa')) {
        $message .= l(t('Return to the thread'), 'node/'. $nid) .' | ';
      }
      $message .= l(t('Return to the subscriptions'), 'subscriptions') .'<br />';
      drupal_set_title(t('Subscription Deactivated'));
      print theme('page', $message);
      break;

    // Base report for admin functions
    case 'admin':
      // get all subscriptions for all users
      $subscriptions = subscriptions_get_summary();
      // build node rows
      foreach ($subscriptions['node'] as $nsub) {
        $subrowsn[] = array(t('thread'), l($nsub->title, 'node/'. $nsub->nid), $nsub->ncount);
      }
      // build blog rows
      foreach ($subscriptions['blog'] as $bsub) {
        $subrowsb[] = array(t('blog'), l($bsub->name, 'blog/'. $bsub->uid), $bsub->ncount);
      }
      // traverse the taxonomy tree
      $taxa = subscriptions_get_taxa_count();
      // omit undesired vocabularies from listing
      $vocabularies = taxonomy_get_vocabularies();
      $omits = variable_get('subscriptions_omitted_taxa', array());
      foreach ($omits as $omit) {
        unset($vocabularies[$omit]);
      }
      foreach ($vocabularies as $vocab) {
        $tree = taxonomy_get_tree($vocab->vid);
        foreach ($tree as $term) {
          $subrowst[] = array(t('category'), $vocab->name .': '. l($term->name, 'taxonomy/term/'. $term->tid), is_null($taxa[$term->tid]) ? '0' : $taxa[$term->tid]);
        }
      }
      // concatentate the arrays
      $headers = array(t('type'), t('title'), t('subscribers'));
      $subrows = array_merge($subrowsn, $subrowsb, $subrowst);
      // assemble output
      if (!$subrows) {
        $message .= t('<p>No threads or categories are currently subscribed.</p>');
      }
      else {
        $message .= theme('table', $headers, $subrows, array('id' => 'subscriptions'));
      }
      drupal_set_title(t('Subscriptions Summary'));
      print theme('page', $message);
      break;

    // determines the user's subscription status and displays the right option to change it
    default:
      // get all subscriptions and write to table rows
      $subscriptions = subscriptions_get_user();
      // build node rows
      foreach ($subscriptions['node'] as $nsub) {
        $subrowsn[] = array(t('thread'), l($nsub->title, 'node/'. $nsub->nid), '['. l(t('unsubscribe'), 'subscriptions/del/node/'. $nsub->nid, array('title' => t('Unsubscribe from this thread.'))) .']');
      }
      // build blog rows
      foreach ($subscriptions['blog'] as $bsub) {
        $subrowsb[] = array(t('blog'), l($bsub->name, 'blog/'. $bsub->uid), '['. l(t('unsubscribe'), 'subscriptions/del/blog/'. $bsub->uid, array('title' => t('Unsubscribe from this user\'s blog.'))) .']');
      }
      // traverse the taxonomy tree
      $taxa = subscriptions_get_taxa($uid);
      // omit undesired vocabularies from listing
      $vocabularies = taxonomy_get_vocabularies();
      $omits = variable_get('subscriptions_omitted_taxa', array());
      foreach ($omits as $omit) {
        unset($vocabularies[$omit]);
      }
      foreach ($vocabularies as $vocab) {
        $tree = taxonomy_get_tree($vocab->vid);
        foreach ($tree as $term) {
          $subrowst[] = array(t('category'), $vocab->name .': '. l($term->name, 'taxonomy/term/'. $term->tid), '['. subscriptions_gen_taxa_links($term->tid, $taxa) .']');

        }
      }
      // concatentate the arrays
      $headers = array(t('type'), t('title'), t('operations'));
      $subrows = array_merge($subrowsn, $subrowsb, $subrowst);
      if (!$subrows) {
        $message .= t('<p>You are not currently subscribed to any active threads or categories.</p>');
      }
      else {
        $message .= theme('table', $headers, $subrows, array('id' => 'subscriptions'));
      }
      print theme('page', $message);
      break;
  }
}

?>
