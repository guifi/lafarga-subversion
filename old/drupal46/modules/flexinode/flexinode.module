<?php
// $Id: flexinode.module,v 1.46.2.2 2005/05/02 16:37:16 JonBob Exp $

// Copyright 2003-2004 Jonathan Chaffer. See LICENSE for redistribution allowances.

/**
 * Return a list of all installed field types.
 */
function flexinode_field_types() {
  static $types;

  if (!isset($types)) {
    $types = array();
    $path = drupal_get_path('module', 'flexinode');
    $files = file_scan_directory($path, '^field_.*\.inc$');
    foreach ($files as $filename => $file) {
      include_once($filename);
      $types[] = substr($file->name, 6);
    }
  }
  return $types;
}

// Load all installed field types.
flexinode_field_types();

/**
 * Implementation of hook_help().
 */
function flexinode_help($section) {
  switch ($section) {
    case 'admin/modules#description':
      return t('Allows administrators to define their own content types.');
    case 'admin/help#flexinode':
      return t('
<p>Flexinode is a module that allows non-programmers to create new node
types (flexible content types) in Drupal when their needs are modest.
Users can define the fields in the node edit form for their content type,
and can either view the nodes as presented by the module or modify the
presentation in their theme.</p>

<h3>Editing Content Types</h3>

<p>The administration pages for this module are located at:<br />
Administration -> Content Management -> Content Types<br />
Click on "add content type" to make a new one. On this page you can set
the title of your new content type and some related information.</p>

<p>Once you save your new type, you can add new custom fields to it using
the links on the overview page. You can add text fields, dropdown menus,
check boxes, file uploads, and other input elements. The Title and
Description fields are always shown.</p>

<h3>Viewing Content</h3>

<p>Adding flexible content is just like adding other nodes; pick the
appropriate link from the user menu. The node will show up alongside
all normal nodes.</p>

<h3>Theming Content</h3>

<p>Every custom field is set as a property of the node. To create a custom
presentation for your new content type, add logic in your theme\'s node
function to switch on the node type and print out the fields in the
way you choose. The fields are all named flexinode_n where n is the
field ID.</p>
');
    case 'admin/node/types':
      return t('You may define your own content types here. These will be extensions of
the basic "story" node type with additional fields that you specify.
Choose "add content type" in the menu to add a new type. Make a selection
below to edit an existing type or field. To delete a field or entire
content type, first open the editing form for that field or type.');
  }

  $output = '';

  if (strpos($section, 'node/add') === 0) {
    foreach (flexinode_content_types() as $type => $name) {
      if ($section == 'node/add#flexinode-' . $type) {
        $ctype = flexinode_load_content_type($type);
        $output .= t($ctype->description);
      }
      if ($section == 'node/add/flexinode-' . $type) {
        $ctype = flexinode_load_content_type($type);
        $output .= t($ctype->help);
      }
    }
  }

  return $output;
}

/**
 * Implementation of hook_perm().
 */
function flexinode_perm() {
  $perms = array('administer content types');
  foreach (flexinode_content_types() as $ctype) {
    $perms[] = 'create '. $ctype->name .' content';
    $perms[] = 'edit own '. $ctype->name .' content';
  }
  return $perms;
}

/**
 * Implementation of hook_settings().
 */
function flexinode_settings() {
  $output = implode("\n", flexinode_invoke_all('settings'));
  return $output;
}

/**
 * Implementation of hook_link().
 */
function flexinode_link($type, $node = 0, $teaser = FALSE) {
  $links = array();

  if ($type == 'node' && strpos($node->type, 'flexinode-') === 0) {
    /* Don't display a redundant edit link if they are node administrators */
    if (flexinode_access('update', $node) && !user_access('administer nodes')) {
      $links[] = l(t('edit this %nodename', array('%nodename' => flexinode_node_name($node))), 'node/'. $node->nid .'/edit');
    }
  }

  return $links;
}

/**
 * Implementation of hook_menu().
 */
function flexinode_menu($may_cache) {
  $items = array();

  if ($may_cache) {
    foreach (flexinode_content_types() as $ctype) {
      $items[] = array('path' => 'node/add/flexinode-'. $ctype->ctype_id, 'title' => t($ctype->name),
        'access' => user_access('create '. $ctype->name .' content'));
    }

    $items[] = array('path' => 'flexinode/list', 'title' => t('list view'),
      'callback' => 'flexinode_page_list', 'access' => user_access('access content'),
      'type' => MENU_CALLBACK);
    $items[] = array('path' => 'flexinode/table', 'title' => t('tabular view'),
      'callback' => 'flexinode_page_table', 'access' => user_access('access content'),
      'type' => MENU_CALLBACK);
    $items[] = array('path' => 'flexinode/search', 'title' => t('search'),
      'callback' => 'flexinode_page_search_form', 'access' => user_access('access content'),
      'type' => MENU_CALLBACK);
    $items[] = array('path' => 'flexinode/feed', 'title' => t('rss feed'),
      'callback' => 'flexinode_feed', 'access' => user_access('access content'),
      'type' => MENU_CALLBACK);

    $access = user_access('administer content types');
    $items[] = array('path' => 'admin/node/types', 'title' => t('content types'),
      'callback' => 'flexinode_page_admin', 'access' => $access);
    $items[] = array('path' => 'admin/node/types/list', 'title' => t('list'),
      'type' => MENU_DEFAULT_LOCAL_TASK);
    $items[] = array('path' => 'admin/node/types/add_type', 'title' => t('add content type'),
      'callback' => 'flexinode_page_add_type', 'access' => $access,
      'type' => MENU_LOCAL_TASK);
    $items[] = array('path' => 'admin/node/types/edit_type', 'title' => t('edit content type'),
      'callback' => 'flexinode_page_edit_type', 'access' => $access,
      'type' => MENU_CALLBACK);
    $items[] = array('path' => 'admin/node/types/add_field', 'title' => t('add field'),
      'callback' => 'flexinode_page_add_field', 'access' => $access,
      'type' => MENU_CALLBACK);
    $items[] = array('path' => 'admin/node/types/edit_field', 'title' => t('edit field'),
      'callback' => 'flexinode_page_edit_field', 'access' => $access,
      'type' => MENU_CALLBACK);

    $items[] = array('path' => 'flexinode/update', 'title' => t('update'),
      'callback' => 'flexinode_page_admin_update', 'access' => $access,
      'type' => MENU_CALLBACK);
  }

  return $items;
}

/**
 * Menu callback; presents a listing of all nodes of one type.
 */
function flexinode_page_list($ctype_id = 0) {
  if (!$ctype_id) {
    drupal_not_found();
  }

  $output = '';
  $ctype = flexinode_load_content_type($ctype_id);

  if ($ctype_id) {
    $type = 'flexinode-' . db_escape_string($ctype_id);
  }
  else {
    $type = 'flexinode-%';
  }
  $result = pager_query(db_rewrite_sql("SELECT n.nid FROM {node} n WHERE n.status = 1 AND n.type LIKE '%s' ORDER BY n.sticky DESC, n.created DESC"), variable_get('default_nodes_main', 10), 0, NULL, $type);

  while ($node = db_fetch_object($result)) {
    $output .= node_view(node_load(array('nid' => $node->nid)), 1);
  }
  $output .= theme('pager', NULL, variable_get('default_nodes_main', 10));

  drupal_set_title(t($ctype->name));
  print theme('page', $output);
}

/**
 * Menu callback; presents a search form for nodes of one type.
 */
function flexinode_page_search_form($ctype_id = 0) {
  if (!$ctype_id) {
    drupal_not_found();
  }

  if ($_POST['op'] == t('Search')) {
    return flexinode_page_table($ctype_id);
  }

  $output = '';
  $ctype = flexinode_load_content_type($ctype_id);

  $output .= form_textfield(t('search for phrase'), 'search', '', 60, 128);
  foreach ($ctype->fields as $field) {
    $output .= flexinode_invoke('search_form', $field);
  }

  $output .= form_submit(t('Search'));

  drupal_set_title(t('search %type', array('%type' => t($ctype->name))));
  print theme('page', form($output));
}

/**
 * Menu callback; presents a tabular view of nodes of one type.
 */
function flexinode_page_table($ctype_id = 0) {
  if (!$ctype_id) {
    drupal_not_found();
  }

  $output = '';
  $ctype = flexinode_load_content_type($ctype_id);

  // Build the query.
  $fields_to_select = array();
  $table_joins = array();
  $where_clauses = array();

  foreach ($ctype->fields as $field) {
    $fieldname = 'flexinode_'. $field->field_id;

    $fields_to_select[] = flexinode_invoke('db_select', $field);
    $table_joins[] = 'LEFT JOIN {flexinode_data} '. $fieldname .' ON n.nid = '. $fieldname .'.nid';
    $where_clauses[] = $fieldname .'.field_id = '. $field->field_id;
  }

  $type = 'flexinode-' . db_escape_string($ctype_id);
  $extra_fields = count($fields_to_select) > 0 ? ', ' . implode(', ', $fields_to_select) : '';
  $extra_where = count($where_clauses) > 0 ? ' AND ' . implode(' AND ', $where_clauses) : '';
  $sql = 'SELECT n.nid, n.title '. $extra_fields .' FROM {node} n '. implode(' ', $table_joins) ." WHERE n.status = 1 AND n.type = '$type'". $extra_where;

  if ($_POST['op'] == t('Search')) {
    $edit = $_POST['edit'];
    foreach ($ctype->fields as $field) {
      $clause = flexinode_invoke('search_clause', $field, $edit);
      if ($clause) {
        $sql .= ' AND '. $clause;
      }
    }

    $search = db_escape_string($edit['search']);
    if ($search) {
      $sql .= " AND (n.title LIKE '%". $search ."%'";
      foreach ($ctype->fields as $field) {
        $sql .= 'OR flexinode_'. $field->field_id .".textual_data LIKE '%". $search ."%'";
      }
      $sql .= ')';
    }
  }

  // Build the columns.
  $header[] = array('data' => t('title'), 'field' => 'n.title');
  foreach ($ctype->fields as $field) {
    if ($field->show_table) {
      $fieldname = 'flexinode_'. $field->field_id;

      $sort_column = flexinode_invoke('db_sort_column', $field);
      if ($sort_column) {
        $header[] = array('data' => t($field->label), 'field' => $sort_column);
      }
      else {
        $header[] = array('data' => t($field->label));
      }
    }
  }

  $sql .= tablesort_sql($header);

  // Build the rows.
  $rows = array();
  $nodes = pager_query(db_rewrite_sql($sql), 20);
  while ($node = db_fetch_object($nodes)) {
    $row = array(l($node->title, 'node/' . $node->nid));
    foreach ($ctype->fields as $field) {
      if ($field->show_table) {
        $data = flexinode_invoke('format', $field, $node, TRUE);
        $row[] = $data ? $data : '';
      }
    }
    $rows[] = $row;
  }

  $output .= theme('table', $header, $rows);
  $output .= theme('pager', NULL, 20, 0, tablesort_pager());

  drupal_set_title(t('%type search results', array('%type' => t($ctype->name))));
  print theme('page', $output);
}

/**
 * Menu callback; presents a form to add a new content type.
 */
function flexinode_page_add_type() {
  $op = $_POST['op'];
  $edit = $_POST['edit'];
  $output = '';

  switch ($op) {
    case t('Submit'):
      if (flexinode_validate_content_type($edit)) {
        flexinode_save_content_type($edit);
        drupal_goto('admin/node/types');
      }
      else {
        $output .= flexinode_edit_content_type($edit);
      }
      break;
    case t('Delete'):
      if ($edit['confirm']) {
        flexinode_delete_content_type($edit);
        drupal_goto('admin/node/types');
      }
      else {
        $output .= flexinode_confirm_delete_content_type($edit);
      }
      break;
    default:
      $output .= flexinode_edit_content_type();
  }

  print theme('page', $output);
}

/**
 * Menu callback; presents a form to edit an existing content type.
 */
function flexinode_page_edit_type($ctype_id) {
  $op = $_POST['op'];
  $edit = $_POST['edit'];
  $output = '';

  switch ($op) {
    case t('Submit'):
      if (flexinode_validate_content_type($edit)) {
        flexinode_save_content_type($edit);
        drupal_goto('admin/node/types');
      }
      else {
        $output .= flexinode_edit_content_type($edit);
      }
      break;
    case t('Delete'):
      if ($edit['confirm']) {
        flexinode_delete_content_type($edit);
        drupal_goto('admin/node/types');
      }
      else {
        $output .= flexinode_confirm_delete_content_type($edit);
      }
      break;
    default:
      $output .= flexinode_edit_content_type(object2array(flexinode_load_content_type($ctype_id)));
  }

  print theme('page', $output);
}

/**
 * Menu callback; presents a form to add a new field to a content type.
 */
function flexinode_page_add_field($ctype_id, $field_type) {
  $op = $_POST['op'];
  $edit = $_POST['edit'];
  $output = '';

  switch ($op) {
    case t('Submit'):
      if (flexinode_validate_field($edit)) {
        flexinode_save_field($edit);
        drupal_goto('admin/node/types');
      }
      else {
        $output .= flexinode_edit_field($edit);
      }
      break;
    case t('More'):
      flexinode_validate_field($edit);
      $output .= flexinode_edit_field($edit);
      break;
    case t('Delete'):
      if ($edit['confirm']) {
        flexinode_delete_field($edit);
        drupal_goto('admin/node/types');
      }
      else {
        $output .= flexinode_confirm_delete_field($edit);
      }
      break;
    default:
      $output .= flexinode_edit_field(array('ctype_id' => $ctype_id, 'field_type' => $field_type, 'show_teaser' => 1, 'show_table' => 1));
  }

  print theme('page', $output);
}

/**
 * Menu callback; presents a form to edit an existing field in a content type.
 */
function flexinode_page_edit_field($field_id) {
  $op = isset($_POST['op']) ? $_POST['op'] : '';
  $edit = isset($_POST['edit']) ? $_POST['edit'] : array();
  $output = '';

  switch ($op) {
    case t('Submit'):
      if (flexinode_validate_field($edit)) {
        flexinode_save_field($edit);
        drupal_goto('admin/node/types');
      }
      else {
        $output .= flexinode_edit_field($edit);
      }
      break;
    case t('More'):
      flexinode_validate_field($edit);
      $output .= flexinode_edit_field($edit);
      break;
    case t('Delete'):
      if ($edit['confirm']) {
        flexinode_delete_field($edit);
        drupal_goto('admin/node/types');
      }
      else {
        $output .= flexinode_confirm_delete_field($edit);
      }
      break;
    default:
      $output .= flexinode_edit_field(object2array(flexinode_load_field($field_id)));
  }

  print theme('page', $output);
}

/**
 * Menu callback; presents an overview of all admin-defined content types.
 */
function flexinode_page_admin() {
  $header = array(t('name'), t('description'), t('operations'));

  $content_types = flexinode_content_types();

  foreach ($content_types as $ctype) {
    $ctype = flexinode_load_content_type($ctype->ctype_id);
    $rows[] = array(t($ctype->name), $ctype->description, l(t('edit content type'), 'admin/node/types/edit_type/' . $ctype->ctype_id));

    $data = t('Title') . '<br />';
    foreach ($ctype->fields as $field) {
      $data .= t($field->label) . ' (' . l(t('edit field'), 'admin/node/types/edit_field/' . $field->field_id) . ')<br />';
    }

    $url = 'admin/node/types/add_field/'.  $ctype->ctype_id;
    $operations = array();
    foreach (flexinode_field_types() as $field) {
      $operations[] = l(t('add %fieldtype', array('%fieldtype' => flexinode_invoke('name', $field))), $url .'/'. $field);
    }

    $rows[] = array(array('data' => $data, 'colspan' => 2), implode('<br />', $operations));
  }

  print theme('page', theme('table', $header, $rows));
}

/**
 * Implementation of hook_node_types().
 */
function flexinode_node_types() {
  $types = array();
  foreach (flexinode_content_types() as $type => $name) {
    $types[] = 'flexinode-' . $type;
  }
  return $types;
}

/**
 * Implementation of hook_node_name().
 */
function flexinode_node_name($node) {
  $type = is_string($node) ? $node : (is_array($node) ? $node['type'] : $node->type);
  $ctype = flexinode_load_content_type(substr($type, 10));
  return $ctype->name ? t($ctype->name) : t('flexible content');
}

/**
 * Implementation of hook_access().
 */
function flexinode_access($op, $node) {
  global $user;

  if ($op == 'create') {
    return user_access('create '. flexinode_node_name($node) .' content');
  }

  if ($op == 'update') {
    foreach ($node as $fieldname => $field) {
      if (preg_match('!flexinode_[0-9]+_format!', $fieldname) && !filter_access($field)) {
        return FALSE;
      }
    }
  }

  if ($op == 'update' || $op == 'delete') {
    if (user_access('edit own '. flexinode_node_name($node) .' content') && ($user->uid == $node->uid)) {
      return TRUE;
    }
  }
}

/**
 * Implementation of hook_load().
 */
function flexinode_load($node) {
  $ctype = flexinode_load_content_type(substr($node->type, 10));

  // build the query
  $fields_to_select = array();
  $table_joins = array();

  foreach ($ctype->fields as $field) {
    $fieldname = 'flexinode_'. $field->field_id;

    $fields_to_select[] = flexinode_invoke('db_select', $field);
    $table_joins[] = 'LEFT JOIN {flexinode_data} '. $fieldname .' ON n.nid = '. $fieldname .'.nid AND '. $fieldname .'.field_id = ' . $field->field_id;
  }

  if (count($fields_to_select) > 0) {
    // make the query
    $flexinode = db_fetch_object(db_query('SELECT '. implode(', ', $fields_to_select) .' FROM {node} n '. implode(' ', $table_joins) .' WHERE n.nid = %d', $node->nid));

    // unserialize necessary fields
    foreach ($ctype->fields as $field) {
      $fieldname = 'flexinode_'. $field->field_id;
      $field_data = flexinode_invoke('load', $field, $flexinode);
      if ($field_data) {
        $flexinode->$fieldname = $field_data;
      }
    }
  }

  $flexinode->ctype_id = $ctype->ctype_id;

  return $flexinode;
}

/**
 * Implementation of hook_insert().
 */
function flexinode_insert($node) {
  $ctype = flexinode_load_content_type($node->ctype_id);
  foreach ($ctype->fields as $field) {
    flexinode_invoke('insert', $field, $node);
  }
}

/**
 * Implementation of hook_update().
 */
function flexinode_update($node) {
  $ctype = flexinode_load_content_type($node->ctype_id);
  foreach ($ctype->fields as $field) {
    flexinode_invoke('delete', $field, $node, FALSE);
  }
  db_query('DELETE FROM {flexinode_data} WHERE nid = %d', $node->nid);
  foreach ($ctype->fields as $field) {
    flexinode_invoke('insert', $field, $node);
  }
}

/**
 * Implementation of hook_delete().
 */
function flexinode_delete($node) {
  $ctype = flexinode_load_content_type($node->ctype_id);
  foreach ($ctype->fields as $field) {
    flexinode_invoke('delete', $field, $node, TRUE);
  }
  db_query('DELETE FROM {flexinode_data} WHERE nid = %d', $node->nid);
}

/**
 * Implementation of hook_form().
 */
function flexinode_form(&$node, &$param) {
  // Set form parameters so we can accept file uploads.
  $param['options'] = array('enctype' => 'multipart/form-data');

  $output = '';

  if (!isset($node->ctype_id)) {
    $node->ctype_id = substr($node->type, 10);
  }

  $ctype = flexinode_load_content_type($node->ctype_id);

  if (function_exists('taxonomy_node_form')) {
    $output .= implode('', taxonomy_node_form($node->type, $node));
  }

  foreach ($ctype->fields as $field) {
    $output .= flexinode_invoke('form', $field, $node);
  }

  $output .= form_hidden('ctype_id', $node->ctype_id);

  return $output;
}

/**
 * Implementation of hook_validate().
 */
function flexinode_validate(&$node) {
  if (isset($node->ctype_id)) {
    $ctype = flexinode_load_content_type($node->ctype_id);
  
    $error = array();
    foreach ($ctype->fields as $field) {
      $fieldname = 'flexinode_'. $field->field_id;
      $error[$fieldname] = '';
      
      $validation = flexinode_invoke('validate', $field, $node);
      if ($validation) {
        $node->$fieldname = $validation['value'];
        if (isset($validation['error'])) {
          $error[$fieldname] .= $validation['error'];
        }
      }
  
      if ($field->required && !$node->$fieldname) {
        $error[$fieldname] .= t('You must fill in the field "'. $field->label .'".');
      }
      
      if ($error[$fieldname] == '') unset($error[$fieldname]);
    }
  
    // Pre-render the body and teaser fields, so the Drupal search works.
    $node = flexinode_content($node);
   
    foreach ($error as $name => $message) {
      form_set_error($name, $message);
    }
  }
}

/**
 * Implementation of hook_view().
 */
function flexinode_view(&$node, $teaser = FALSE, $page = FALSE) {
  $node = flexinode_content($node);
  $node->readmore = TRUE;
}

/**
 * Implementation of hook_content().
 */
function flexinode_content($node) {
  if (isset($node->ctype_id)) {
    $ctype = flexinode_load_content_type($node->ctype_id);

    $node->body = '<div class="flexinode-body flexinode-'. $node->ctype_id .'">';
    $node->teaser = '<div class="flexinode-body flexinode-'. $node->ctype_id .'">';

    foreach ($ctype->fields as $field) {
      $fieldname = 'flexinode_'. $field->field_id;
      if (isset($node->$fieldname)) {
        $data = flexinode_invoke('format', $field, $node, FALSE);
        if (!empty($data) && $data) {
          $node->body .= theme('flexinode_'. $field->field_type, $field->field_id, $field->label, $node->$fieldname, $data);
          if ($field->show_teaser) {
            $data = node_teaser($data);
            $node->teaser .= theme('flexinode_'. $field->field_type, $field->field_id, $field->label, $node->$fieldname, $data);
          }
        }
      }
    }

    $node->body .= '</div>';
    $node->teaser .= '</div>';

    return $node;
  }
}

/**
 * Implementation of hook_file_download().
 */
function flexinode_file_download($file) {
  if (!$file) return false;
  $result = db_fetch_object(db_query("SELECT f.* FROM {flexinode_data} f WHERE f.textual_data = '%s'", $file));
  if (!$result) return false;
  $filedb = unserialize($result->serialized_data);
  if ($filedb->type) {
    return array('Content-type: '. $filedb->type, 'Content-Disposition: attachment; filename="'. $file .'"');
  }
  if ($path = file_create_path($file)) {
    list($width, $height, $type, $attr) = getimagesize($path);
    $types = array(
      IMAGETYPE_GIF => 'image/gif',
      IMAGETYPE_JPEG => 'image/jpeg',
      IMAGETYPE_PNG => 'image/png',
      IMAGETYPE_SWF => 'application/x-shockwave-flash',
      IMAGETYPE_PSD => 'image/psd',
      IMAGETYPE_BMP => 'image/bmp',
      IMAGETYPE_TIFF_II => 'image/tiff',
      IMAGETYPE_TIFF_MM  => 'image/tiff',
      IMAGETYPE_JPC => 'application/octet-stream',
      IMAGETYPE_JP2 => 'image/jp2',
      IMAGETYPE_JPX => 'application/octet-stream',
      IMAGETYPE_JB2 => 'application/octet-stream',
      IMAGETYPE_SWC => 'application/x-shockwave-flash',
      IMAGETYPE_IFF => 'image/iff',
      IMAGETYPE_WBMP => 'image/vnd.wap.wbmp',
      IMAGETYPE_XBM => 'image/xbm'
    );
    if (isset($types[$type])) {
      return array('Content-type: '. $types[$type], 'Content-Disposition: attachment; filename="'. $file .'"');
    }
    else {
      $type = (function_exists('mime_content_type') ? mime_content_type($path) : 'application/x-download');
      return array('Content-type: '. $type, 'Content-Disposition: attachment; filename="'. $file .'"');
    }
  }
}

/**
 * Implementation of hook_cron().
 */
function flexinode_cron() {
  flexinode_invoke_all('cron');
}

/**
 * Invoke a field hook.
 *
 * Each field type has different behavior, so the differences are separated out
 * into include files which themselves behave much like Drupal modules.
 */
function flexinode_invoke($hook, $field, $a1 = NULL, $a2 = NULL, $a3 = NULL) {
  $type = is_string($field) ? $field : $field->field_type;
  $function = 'flexinode_field_'. $type .'_'. $hook;

  if (function_exists($function)) {
    return ($function($field, $a1, $a2, $a3));
  }
}

/**
 * Invoke a field hook for all field types.
 */
function flexinode_invoke_all($hook, $a1 = NULL, $a2 = NULL, $a3 = NULL) {
  $result = array();
  foreach (flexinode_field_types() as $type) {
    $function = 'flexinode_field_'. $type .'_'. $hook;
    if (function_exists($function)) {
      $result = array_merge($result, $function($a1, $a2, $a3));
    }
  }
  return $result;
}

/**
 * Return a list of content types.
 *
 * The returned array contains basic information about each type, but the heavy
 * lifting of loading all field descriptions, for example, is not yet done.
 */
function flexinode_content_types() {
  static $types;
  if (!isset($types)) {
    $types = array();
    $result = db_query('SELECT * FROM {flexinode_type}');
    while ($type = db_fetch_object($result)) {
      $types[$type->ctype_id] = $type;
    }
  }
  return $types;
}

/**
 * Return a content type object.
 */
function flexinode_load_content_type($ctype_id) {
  static $content_types;

  if (isset($content_types[$ctype_id])) {
    return $content_types[$ctype_id];
  }

  $ctype = db_fetch_object(db_query('SELECT * FROM {flexinode_type} WHERE ctype_id = %d', $ctype_id));

  $ctype->fields = array();
  $result = db_query('SELECT * FROM {flexinode_field} WHERE ctype_id = %d ORDER BY weight ASC, label ASC', $ctype_id);
  while ($field = db_fetch_object($result)) {
    $field->options = unserialize($field->options);
    $ctype->fields[] = $field;
  }

  $content_types[$ctype_id] = $ctype;
  return $ctype;
}

/**
 * Return a field object.
 */
function flexinode_load_field($field_id) {
  $field = db_fetch_object(db_query('SELECT * FROM {flexinode_field} WHERE field_id = %d', $field_id));
  $field->options = unserialize($field->options);
  return $field;
}

/**
 * Perform database updates from older versions.
 *
 * This is a temporary solution until the install system becomes part of
 * the Drupal core.
 */
function flexinode_page_admin_update($update_num = 0) {
  switch ($update_num) {
    case 1:
      db_query("ALTER TABLE {flexinode_field} MODIFY default_value MEDIUMTEXT NOT NULL");
      db_query("ALTER TABLE {flexinode_field} ADD show_teaser INT(1) UNSIGNED DEFAULT '0' NOT NULL");
      db_query("ALTER TABLE {flexinode_field} ADD show_table INT(1) UNSIGNED DEFAULT '0' NOT NULL");

      foreach (flexinode_content_types() as $type) {
        $field_id = flexinode_save_field(array('label' => 'Description', 'default_value' => '', 'rows' => 10, 'required' => 0, 'weight' => 0, 'ctype_id' => $type->ctype_id, 'field_type' => 'textarea', 'options' => NULL, 'description' => ''));
        $result = db_query("SELECT body, nid FROM {node} WHERE type = 'flexinode-%d'", $type->ctype_id);
        while ($node = db_fetch_object($result)) {
          db_query("INSERT INTO {flexinode_data} (nid, field_id, textual_data) VALUES (%d, %d, '%s')", $node->nid, $field_id, $node->body);
        }
      }

      $output = 'Update complete.';
      break;

    default:
      $output = '<p>Which update do you wish to perform?</p>';
      $output .= '<dl>';
      $output .= '<dt>'. l('6/16/04', 'flexinode/update/1') .'</dt>';
      $output .= '<dd>Allows multiline default values for text areas. Allows administrator to configure which fields appear in the teaser and the tabular view. Deprecates special "Description" field in favor of using only basic textarea fields.</dd>';
      $output .= '</dl>';
  }
  print theme('page', $output);
}

/**
 * Render a form for the editing of a content type.
 */
function flexinode_edit_content_type($edit = array()) {
  if ($edit['ctype_id']) {
    $ctype = flexinode_load_content_type($edit['ctype_id']);
  }

  $form .= form_textfield(t('Content type name'), 'name', $edit['name'], 60, 128, '', NULL, TRUE);
  $form .= form_textfield(t('Description'), 'description', $edit['description'], 60, 128, t('A one-line description of the content type.'));
  $form .= form_textarea(t('Help text'), 'help', $edit['help'], 60, 5, t('Instructions to present to the user when adding new content of this type.'));

  $form .= form_submit(t('Submit'));
  if ($edit['ctype_id']) {
    $form .= form_submit(t('Delete'));
    $form .= form_hidden('ctype_id', $edit['ctype_id']);
  }

  return form($form);
}

/**
 * Ensure that all required fields for a content type have been filled.
 */
function flexinode_validate_content_type($edit) {
  $errors = array();
  if (isset($edit['name']) && !$edit['name']) {
    $errors['name'] = t('You must give this content type a name.');
  }
  foreach ($errors as $name => $message) {
    form_set_error($name, $message);
  }
  return count($errors) == 0;
}

/**
 * Save a content type to the database.
 */
function flexinode_save_content_type($edit) {
  if ($edit['ctype_id']) {
    $ctype_id = $edit['ctype_id'];

    $former_ctype = flexinode_load_content_type($ctype_id);

    db_query("UPDATE {flexinode_type} SET name = '%s', description = '%s', help = '%s' WHERE ctype_id = %d", $edit['name'], $edit['description'], $edit['help'], $ctype_id);

    drupal_set_message(t('updated content type "%name".', array('%name' => $edit['name'])));
  }
  else {
    $ctype_id = db_next_id('{flexinode_ctype}');

    db_query("INSERT INTO {flexinode_type} (name, description, help, ctype_id) VALUES ('%s', '%s', '%s', %d)", $edit['name'], $edit['description'], $edit['help'], $ctype_id);

    drupal_set_message(t('created new content type "%name".', array('%name' => $edit['name'])));
  }

  // update the cached "create content" menu
  menu_rebuild();
}

/**
 * Generate a confirmation page for the deletion of a custom content type.
 */
function flexinode_confirm_delete_content_type($edit) {
  $form .= form_hidden('ctype_id', $edit['ctype_id']);
  $form .= form_hidden('name', $edit['name']);
  $form .= form_hidden('confirm', 1);
  $form .= form_submit(t('Delete'));
  $form .= form_submit(t('Cancel'));

  return form(form_item(t('Delete content type "%name"', array('%name' => $edit['name'])), $form, t('Are you sure you want to delete the content type? All nodes created using this content type will be lost.')));
}

/**
 * Delete a custom content type from the database.
 */
function flexinode_delete_content_type($edit) {
  // TODO: Delete files as appropriate.
  db_query('DELETE FROM {flexinode_type} WHERE ctype_id = %d', $edit['ctype_id']);
  db_query('DELETE FROM {flexinode_field} WHERE ctype_id = %d', $edit['ctype_id']);
  $result = db_query("SELECT nid FROM {node} WHERE type = '%s'", 'flexinode-' . $edit['ctype_id']);
  while ($node = db_fetch_object($result)) {
    db_query('DELETE FROM {flexinode_data} WHERE nid = %d', $node->nid);
  }
  db_query("DELETE FROM {node} WHERE type = '%s'", 'flexinode-' . $edit['ctype_id']);

  drupal_set_message(t('deleted content type "%name".', array('%name' => $edit['name'])));

  // update the cached "create content" menu
  menu_rebuild();
}

/**
 * Generate a form for the editing of a content type field.
 */
function flexinode_edit_field($edit) {
  $form = form_textfield(t('Field label'), 'label', $edit['label'], 60, 128, '', NULL, TRUE);

  $form .= form_textfield(t('Description'), 'description', $edit['description'], 60, 128, t('A brief description of the field, to be displayed on the content submission form.'));

  $field->field_type = $edit['field_type'];
  $form .= flexinode_invoke('config', $field, $edit);

  $form .= form_checkbox(t('Required field'), 'required', 1, $edit['required'], t('Whether the user must fill in the field when creating content.'));
  $form .= form_checkbox(t('Show in teaser'), 'show_teaser', 1, $edit['show_teaser'], t('Whether this field should be shown as part of the teaser.'));
  $form .= form_checkbox(t('Show in table'), 'show_table', 1, $edit['show_table'], t('Whether this field should be shown as part of this content type\'s <a href="%table">tabular view</a>.', array('%table' => url('flexinode/table/'. $edit['ctype_id']))));
  $form .= form_weight(t('Weight'), 'weight', $edit['weight'], 10, t('Optional. On the content editing form, the heavier fields will sink and the lighter fields will be positioned nearer the top.'));

  $form .= form_submit(t('Submit'));
  if ($edit['field_id']) {
    $form .= form_submit(t('Delete'));
    $form .= form_hidden('field_id', $edit['field_id']);
  }

  $form .= form_hidden('ctype_id', $edit['ctype_id']);
  $form .= form_hidden('field_type', $edit['field_type']);

  return form($form);
}

/**
 * Ensure that all required information for a custom field has been filled in.
 */
function flexinode_validate_field($edit) {
  $errors = array();
  if (isset($edit['label']) && !$edit['label']) {
    $errors['label'] = t('You must give this field a label.');
  }
  foreach ($errors as $name => $message) {
    form_set_error($name, $message);
  }
  return count($errors) == 0;
}

/**
 * Save a custom field to the database.
 */
function flexinode_save_field($edit) {
  $options = array(0 => 0); // Placeholder for "none" option.
  if (!empty($edit['options'])) {
    foreach ($edit['options'] as $option) {
      if ($option) {
        $options[] = $option;
      }
    }
  }
  unset($options[0]);

  if ($edit['field_id']) {
    $field_id = $edit['field_id'];

    db_query("UPDATE {flexinode_field} SET label = '%s', default_value = '%s', rows = %d, required = %d, show_teaser = %d, show_table = %d, weight = %d, ctype_id = %d, field_type = '%s', options = '%s', description = '%s' WHERE field_id = %d", $edit['label'], $edit['default_value'], $edit['rows'], $edit['required'], $edit['show_teaser'], $edit['show_table'], $edit['weight'], $edit['ctype_id'], $edit['field_type'], serialize($options), $edit['description'], $field_id);

    drupal_set_message(t('updated field "%name".', array('%name' => $edit['label'])));
  }
  else {
    $field_id = db_next_id('{flexinode_field}');

    db_query("INSERT INTO {flexinode_field} (label, default_value, rows, required, show_teaser, show_table, weight, ctype_id, field_type, options, description, field_id) VALUES ('%s', '%s', %d, %d, %d, %d, %d, %d, '%s', '%s', '%s', %d)", $edit['label'], $edit['default_value'], $edit['rows'], $edit['required'], $edit['show_teaser'], $edit['show_table'], $edit['weight'], $edit['ctype_id'], $edit['field_type'], serialize($options), $edit['description'], $field_id);

    drupal_set_message(t('created new field "%name".', array('%name' => $edit['label'])));
  }

  return $field_id;
}

/**
 * Generate a confirmation page prior to deleting a custom field.
 */
function flexinode_confirm_delete_field($edit) {
  $form .= form_hidden('field_id', $edit['field_id']);
  $form .= form_hidden('ctype_id', $edit['ctype_id']);
  $form .= form_hidden('label', $edit['label']);
  $form .= form_hidden('confirm', 1);
  $form .= form_submit(t('Delete'));
  $form .= form_submit(t('Cancel'));

  return form(form_item(t('Delete field "%name"', array('%name' => $edit['label'])), $form, t('Are you sure you want to delete this field? All data in this field will be lost.')));
}

/**
 * Delete a custom field from the database.
 */
function flexinode_delete_field($edit) {
  // TODO: Delete files as appropriate.
  db_query('DELETE FROM {flexinode_field} WHERE field_id = %d', $edit['field_id']);
  db_query('DELETE FROM {flexinode_data} WHERE field_id = %d', $edit['field_id']);

  drupal_set_message(t('deleted field "%name".', array('%name' => $edit['label'])));
}

function flexinode_nodeapi(&$node, $op, $arg) {
  switch ($op) {
    case 'rss item':
      if (isset($node->ctype_id)) {
        $keys = array();
        $ctype = flexinode_load_content_type($node->ctype_id);
        foreach ($ctype->fields as $field) {
          $fieldname = 'flexinode_'. $field->field_id;
          $key = array();
          if (isset($node->$fieldname)) {
            $key = flexinode_invoke('rss', $field, $node);
            if(count($key)) {
              $keys[] = $key;
            }
          }
        }
        return $keys;
      }
      break;
  }
}

function flexinode_feed($ctype_id = NULL) {
  global $base_url;

  if (!$ctype_id) {
    drupal_not_found();
  }

  $ctype = flexinode_load_content_type($ctype_id);

  if ($ctype_id) {
    $type = 'flexinode-' . db_escape_string($ctype_id);
  }
  else {
    $type = 'flexinode-%';
  }

 $nodes = db_query(db_rewrite_sql("SELECT n.nid FROM {node} n WHERE n.status = 1 AND n.type LIKE '%s' ORDER BY n.sticky DESC, n.created DESC"), $type);

  $channel= array(
    'title'       => variable_get('site_name', 'drupal') .' - '. $ctype->name .t(' feed'),
    'link'        => $base_url .'/flexinode/list/'. $ctype_id
  );

  node_feed($nodes, $channel);
}
?>
