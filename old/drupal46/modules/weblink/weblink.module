<?php
// $Id: weblink.module,v 1.67.2.4 2004/11/26 16:04:27 goba Exp $

/********************************************************************
 * General Hooks
 ********************************************************************/

function weblink_help($section = "admin/help#weblink") {
  switch ($section) {
    case "admin/help#weblink":
      return t("<p>The weblinks module is used to create links to other websites or pages.</p>
<p>The weblink monitor tracks or crawls other interesting web sites and displays their latest modification dates. Vistors to the host site learn about relevant sites and can easily see if there is new content. Here is how it works:</p>
<ul>
 <li>The site administrator selects certain weblinks for monitoring from the administration page.</li>
 <li>Drupal's cron function triggers the weblink module to check all the monitored web sites for recent changes or updates. A page is updated when there is a <em>x</em>-byte difference since the last time it was checked, where <em>x</em> is a configuration option.</li>
 <li>The module exports both a page and a block that displays the registered sites ordered by their last modification date.</li>
</ul>");

    case "admin/modules#description":
      return t("A weblinks module with integrated monitoring");
      
    case 'node/add#weblink':
      return t("Weblinks allow you to link to other websites and pages.");
      
      break;
      
    case "weblink/monitor":
      return t('<p>This page lists the monitored links. See the <a href="%weblink">weblinks directory</a> for more external links.</p>', array('%weblink' => url('weblink')));
  }
}

/**
 * Implementation of hook_menu().
 */
function weblink_menu() {
  global $user;

  $items = array();

  $items[] = array('path' => 'weblink', 'title' => t('links'),
    'callback' => 'weblink_page',
    'access' => user_access('access content'),
    'type' => MENU_CALLBACK);
  $items[] = array('path' => 'node/add/weblink', 'title' => t('weblink'),
    'access' => user_access('create weblinks'));
  $items[] = array('path' => 'weblink/blogmark/js', 'title' => t('blogmark'),
    'callback' => 'weblink_blogmark_js',
    'access' => TRUE,
    'type' => MENU_CALLBACK);
  $items[] = array('path' => 'weblink/blogmark', 'title' => t('blogmark'),
    'callback' => 'weblink_blogmark',
    'access' => TRUE,
    'type' => MENU_CALLBACK);

  return $items;
}

function weblink_link($type, $node = 0) {
  $links = array();
  
  if ($type == 'page' && user_access('access content')) {
    $links[] = l(t('weblinks'), 'weblink');
  }

  // Node links for a weblink
  if ($type == "node" && $node->type == "weblink") {
    
    if (module_exist('bookmarks')) {
      $links[] = l(t('add to bookmarks'), "user/bookmarks/add/weblink/$node->nid", array('title' => t('Adds the destination to your bookmarks.')));
    }
    
    switch(variable_get("weblink_link_display", 0)) {
      case 0:
        $linktext = t('visit %link', array("%link" => $node->title));
        break;
      case 1:
        $linktext = t('visit %link', array("%link" => $node->weblink));
        break;
      default:
        $linktext = t('visit');
        break;
    }
    $links[] = l($linktext, "weblink/goto/$node->nid", _weblink_attributes($node)) . (user_access("access statistics") ? " ({$node->click})" : "");
  }

  return $links;
}

function weblink_perm() {
  return array("create weblinks", "access weblink monitor", "publish blogmarks immediately");
}

function weblink_settings() {
  $vocs = array();
  foreach (taxonomy_get_vocabularies("weblink") as $vid => $voc) {
    $vocs[$vid] = $voc->name;
  }
  if (count($vocs)) {
    $group = form_select(t("Navigation vocabulary"), "weblink_nav_vocabulary", variable_get("weblink_nav_vocabulary", ""), $vocs, t("The dedicated weblink vocabulary, which will be used by this module."));
  }
  else {
    $group = form_item(t("Navigation vocabulary"), t("At least one <a href=\"%url\">vocabulary</a> should be able to hold weblink nodes, being the navigation vocabulary for this module.", array("%url" => url("admin/taxonomy"))));
  }
  
  $output = form_group(t('Vocabulary association'), $group);
  
  $group = form_radios(t("Visit link display mode"), "weblink_link_display", variable_get("weblink_link_display", 0), array(t("display as title"), t("display as url"), t("only display the 'visit' text")), t("Users are able to visit weblinks via the node links list. This setting toggles how the visit link is displayed, either containing the node title or the node target URL or just the word 'visit'"));
  
  $group .= form_select(t("Number of links per block"), "weblink_block_count", variable_get("weblink_block_count", 10), drupal_map_assoc(array(5, 10, 15, 20)), t("Number of links showed per block. Every block displayed by the weblink module will adhere to this setting."));
  $group .= form_textfield(t("Links per page"), "weblink_pager_term", variable_get("weblink_pager_term", 0), 3, 5, t('Number of links to show per page. Set to zero to show all links in a category on one page.'));
  
  $output .= form_group(t('Display settings'), $group);
  
  $group = form_radios(t('Default link target'), "weblink_target_default", variable_get("weblink_target_default", 0), array(t("open in same window"), t("open in new window")), t("Open links in a new window or in the same window by default."));
  
  $group .= form_radios(t('User setting for target'), "weblink_target_user", variable_get("weblink_target_user", 0), array(t("deny"), t("allow")), t("Allow users to specify their own preference via the user settings page."));
  
  $output .= form_group(t('Link targets'), $group);
  
  $group = form_radios(t('Weblink monitoring'), "weblink_monitoring", variable_get("weblink_monitoring", 0), array(t("disabled"), t("enabled")), t("Allow users with appropriate rights to add/edit weblink nodes to specify monitoring parameters, and allow the monitoring block to be shown."));
  
  $output .= form_group(t('Weblink monitoring'), $group);
  
  // If we have a vocabulary set, we can set a blogmark term
  if ($vocab = variable_get("weblink_nav_vocabulary", "")) {
    $result = db_query("SELECT tid, name FROM {term_data} WHERE vid = %d ORDER BY weight", $vocab);
    $terms = array(t("disable blogmarks"));
    while ($term = db_fetch_object($result)) {
      $terms[$term->tid] = $term->name; 
    }
    if (count($terms)) {
      $group = form_select(t("Blogmarks term"), "weblink_blogmarks_term", variable_get("weblink_blogmarks_term", ""), $terms, t("The term used to store the blogmarks sent in by users."));
    }
    else {
      $group = t('No terms to select blogmarks term from.');
    }
    $output .= form_group(t('Blogmarks settings'), $group);
  }
  
  return $output;
}

function weblink_user($type, &$edit, &$user) {
  if (variable_get('weblink_target_user', 0)) {
    switch ($type) {
      case "register_form":
        return form_hidden("weblink_new", variable_get('weblink_target_default'));
      case "edit_form":
        return array(t("Weblink settings") => form_select(t("Open new window for weblinks"), "weblink_new", $user->weblink_new, array(t("Disabled"), t("Enabled")), t("Create a new window when you click on a weblink.")));
    }
  }
}

function weblink_page() {
  $id = $tid = arg(2);

  switch (arg(1)) {
    case "view":
      print theme("weblink_page_view", $tid, taxonomy_get_parents($tid), _weblink_get_structure($tid), taxonomy_get_related($tid), _weblink_get_links($tid));
      return;
    case "goto":
      _weblink_page_goto($id);
      return;
    case "goto2":
      _weblink_page_goto($id, "feed");
      return;
    case "monitor":
      if (variable_get('weblink_monitoring', 0)) {
        print theme("weblink_page_monitored", weblink_monitor_list(100));
        return;
      }
      break;
    default:
      print theme("weblink_page_default", _weblink_get_structure());
      return;
  }
}

function weblink_blogmark() {
  
  global $user;
  
  // No term selected to save node to
  if (!($tid = variable_get("weblink_blogmarks_term", ""))) {
    print theme("page", message_access());
    return;
  }
  
  if (!isset($_GET['url'])) {
    if (user_access("create weblinks")) {
      $content = t("<p>Our site features so called blogmarks, which are quicklinks to external webpages with short comments. You and the other website users having sufficient rights can add blogmarks via a small bookmarklet. Put the <a href=\"%bookmarklet\">Blogmark this!</a> link into your browser's bookmarks list, and whenever you see a site which is worthy to add to our blogmarks, just click on that bookmarklet, fill in the short comment, and your blogmark suggestion will get posted to us. Procedd to the <a href=\"%blogmark-page\">blogmark browser</a> if you are interested in what was added recently.</p>", array("%bookmarklet" => "javascript:(function() { var s = document.createElement('script'); s.setAttribute('src', '" . url('weblink/blogmark/js', NULL, NULL, TRUE) . "'); s.setAttribute('type', 'text/javascript'); document.getElementsByTagName('head')[0].appendChild(s); })();", "%blogmark-page" => url("weblink/view/$tid")));
    }
    else {
      $content = t("<p>Our site features so called blogmarks, which are quicklinks to external webpages with short comments. Procedd to the <a href=\"%blogmark-page\">blogmark browser</a> if you are interested in what was added recently.</p>", array("%blogmark-page" => url("weblink/view/$tid")));
    }
    print theme("page", $content);
    return;
  }
  
  // Either we publish the blogmark immediately, or put it on hold
  $status = (int) user_access("publish blogmarks immediately");
  
  // Build up node information and check for errors
  $node = node_validate(array('type'     => 'weblink',
                              'uid'      => $user->uid,
                              'name'     => $user->name,
                              'title'    => $_GET['title'],
                              'body'     => $_GET['comment'],
                              'weblink'  => $_GET['url'],
                              'status'   => $status,
                              'promote'  => variable_get("node_promote_weblink", 0),
                              'comment'  => variable_get("node_comment_weblink", 2),
                              'moderate' => variable_get("node_moderate_weblink", 0),
                              'revision' => variable_get("node_revision_weblink", 0),
                              'taxonomy' => array($tid)
                              ), $error);

  // No error found, we can proceed
  if (count($error) == 0) {

    // Check if current user has the right to add a weblink node
    if (!node_access("create", $node)) {
      print theme("page", t("You don't have the sufficient rights to add a blogmark."), t("Error while adding blogmark"));
      return;
    }
    
    // Save node and note in the watchdog log
    $nid = node_save($node);
    if ($nid) {
      watchdog("special", "{$node->type}: added '{$node->title}' blogmark", l(t("view post"), "node/$nid"));
      print theme("page", t("Thanks for your contribution to our blogmark collection. Now feel free to browse on or close this window."), t("Blogmark added"));
      return;
    }
    //var_dump($node);
    //return;
  }

  // Some error occured
  print theme("page", t("An error occured while adding the blogmark."), t("Error while adding blogmark"));
}

function weblink_blogmark_js() {
  $tprompt = t("Please provide a title for this page");
  $cprompt = t("Your comment about this page");
  $blogmark_url = url('weblink/blogmark', NULL, NULL, TRUE);
  
  print <<< BLOGMARK_JS
// encodeURIComponent() emulation and supplemental code from
// http://www.worldtimzone.com/res/encode/

if (typeof encodeURIComponent != "function") {

  function utf8(wide) {
    var c, s;
    var enc = "";
    var i = 0;
    while (i < wide.length) {
      c= wide.charCodeAt(i++);
      // handle UTF-16 surrogates
      if (c>=0xDC00 && c<0xE000) continue;
      if (c>=0xD800 && c<0xDC00) {
        if (i>=wide.length) continue;
        s= wide.charCodeAt(i++);
        if (s<0xDC00 || c>=0xDE00) continue;
        c= ((c-0xD800)<<10)+(s-0xDC00)+0x10000;
      }
      // output value
      if (c<0x80) enc += String.fromCharCode(c);
      else if (c<0x800) enc += String.fromCharCode(0xC0+(c>>6),0x80+(c&0x3F));
      else if (c<0x10000) enc += String.fromCharCode(0xE0+(c>>12),0x80+(c>>6&0x3F),0x80+(c&0x3F));
      else enc += String.fromCharCode(0xF0+(c>>18),0x80+(c>>12&0x3F),0x80+(c>>6&0x3F),0x80+(c&0x3F));
    }
    return enc;
  }

  function toHex(n) {
    var hexchars = "0123456789ABCDEF";
    return hexchars.charAt(n>>4)+hexchars.charAt(n & 0xF);
  }

  function encodeURIComponent(s) {
    var okURIchars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789_-";
    var s = utf8(s);
    var c;
    var enc = "";
    for (var i= 0; i<s.length; i++) {
      if (okURIchars.indexOf(s.charAt(i)) == -1)
        enc += "%" + toHex(s.charCodeAt(i));
      else
        enc += s.charAt(i);
    }
    return enc;
  }
}

var title = prompt('{$tprompt}', document.title);
if (title) {
  var comment = prompt('{$cprompt}', '');
  if (comment) {
    var url = '{$blogmark_url}?url=' + encodeURIComponent(window.location.href) +
        '&title=' + encodeURIComponent(title) +
        '&comment=' + encodeURIComponent(comment);
    var w = window.open(url);
    w.focus();
  }
}
BLOGMARK_JS;

}

/********************************************************************
 * Filter handling code
 ********************************************************************/

function weblink_filter($op, $delta = 0, $format = -1, $text = "") {
  switch ($op) {
    case 'list':
      return array(0 => t("Weblink filter"));
    case 'description':
      return t("Insert description of weblink filter here.");
    case 'process':
      return _weblink_filter_process($text);
    case 'settings':
      return _weblink_filter_settings();
    default:
      return $text;
  }
}

function _weblink_filter_process($text) {

  if (variable_get("weblink_filter_enabled", 0)) {  

    $match = array();
    if (preg_match_all("/\[weblink:(\d+)\]/i", $text, $match)) {
      for ($i = 0; $i <= count($match[1]); $i++) {
        $node = node_load(array("nid" => $match[1][$i]));
        $text = str_replace($match[0][$i], l($node->title, "weblink/goto/$node->nid", _weblink_attributes($node)), $text);
      }
    }

    $match = array();
    if (preg_match_all("/\[weblink:(\S+?)\]/i", $text, $match)) {
      for ($i = 0; $i <= count($match[1]); $i++) {
//        $result = db_query("SELECT nid FROM {weblink} ". _node_access_join_sql() ." WHERE weblink = '%s' AND ". _node_access_where_sql(), $match[1][$i]);
        $result = db_query("SELECT nid FROM {weblink} WHERE weblink = '%s' ", $match[1][$i]);
        $weblink = db_fetch_object($result);
        $node = node_load(array("nid" => $weblink->nid));
        $text = str_replace($match[0][$i], l($node->title, "weblink/goto/$node->nid", _weblink_attributes($node)), $text);
      }
    }
  }
  return $text;
}

function _weblink_filter_settings() {
  return form_group(t("Weblinks"), form_select(t("Weblink filter"), "weblink_filter_enabled", variable_get("weblink_filter_enabled", 0), array(t("Disabled"), t("Enabled")), t("When enabled, weblink codes will be replaced by a link to visit the real website. Syntax: [weblink:node_id] or [weblink:http://a.weblink.example.com/]")));
}

/********************************************************************
 * Node Hooks
 ********************************************************************/

function weblink_node_name($node) {
  return t("weblink");
}

function weblink_access($op, $node) {
  switch($op) {
    case 'create':
      return user_access("create weblinks");
  }
}

function weblink_form(&$node, &$param) {

  $output .= form_textfield(t("Link"), "weblink", $node->weblink, 60, 128, t("Links should be submitted in a form similar to http://www.example.com/") . ($error['weblink'] ? $error["weblink"] : ''));
    
  if (user_access("administer nodes")) {
    
    if (variable_get('weblink_monitoring', 0)) {
      $periods = drupal_map_assoc(array(900, 1800, 3600, 7200, 10800, 21600, 32400, 43200, 64800, 86400, 172800, 259200, 604800, 1209600, 2419200), 'format_interval');
      $thresholds = drupal_map_assoc(array(1, 10, 20, 40, 60, 80, 100, 120, 140, 160, 320, 640), 'format_size');
    
      $form_monitor = form_hidden("monitor", 0);
      $form_monitor .= form_checkbox(t("Monitor URL"), "monitor", 1, $node->monitor, t("Monitor URL for changes."));
      $form_monitor .= form_select(t("Update interval"), "refresh", ($node->refresh ? $node->refresh : 21600), $periods, t("The refresh interval indicating how often you want to check this site for updates. Requires crontab."));
      $form_monitor .= form_select(t("Change threshold"), "threshold", ($node->threshold ? $node->threshold : 40), $thresholds, t("The number of bytes the site must have been modified before considered changed."));
      $form_monitor .= form_textfield(t("URL to monitor"), "feed", $node->feed, 50, 255, t("The URL of the page you want to monitor for updates. Likely to be same as the site's URL but useful to monitor framed pages and more accurate when pointed to a XML/RSS/RDF feed."));
      $output .= form_group(t("URL Monitoring"), $form_monitor);
    }
  
    if (module_exist("mnogo")) {
      $form_mnogo = form_checkbox(t("Spider this site"), "spider_site", 1, $node->spider_site, t("Use external mnogosearch engine to spider this site."));
      $form_mnogo .=form_textfield(t("URL to spider"), "spider_url", $node->spider_url, 50, 255, t("The URL of the page you want to spider. All sub pages will be added to the mnogosearch index."));
      $output .= form_group(t("Mnogosearch indexing"), $form_mnogo);
    } 
  }

  $output .= implode("", taxonomy_node_form("weblink", $node));

  $output .= form_textarea(t("Body"), "body", $node->body, 60, 20, t("Textual description of the weblink") . ($error['body'] ? $error['body'] : ''));
 
  return $output;
}

function weblink_insert($node) {
  db_query("INSERT INTO {weblink} (nid, weblink, monitor, refresh, threshold, feed, spider_site, spider_url) VALUES ('%d', '%s', '%d', '%d', '%d', '%s', '%d', '%s')", $node->nid, $node->weblink, $node->monitor, $node->refresh, $node->threshold, $node->feed, $node->spider_site, $node->spider_url);
  cache_clear_all("weblink:blogmarks:block");
}

function weblink_update($node) {
  db_query("UPDATE {weblink} SET weblink = '%s', monitor = '%d', refresh = '%d', threshold = '%d', feed = '%s', spider_site = '%d', spider_url = '%s' WHERE nid = '%d'", $node->weblink, $node->monitor, $node->refresh, $node->threshold, $node->feed, $node->spider_site, $node->spider_url, $node->nid);
  cache_clear_all("weblink:blogmarks:block");
}

function weblink_delete(&$node) {
  db_query("DELETE FROM {weblink} WHERE nid = '%s'", $node->nid);
  cache_clear_all("weblink:blogmarks:block");
}

function weblink_validate(&$node) {
  $result = db_query("SELECT * from {weblink} WHERE weblink = '%s' and nid <> '%d'", $node->weblink, $node->nid);
  if (db_num_rows($result) > 0) {
    $weblink = db_fetch_object($result);
    $othernode = node_load(array("nid" => $weblink->nid));
    form_set_error('weblink', t('A weblink %link-to-existing using that link already exists', array("%link-to-existing" => l($othernode->title, 'node/' . $othernode->nid . '/edit'))));
  }
}

function weblink_load($node) {
  return db_fetch_object(db_query("SELECT * FROM {weblink} WHERE nid = '%d'", $node->nid));
}

function weblink_filter_tips($delta, $format, $long = false) {
  if ($long) {
    return t("<p>You may create links to items stored in our weblink registry using a special syntax. The weblink codes will be replaced by a links to visit the real websites. Syntax: <code>[weblink:link_id]</code> or <code>[weblink:http://a.weblink.example.com/]</code>.</p>");
  }
  else {
    return t("You may link to webpages <a href=\"%long-tip\">through the weblinks registry</a>", array("%long-tip" => url("filter/tips", NULL, 'weblink')));
  }
}
/********************************************************************
 * Block display functions
 ********************************************************************/

function weblink_block($op = "list", $delta = 0) {
  if ($op == "list") {
    return array(
      0 => array('info' => t("Top weblinks")),
      1 => array('info' => t("Latest weblinks")),
      2 => array('info' => t("Monitored weblinks")),
      3 => array('info' => t("Latest blogmarks"))
    );
  }
  elseif ($op == 'view') {
    $count = variable_get("weblink_block_count",10);
    switch ($delta) {
      case 0:
        return array(
          'subject' => t("Top weblinks"),
          'content' => weblink_block_list('top', $count)
        );
      case 1:
        return array(
          'subject' => t("Latest weblinks"),
          'content' => weblink_block_list('new', $count)
        );
      case 2:
        if (variable_get('weblink_monitoring', 0)) {
          return array(
            'subject' => t("Monitored weblinks"),
            'content' => weblink_monitor_list($count) ."<div style=\"text-align: right;\">". l(t("more"), "weblink/monitor", array("title" => t("Monitor external weblinks."))) ."</div>"
          );
        }
      case 3:
        if (($tid = variable_get("weblink_blogmarks_term", ""))) {
          return array(
            'subject' => t("Latest blogmarks"),
            'content' => weblink_block_blogmarks($tid, $count)
          );
        }
    }
  }
}  

function weblink_block_list($type = 'top', $limit = 10) {
  $orderby = ($type == 'new') ?  'n.created' : 'w.click';

  $result = db_query_range("SELECT n.nid, n.title, n.status, n.moderate, w.weblink, w.click FROM {node} n LEFT JOIN {weblink} w on n.nid = w.nid ". _node_access_join_sql() ." WHERE n.type = 'weblink' AND n.status = 1 AND n.moderate = 0  AND ". _node_access_where_sql() ."ORDER by $orderby DESC", 0, $limit);
  
  $links = array();
  while ($node = db_fetch_object($result)) {
    $links[] = $node;
  }
  return theme("weblink_list", $links);
}

function weblink_block_blogmarks($tid, $limit = 10) {
  
  // Retreive blogmarks cache is a copy is available
  $cache = cache_get("weblink:blogmarks:block");
  if (!empty($cache)) {
    return $cache->data;
  }

  // SQL copied over and modified from taxonomy_select_nodes()
  $result = db_query_range("SELECT DISTINCT(n.nid), n.title, n.body, n.type, n.created, n.changed, n.uid, n.sticky, u.name FROM {node} n ". _node_access_join_sql() ." INNER JOIN {term_node} r ON n.nid = r.nid INNER JOIN {users} u ON n.uid = u.uid WHERE r.tid = '%d' AND n.status = '1' AND ". _node_access_where_sql(). " ORDER BY sticky DESC, created DESC", $tid, 0, $limit);

  $links = array();
  while($node = db_fetch_object($result)) {
    $node->body = htmlspecialchars($node->body);
    $comments = (int) module_invoke('comment', 'num_all', $node->nid);
    $links[] = l($node->title, "weblink/goto/$node->nid", _weblink_attributes($node, 'body')) . " " . l("($comments)", "node/$node->nid", array('title' => format_plural($comments, '1 comment', '%count comments'), 'class' => "comment-count"));
  }
  
  $navlinks = array(l(t('read more'), "weblink/view/$tid"));
  if (user_access("create weblinks")) {
    $navlinks[] = l(t('contribute'), 'weblink/blogmark');
  }
  $navlinks[] = l(t('rss'), 'taxonomy/term/' . $tid .'/all/feed');
  
  $block = theme("item_list", $links) . '<div class="links">'. theme("links", $navlinks) .'</div>';
  
  cache_set("weblink:blogmarks:block", $block, 1);

  return $block;
}

/********************************************************************
 * Weblink monitoring functions
 ********************************************************************/

function weblink_cron() {
  if (variable_get('weblink_monitoring', 0)) {
    $result = db_query("SELECT * FROM {weblink} WHERE monitor = 1 AND (checked = 0 OR checked + refresh < %d) ORDER by change_stamp ASC", time());

    while ($site = db_fetch_object($result)) {
      weblink_monitor($site);
    }
  }
}

function weblink_monitor($site) {

  // Load the associated node record
  $node = node_load(array("nid" => $site->nid));

  /*
  ** Check whether the site is properly configured:
  */

  $url = "";
  if (!ereg("^http://|https://|ftp://", $node->weblink)) {
    watchdog("warning", t("weblink") . ": " . t("invalid or missing URL for '%node'", array("%node" => $node->title)), l(t('edit site'), 'node/' . $node->nid . '/edit'));
  } else {
    $url = $node->weblink;
  }

  if (!ereg("^http://|https://|ftp://", $node->feed) && !$url) {
    watchdog("warning", t("weblink") . ": " . t("invalid or missing URL to monitor for '%node'", array("%node" => $node->title)), l(t('edit site'), 'node/' . $node->nid . '/edit'));
  } else {
    // Overwrite previously set link
    $url = $node->weblink;
  }

  /*
  ** Grab the page and update the database if required:
  */

  $success = true;

  // Use curl if we can - take from neighbour module
  if (function_exists("curl_version")) {
    $ch = curl_init();
    curl_setopt($ch, CURLOPT_HTTP_VERSION, CURL_HTTP_VERSION_1_1);
    curl_setopt($ch, CURLOPT_URL, $url);
    curl_setopt($ch, CURLOPT_HEADER, 1);
    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);
    $data = curl_exec($ch);
    if (!$data) {
      $success = false;
    }
  } else {
    if ($fp = @fopen($node->weblink, "r")) {
      while (!feof($fp)) {
	$data .= fgets($fp, 128);
      }      
      fclose($fp);
    } else {
      $success = false;
    }
  }

  if ($success) {
    if (abs($node->size - strlen($data)) >= $node->threshold) {
      db_query("UPDATE {weblink} SET size = %d, change_stamp = %d, checked = %d WHERE nid = '%d'", strlen($data), time(), time(), $node->nid);
      // module_invoke_all("website_change", $data);
    }
    else {
      db_query("UPDATE {weblink} SET checked = %d WHERE nid = '%d'", time(), $node->nid);
    }
  }
  else {
    watchdog("warning", t("weblink") . ": " . t("failed to syndicate from '%node'", array("%node" => $node->title)) . ($errstr ? ": $errstr" : ""));
  }
}

function weblink_monitor_list($limit = 10) {
  global $user;

  $result = db_query_range("SELECT * FROM {weblink} n ". _node_access_join_sql() ." WHERE change_stamp > ". (time() - 604800) ." AND ". _node_access_where_sql()." ORDER BY change_stamp DESC", 0, $limit);

  $hour = -1;
  $list = -1;
  $inlist = FALSE;
  $output .= "<div class=\"item-list\">";
  while ($weblink = db_fetch_object($result)) {
    $node = node_load(array("nid" => $weblink->nid));
    if ($hour != floor((time() - $node->change_stamp) / 3600)) {
      $hour = floor((time() - $node->change_stamp) / 3600);
      if ($hour < 12) {
        if ($inlist) {
          $output .= "</ul>";
          $inlist = FALSE;
        }
        if ($hour == 0) {
          $output .= t("Updated less than one hour ago") . ":";
        }
        else {
          $output .= format_plural($hour, "Updated an hour ago", "Updated %count hours ago") . ":";
        }
      }
      else if ($list) {
        if ($inlist) {
          $output .= "</ul>";
          $inlist = FALSE;
        }
        $output .= format_plural($hour, "Updated more than an hour ago", "Updated more than %count hours ago") . ":";
        $list = 0;
      }
    }
    if (!$inlist) {
      $output .= "<ul>";
      $inlist = TRUE;
    }
    $output .= "<li>" . l($node->title, "weblink/goto/$node->nid", _weblink_attributes($node)) . "</li>";
  }
  if ($inlist) {
    $output .= "</ul>";
  }
  $output .= "</div>";
  return $output;
}

/********************************************************************
 * Theme subsystem functions
 ********************************************************************/

/**
  @addtogroup themeable
  @{
**/

/**
 Prints the weblink index page

 @param categories
**/
function theme_weblink_page_default($categories) {

  $output = '<div class="weblink-index"><table width="100%" cellspacing="10">';
  foreach ($categories as $term_id => $category) {
    if ($count % 3 == 0) {
      $output .= '<tr>';
    }

    $output .= '<td width="33%" valign="top">';
    $output .= '<div class="weblink-term">'. l($category->name, "weblink/view/$term_id") . _weblink_counts($category) . '</div>';
    if ($category->subterms) {
      foreach ($category->subterms as $subtid => $subterm) {
        $t[] = l($subterm, "weblink/view/$subtid");
        unset($subterm);
      }
      $output .= '<div class="weblink-subterm">' . implode(", ", $t) . '</div>';
      unset($t);
    }
    $output .= '</td>';

    if ($count % 3 == 2) {
      $output .= '</tr>';
    }

    $count++;
  }
  $output .= '</table></div>';

  print theme('page', $output, t('Weblink directory'));
}

/**
 Prints the weblink monitored links page

 @param content
**/
function theme_weblink_page_monitored($content) {
  print theme("page", $content, t("Monitored Weblinks"));
}

/**
 Prints a weblink category page

 @param tid
 @param vid
 @param parents
 @param children
 @param related
 @param links
**/
function theme_weblink_page_view($tid, $parents, $children, $related, $links) {

  $output = '<div class="weblink-page"><div class="weblink-meta">';

  $page_term = taxonomy_get_term($tid);
 
  $vocab = taxonomy_get_vocabulary($page_term->vid);
  
  $title = t("Browsing %term", array("%term" => $page_term->name));

  // Now see if we have any parents
  if (count($parents)) {
    $output .= '<p>' . t('Parent categories') . '</p>';
    $catlist = array();
    foreach ($parents as $parent) {
      list($dontcare, $parent->link_count, $parent->child_count) = _weblink_get_category($parent->tid);
      $catlist[] = l(drupal_specialchars($parent->name), "weblink/view/$parent->tid") . _weblink_counts($parent);
    }
    $output .= theme("item_list", $catlist);
  }

  // Now see if we have any children
  if (count($children)) {
    $output .= '<p>' . t("Subcategories") . '</p>';
    $catlist = array();
    foreach ($children as $child) {
      $catlist[] = l(drupal_specialchars($child->name), "weblink/view/$child->tid") . _weblink_counts($child);
    }
    $output .= theme("item_list", $catlist);
  }

  // Now see if we have any relations
  if (count($related)) {
    $output .= '<p>' . t("Related") . '</p>';
    $catlist = array();
    foreach ($related as $related) {
      list($dontcare, $related->link_count, $related->child_count) = _weblink_get_category($parent->tid);
      $catlist[] = l(drupal_specialchars($related->name), "weblink/view/$related->tid") . _weblink_counts($related);
    }
    $output .= theme("item_list", $catlist);
  }
  
  if (user_access("create weblinks")) {
    $output .= '<p>' . l(t('Submit a weblink'), "node/add/weblink") . '</p>';
  }
  $output .= "</div><dl>";

  foreach ($links as $node) {
    $output .= theme("weblink_node_short" , $node);
  }

  $output .= "</dl>";


  if ($weblink_pager_term = variable_get("weblink_pager_term", 0)) {
    $output .= theme("pager", NULL, $weblink_pager_term);
  }
  $output .= '</div>';
  
  // Breadcrumb navigation
  $breadcrumb = array();
  $breadcrumb[] = l(t('Home'), NULL);
  $breadcrumb[] = l($vocab->name, 'weblink');
  if ($parents = taxonomy_get_parents_all($tid)) {
    $parents = array_reverse($parents);
    array_pop($parents);
    foreach ($parents as $p) {
      $breadcrumb[] = l($p->name, 'weblink/view/'. $p->tid);
    }
  }
  
  print theme("page", $output, $title, $breadcrumb);
}

function _weblink_counts($cat) {
  return ' ('. $cat->link_count . ', ' . $cat->child_count . ')';
}

/**
 Returns a short weblink item display

 @param node
**/
function theme_weblink_node_short($node) {
  global $user;
  $node = node_prepare($node, TRUE);
  $output = '<dt>' . l($node->title, "weblink/goto/$node->nid", _weblink_attributes($node)) . '</dt>';
  $output .= '<dd>' . $node->teaser;
  $links = module_invoke('comment', 'link', 'node', $node, 1);
  if (user_access("access statistics")) {
    $links[] = format_plural($node->click, "1 hit", "%count hits");
  }
  if ($node->readmore) {
    $links[] = l(t('read more'), "node/$node->nid", array('title' => t('Read the rest of this posting.'), 'class' => 'read-more'));  
  }
  if (user_access("administer nodes")) {
    $links[] =  l(t("administer"), 'node/' . $node->nid . '/edit', array("title" => t("Administer this node.")));  
  }
  $output .= '<div class="links">' . theme("links", $links) . '</div></dd>';
  
  return $output;
}

/**
 Returns a list of weblinks

 @param links
**/
function theme_weblink_list($links) {
  if (is_array($links) && (count($links) > 0)) {
    foreach ($links as $node) {
      $items[] = l($node->title, "weblink/goto/$node->nid", _weblink_attributes($node));
    }
    return theme("item_list", $items);
  }
}

/** @} End of addtogroup themeable */

/********************************************************************
 * Internal functions
 ********************************************************************/

function _weblink_attributes($node, $titleattrib = 'weblink') {
  global $user;
  if (!$user->uid || !variable_get('weblink_target_user', 0)) {
    $blank = variable_get('weblink_target_default', 0);
  }
  else {
    $blank = $user->weblink_new;
  }
  return ($blank ? array("title" => $node->$titleattrib, "target" => "_blank") : array("title" => $node->$titleattrib));
}

function _weblink_get_structure($tid = 0) {
  // this structure is a good candidate for caching
  $categories = taxonomy_get_children($tid, variable_get("weblink_nav_vocabulary", ""));
  $tree = taxonomy_get_tree(variable_get("weblink_nav_vocabulary", ""));
  
  foreach (array_keys($categories) as $term_id) {
    list($categories[$term_id]->subterms, $categories[$term_id]->link_count, $categories[$term_id]->child_count) = _weblink_get_category($term_id);
  }
  
  return $categories ? $categories : array();
}

function _weblink_get_category($tid) {
  $children = taxonomy_get_tree(variable_get("weblink_nav_vocabulary", ""), $tid, 1);
  $terms = array($tid => '');
  foreach ($children as $term) {
    $terms[$term->tid] = $term->name;
  }
  $result = db_query("SELECT COUNT(*) AS c FROM {term_node} t, {node} n ". _node_access_join_sql() ." WHERE t.nid = n.nid AND tid IN (". implode(",", array_keys($terms)) .") AND n.type = 'weblink' AND n.status = 1 AND n.moderate = 0 AND ". _node_access_where_sql());
  $term = db_fetch_object($result);
  array_shift($terms);
  return array($terms, $term->c, count(_taxonomy_term_children($tid)));
}

function _weblink_get_links($tid) {
  $SQL = "SELECT n.nid, n.title, n.teaser, n.body, n.status, n.moderate, n.comment, w.weblink, w.click FROM {node} n, {term_node} t, {weblink} w ". _node_access_join_sql() ." WHERE t.nid = n.nid AND n.nid = w.nid AND tid = %d AND n.type='weblink' AND n.status = 1 AND n.moderate = 0 AND ". _node_access_where_sql()." ORDER BY n.title";
  if ($weblink_pager_term = variable_get("weblink_pager_term", 0)) {
    $result = pager_query(sprintf($SQL, $tid), $weblink_pager_term);
  }
  else {
    $result = db_query($SQL, $tid);
  }

  $links = array();
  while ($node = db_fetch_object($result)) {
    $links[] = $node;
  }
  
  return $links;
}

function _weblink_page_goto($id, $type = 'weblink') {
  if (in_array($type, array("weblink", "feed"))) {
//    $result = db_query("SELECT n.nid,%s FROM {weblink} n ". _node_access_join_sql() ." WHERE n.nid = '%d' AND ". _node_access_where_sql(), $type, $id);
    $result = db_query("SELECT n.nid,%s FROM {weblink} n WHERE n.nid = '%d'", $type, $id);
    $wl = db_fetch_object($result);
    if ($wl->$type!='')   {
       db_query("UPDATE {weblink} SET click = click + 1 where nid = '%d'", $id);
       // Didn't this use to work?
       //header("HTTP/1.0 301 Moved Permanently");
    }
    header("Location: " . $wl->$type);
  }
}

?>
