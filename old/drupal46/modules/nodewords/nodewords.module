<?php
/* $Id: nodewords.module,v 1.5.2.4 2005/11/04 17:15:10 robrechtj Exp $ */

/**
 * Implementation of hook_block().
 */
function nodewords_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
      $blocks[0]['info'] = t('Shows the defined meta tags in a block.');
      return $blocks;

    case 'view':
      switch ($delta) {
        case 0:
          $tags = nodewords_get();

          $block['subject'] = t('Meta tags');
          $block['content'] = theme('nodewords_content', $tags);
          break;
      }
      return $block;
  }
}

/**
 *  Implemenation of hook_help().
 */
function nodewords_help($section) {
  switch ($section) {
    case 'admin/modules#name':
      return t('meta tags');

    case 'admin/modules#description':
      return t('Allows users to add meta tags, eg keywords or description.');

    case 'admin/help#nodewords':
      //TODO
      return '';

    case 'admin/settings/nodewords':
      $cvs_id = '<em>$Id: nodewords.module,v 1.5.2.4 2005/11/04 17:15:10 robrechtj Exp $</em>';
      return $cvs_id;
  }
}

/**
 * Implementation of hook_menu().
 */
function nodewords_menu($may_cache) {
  if (!$may_cache) {
    $tags = nodewords_get();
    _nodewords_html_head($tags);
  }
}

/**
 * Implementation of hook_nodeapi().
 */
function nodewords_nodeapi(&$node, $op, $teaser = NULL, $page = NULL) {
  if (!user_access('administer meta tags')) {
    return;
  }

  switch ($op) {
    case 'delete':
      _nodewords_delete('node', $node->nid);
      break;

    case 'insert':
    case 'update':
      _nodewords_set('node', $node->nid, $node->nodewords);
      break;

    case 'update index':
      $output = '<h2>' . $node->nodewords['keywords'] . '</h2>';
      $output .= '<h3>' . $node->nodewords['description'] . '</h3>';
      return $output;

    case 'form post':
      if (!isset($node->nodewords)) {
        $node->nodewords = _nodewords_load('node', $node->nid);
      }
      return _nodewords_form('node', $node->nodewords);
  }
}

/**
 * Implementation of hook_perm().
 */
function nodewords_perm() {
  return array('administer meta tags');
}

/**
 * Implementation of hook_settings()
 */
function nodewords_settings() {
  $settings = _nodewords_get_settings();

  $output = '';

  $form = form_textfield(t('Global copyright'), 'nodewords][global][copyright', $settings['global']['copyright'], 60, $settings['max_size'], t('This copyright text will be used if you do not set it for a specific page.'));
  $output .= form_group(t('Copyright'), $form);

  $form = form_checkbox(t('Use teaser if description is empty.'), 'nodewords][use_teaser', '1', $settings['use_teaser']);
  $output .= form_group(t('Description'), $form);

  $form = form_textfield(t('Global keywords'), 'nodewords][global][keywords', $settings['global']['keywords'], 60, $settings['max_size'], t('These keywords will be appended to all pages HTML meta keywords. Use commas to separate the words.'));
  if (function_exists('taxonomy_get_vocabularies')) {
    $select = array();
    foreach (taxonomy_get_vocabularies() as $vocabulary) {
      $select[$vocabulary->vid] = check_plain($vocabulary->name);
    }
    if (count($select) > 0) {
      $form .= form_select(t('Auto-keywords vocabularies'), 'nodewords][keywords_vids', $settings['keywords_vids'], $select, t('Select the vocabularies which contain terms you want to add to the keywords meta tag for nodes.'), '', TRUE, FALSE);
    }
  }
  $output .= form_group(t('Keywords'), $form);

  $header = array(t('Meta tag'), t('Edit'), t('Head'));
  $rows = array();
  foreach (_nodewords_get_possible_tags() as $name) {
    $row = array();
    $row[] = ucfirst($name);
    foreach (array_map(strtolower, array_slice($header, 1)) as $where) {
      $row[] = form_checkbox('', "nodewords][$where][$name", '1', $settings[$where][$name]);
    }
    $rows[] = $row;
  }
  $form = theme('table', $header, $rows);
  $output .= form_group(t('Output options'), $form, t('Check the meta tags you would like to output on each page. Check the boxes in the "Edit" column if you want the edit boxes for the meta tags to appear on the node edit forms. Check the boxes in the "Head" column if you want to output these meta tags on each page.'));

  $output .= form_textfield(t('Text length'), 'nodewords][max_size', $settings['max_size'], 6, 6, t('The maximum number of characters the content of a meta tag can contain.'));

  return $output;
}

/**
 * Implementation of hook_taxonomy().
 */
function nodewords_taxonomy($op, $type, $object) {
  if ($type == 'term') {
    $id = $object['tid'];
  }
  elseif ($type == 'vocabulary') {
    $id = $object['vid'];
  }
  else {
    return;
  }

  switch ($op) {
    case 'delete':
      _nodewords_delete($type, $id);
      break;

    case 'insert':
    case 'update':
      if (user_access('administer meta tags') && isset($object['nodewords'])) {
        _nodewords_set($type, $id, $object['nodewords']);
      }
      break;

    case 'form post':
      if (user_access('administer meta tags')) {
        $tags = _nodewords_load($type, $id);
        $output = _nodewords_form($type, $tags);
        return $output;
      }
      break;
  }
}

/************************************************************
 * Theming functions.
 ************************************************************/

/**
 * Displays the defined meta tags $tags as content, eg in a
 * block or body.
 *
 * @param $tags
 *   Associative array of defined tags.
 *   No need to 'check_plain' on content.
 * @return
 *   Formatted HTML.
 */
function theme_nodewords_content($tags) {
  $output = "";
  foreach ($tags as $name => $content) {
    if (!empty($content)) {
      $class = "nodewords-$name";
      $output .= '<dt class="'.$class.'">' . $name . '</dt>';
      $output .= '<dd class="'.$class.'">' . $content . '</dd>';
    }
  }
  if (!empty($output)) {
    $output = '<dl class="nodewords">' . $output . '</dl>';
  }
  return $output;
}

/************************************************************
 * User visible functions.
 ************************************************************/

/**
 * Get the defined meta tags for $type / $id.
 *
 * @param $type
 *   Realm of the object the meta tags are associated with.
 *   This is one of the following: 'node', 'page', 'term',
 *   'vocabulary'.
 * @param $ids
 *   Id (or path) of the object to get the meta tags from.
 *   This is one of the following:
 *   - 'node' => array of 'nid' of the node
 *   - 'page' => array of 'path' of the displayed page
 *   - 'term' => array of 'tid' of the term
 *   - 'vocabulary' => array of 'vid' of the vocabulary
 *   If $type or $ids is not set, an attempt will be made to
 *   get it from $_GET['q'].
 * @param $filtered
 *   If TRUE, only the meta tags that the user configured for
 *   output will be returned.
 *   If FALSE, all meta tags will be returned.
 * @return
 *   An associative array of the defined meta tags.
 */
function nodewords_get($type = NULL, $ids = NULL, $filtered = TRUE) {
  /* Autodetect if $type and/or $ids is not set */
  if ($type == NULL || $ids == NULL) {
    $result = _nodewords_detect_type_and_ids();
    $type = $result['type'];
    $ids = $result['ids'];
  }

  if (!is_array($ids)) {
    $ids = array($ids);
  }

  /* Load the values from the database */
  $tags = (count($ids) == 1) ? _nodewords_load($type, $ids[0]) : array();

  /* Pages with more than one node/term/vocabulary/... */
  if ($type == 'term') {
    $terms = array();
    foreach ($ids as $id) {
      $term = taxonomy_get_term($id);
      if ($term) {
        $terms[] = $term->name;
      }
    }
    if (count($terms)) {
      $tags['keywords'] = implode(',', $terms);
    }
  }

  /* Prepare tags for output */
  $tags = _nodewords_prepare($type, $ids, $tags, $filtered);

  return $tags;
}

/************************************************************
 * Database access functions.
 ************************************************************/

/* Update or insert tags in the table */
function _nodewords_set($type, $id, $tags) {
  foreach ($tags as $name => $content) {
    if (empty($content)) {
      _nodewords_delete_tag($type, $id, $name);
    }
    else {
      _nodewords_update_tag($type, $id, $name, $content);
    }
  }
}

/* Delete tags from table */
function _nodewords_delete($type, $id) {
  return db_query("DELETE FROM {nodewords} WHERE type = '%s' AND id = '%s'", $type, $id);
}

/* Load tags from table */
function _nodewords_load($type, $id) {
  $tags = array();
  $result = db_query("SELECT * FROM {nodewords} WHERE type = '%s' AND id = '%s'", $type, $id);
  while ($row = db_fetch_object($result)) {
    $tags[$row->name] = $row->content;
  }
  return $tags;
}

/* Set one tag */
function _nodewords_update_tag($type, $id, $name, $content) {
  $result = db_query("SELECT * FROM {nodewords} WHERE type = '%s' AND id = '%s' AND name = '%s'", $type, $id, $name);
  if (db_num_rows($result) == 0) {
    db_query("INSERT INTO {nodewords} (type, id, name, content) VALUES ('%s', '%s', '%s', '%s')", $type, $id, $name, $content);
  }
  else {
    db_query("UPDATE {nodewords} SET content = '%s' WHERE type = '%s' AND id = '%s' AND name = '%s'", $content, $type, $id, $name);
  }
}

/* Delete one tag */
function _nodewords_delete_tag($type, $id, $name) {
  db_query("DELETE FROM {nodewords} WHERE type = '%s' and id = '%s' AND name = '%s'", $type, $id, $name);
}

/************************************************************
 * Helper functions - forms.
 ************************************************************/

/*
 * Create a form
 */
function _nodewords_form($type, $tags) {
  $settings = _nodewords_get_settings();

  if ($settings['edit']['abstract']) {
    $form .= form_textfield(t('Abstract'), 'nodewords][abstract', $tags['abstract'], 60, $settings['max_size'], t('Enter a short abstract for this node. Typically it is one sentence.'));
  }

  if ($settings['edit']['copyright']) {
    $form .= form_textfield(t('Copyright'), 'nodewords][copyright', $tags['copyright'], 60, $settings['max_size'], t('Enter a short copyright statement for this node.'));
  }

  if ($settings['edit']['description']) {
    $form .= form_textarea(t('Description'), 'nodewords][description', $tags['description'], 60, 6, t('Enter a description for this node. Limit your description to about 20 words, with a maximum of %count characters. It should not contain any HTML tags or other formatting.', array('%count' => $settings['max_size'])) . ($settings['use_teaser'] ? ' '.t('When you leave this field empty, the teaser will be used as description.') : ''));
  }

  if ($settings['edit']['keywords'] && $type != 'term' && $type != 'vocabulary') {
    $form .= form_textfield(t('Keywords'), 'nodewords][keywords', $tags['keywords'], 60, $settings['max_size'], t('Enter a comma seperated list of keywords for this page. Avoid duplication of words as this will lower your search engine ranking.'));
  }

  if ($form) {
    if (function_exists('form_group_collapsible')) {
      $form = form_group_collapsible(t('Meta tags'), $form, TRUE);
    }
    else {
      $form = form_group(t('Meta tags'), $form);
    }
  }

  return $form;
}

/************************************************************
 * Helper functions - settings.
 ************************************************************/

/*
 * Load default and user-defined settings. If $defaults => default settings are returned.
 */
function _nodewords_get_settings($defaults = FALSE) {
  static $settings = NULL;
  static $default_settings = array('use_teaser' => 1,
                                   'max_size' => 255,
                                   'keywords_vids' => array(),
                                   'global' => array('copyright' => '',
                                                     'keywords' => ''),
                                   'head' => array('abstract' => 1,
                                                   'copyright' => 1,
                                                   'description' => 1,
                                                   'keywords' => 1),
                                   'edit' => array('abstract' => 0,
                                                   'copyright' => 0,
                                                   'description' => 1,
                                                   'keywords' => 1));

  if ($defaults) {
    return $default_settings;
  }

  if ($settings == NULL) {
    $settings = variable_get('nodewords', array());

    foreach ($default_settings as $key => $value) {
      if (is_array($value)) {
        $settings[$key] = isset($settings[$key]) ? array_merge($value, $settings[$key]) : $value;
      }
      else if (!isset($settings[$key])) {
        $settings[$key] = $value;
      }
    }
  }

  return $settings;
}

/*
 * Return a list of possible output tags
 */
function _nodewords_get_possible_tags() {
  $defaults = _nodewords_get_settings(FALSE);
  return array_keys($defaults['head']);
}

/*
 * Return a list of viewable output tags
 */
function _nodewords_get_viewable_tags($where = 'head') {
  $settings = _nodewords_get_settings();
  $output = array();
  foreach ($settings[$where] as $name => $viewable) {
    if ($viewable) {
      $output[] = $name;
    }
  }
  return $output;
}

/************************************************************
 * Helper functions - other.
 ************************************************************/

/**
 * Displays the defined meta tags $tags in a HTML header.
 *
 * @param $tags
 *   Associative array of defined tags.
 *   No need to 'check_plain' on content.
 * @return
 *   Nothing.
 *   This function should use something like 'drupal_set_html_head()'
 *   to add the meta tags to the HTML header.
 */
function _nodewords_html_head($tags) {
  $meta = '';
  foreach ($tags as $name => $content) {
    if (!empty($content)) {
      $meta .= "\n" . '<meta name="'.$name.'" content="' . $content . '" />';
    }
  }
  if (!empty($meta)) {
    drupal_set_html_head($meta . "\n");
  }
}

/*
 * Prepare the tags so they are ready for output. This includes:
 * - setting default values if the tag is empty
 * - adding or altering some content (eg add global keywords)
 */
function _nodewords_prepare($type, $ids, $tags, $filtered = TRUE) {
  $settings = _nodewords_get_settings();

  /* Special handling of ABSTRACT */
  if (!isset($tags['abstract']) || empty($tags['abstract'])) {
    if ($type == 'page' && $ids[0] == '') {
      if (theme('get_setting', 'toggle_slogan') == 1) {
        $tags['abstract'] = variable_get('site_slogan', '');
      }
    }
  }

  /* Special handling of COPYRIGHT */
  if ((!isset($tags['copyright']) || $tags['copyright'] == '') && $settings['global']['copyright']) {
    $tags['copyright'] = $settings['global']['copyright'];
  }

  /* Special handling of DESCRIPTION */
  if ((!isset($tags['description']) || empty($tags['description'])) && $settings['use_teaser'] && count($ids) == 1) {
    switch ($type) {
      case 'node':
        $node = node_load(array('nid' => $ids[0]));
        $node = node_prepare($node, TRUE);
        if ($node) {
          $tags['description'] = $node->teaser;
        }
        break;
      case 'term':
        if (count($ids) == 1) {
          $term = taxonomy_get_term($ids[0]);
          if ($term) {
            $tags['description'] = $term->description;
          }
        }
        break;
      case 'vocabulary':
        if (count($ids) == 1) {
          $voc = taxonomy_get_vocabulary($ids[0]);
          if ($voc) {
            $tags['description'] = $voc->description;
          }
        }
        break;
      case 'page':
        if ($ids[0] == '') {
          if (theme('get_setting', 'toggle_mission') == 1) {
            if (function_exists('check_markup')) {
              $tags['description'] = check_markup(variable_get('site_mission', ''));
            }
            elseif (function_exists('check_output')) {
              $tags['description'] = check_output(variable_get('site_mission', ''));
            }
          }
        }
        break;
    }
  }

  /* Special handling of KEYWORDS */
  if ($type == 'node' && function_exists('taxonomy_node_get_terms') && count($ids) == 1) {
    foreach (taxonomy_node_get_terms($ids[0]) as $term) {
      if (in_array($term->vid, $settings['keywords_vids'])) {
        $tags['keywords'] .= ($tags['keywords'] ? ',' : '') . $term->name;
      }
    }
  }
  if ($settings['global']['keywords']) {
    $tags['keywords'] .= ($tags['keywords'] ? ',' : '') . $settings['global']['keywords'];
  }
  if ($tags['keywords']) {
    $tags['keywords'] = _nodewords_uniq($tags['keywords']);
  }

  /* Filter out tags the user has chosen not to see */
  if ($filtered) {
    $tags = _nodewords_filter_viewable($tags);
  }

  /* Check 'content' of each tag */
  $tags = array_map(_nodewords_check_content, $tags);

  return $tags;
}

/*
 * Remove the meta tags from $tags that the user chose not to show.
 */
function _nodewords_filter_viewable($tags, $where = 'head') {
  $output = array();

  if (is_array($tags)) {
    $viewables = _nodewords_get_viewable_tags($where);

    foreach ($viewables as $name) {
      $output[$name] = $tags[$name];
    }
  }
  return $output;
}

/*
 * Remove any content from the $tag that is not allowed in a meta content attribute.
 */
function _nodewords_check_content($text) {
  $settings = _nodewords_get_settings();
  $size = $settings['max_size'];

  $text = strip_tags($text);
  $text = check_plain($text);

  $needles = array('&nbsp;', "\r", "\n");
  $text = str_replace($needles, ' ', $text);
  $text = trim($text);
  $text = preg_replace('/\s+/', ' ', $text);

  if ($size > 0 && strlen($text) > $size) {
    $text = truncate_utf8($text, $size);
    $length = strrpos($text, ' ');
    if (!is_bool($length)) {
      $text = substr($text, 0, $length);
    }
  }
  return $text;
}

/*
 * Uniq a string which is a seperated list to items, preserving the order in which they appeared.
 * Useful for the keywords meta-tag.
 */
function _nodewords_uniq($text, $max_items = 0, $seperator = ',') {
  if (empty($text)) {
    return $text;
  }

  $items = array_map(trim, explode($seperator, $text));
  $uniq_values = array();
  $uniq_lowers = array();

  foreach ($items as $item) {
    $lower = strtolower($item);
    if (!in_array($lower, $uniq_lowers)) {
      $uniq_values[] = $item;
      $uniq_lowers[] = $lower;
    }
  }

  if ($max_items > 0) {
    $uniq_values = array_slice($uniq_values, 0, $max_items);
  }

  return implode($seperator, $uniq_values);
}

/*
 * Try to guess the $type and $ids by looking at $_GET['q'].
 */
function _nodewords_detect_type_and_ids() {
  if (arg(0) == 'node' && is_numeric(arg(1))) {
    return array('type' => 'node', 'ids' => array(arg(1)));
  }
  if (arg(0) == 'taxonomy') {
    if (arg(1) == 'term' || arg(1) == 'vocabulary') {
      $ids = preg_split('![+, ]!', arg(2));
      if (count($ids)) {
        return array('type' => arg(1), 'ids' => $ids);
      }
    }
  }
  if ($_GET['q'] == variable_get('site_frontpage', 'node')) {
    return array('type' => 'page', 'ids' => array(''));
  }
  return array('type' => 'none', 'ids' => array());
}
