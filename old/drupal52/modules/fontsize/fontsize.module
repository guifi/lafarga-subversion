<?php
// $Id: fontsize.module, 5.x-1.3 2007/05/11 21:00:00 hass Exp $

/* 
 * This module work with Drupal 5.x
 * 
 * Author: Alexander Hass
 */

function fontsize_help($section) {
  switch ($section) {
    case 'admin/modules#description':  // Displayed in admin/modules where modules are enabled/disabled
      return t('Display a font resizer on the page for better Web Accessibility.');
  }
}

/*
 * Setup "administer" and "access" permissions. After you activate 
 * "access" permissions the hidden fontsize regions are available for themes.
 */
function fontsize_perm() {
  return array('administer fontsize', 'access fontsize');
}

function fontsize_menu($may_cache) {

  $items = array();
  if ($may_cache) {
    $items[] = array(
      'path' => 'admin/settings/fontsize',
      'title' => t('Font size'),
      'callback' => 'fontsize_admin_settings',
      'access' => user_access('administer fontsize'),
      'type' => MENU_NORMAL_ITEM,
    );
  }
  else {
    // code which should run exactly once per page view
    if (user_access('access fontsize')) {
      // load hidden fontsize regions if module is active
      fontsize_add_html_head();
      fontsize_add_js();
      fontsize_add_regions();
    }
  }

  return $items;
}

// render the settings form
function fontsize_admin_settings() {
  $output .= drupal_get_form('fontsize_admin_settings_form');
  return $output;
}

// build the settings form
function fontsize_admin_settings_form() {

  $prefix = 'fontsize';
  
  $form[$prefix] = array(
    '#type' => 'fieldset',
    '#title' => t('Global settings'),
    '#collapsible' => true,
    '#collapsed' => false,
  );
  $form[$prefix][$prefix.'_min'] = array(
    '#type' => 'textfield',
    '#title' => t('Minimum font size'),
    '#default_value' => variable_get($prefix.'_min', 62),
    '#size' => '5',
    '#field_suffix' => t('%'),
    '#description' => t('Minimum percentage the fontsize can be decreased.'),
    '#required' => true,
  );
  $form[$prefix][$prefix.'_max'] = array(
    '#type' => 'textfield',
    '#title' => t('Maximum font size'),
    '#default_value' => variable_get($prefix.'_max', 142),
    '#size' => '5',
    '#field_suffix' => t('%'),
    '#description' => t('Maximum percentage the fontsize can be increased.'),
    '#required' => true,
  );
  $form[$prefix][$prefix.'_default'] = array(
    '#type' => 'textfield',
    '#title' => t('Default font size'),
    '#default_value' => variable_get($prefix.'_default', 83),
    '#size' => '5',
    '#field_suffix' => t('%'),
    '#description' => t('Recommendation: Round up the CSS value <em>body { font-size: 81.25%; }</em> to the next higher integer (e.g. 83) to circumvent a rounding bug in Opera.'),
    '#required' => true,
  );
  $form[$prefix][$prefix.'_increment'] = array(
  	'#type' => 'textfield',
  	'#title' => t('Increases/decreases step'),
  	'#default_value' => variable_get($prefix.'_increment', 10),
    '#size' => '5',
    '#field_suffix' => t('%'),
    '#description' => t('Percentage by which each click increases/decreases the font size.'),
    '#required' => true,
  );
  
  $fontsizes = array( $prefix.'_bigger' => t('increase'),
                      $prefix.'_reset' => t('reset'),
                      $prefix.'_smaller' => t('decrease'));

  // Build the form for detailed settings
  foreach ($fontsizes as $a => $b) {
  
    $fontsize_properties = variable_get($a, array());
    
    $form[$a] = array(
      '#type' => 'fieldset',
      '#title' => t('Array of properties for @name font size link', array('@name' => $b)),
      '#collapsible' => true,
      '#collapsed' => true,
      '#tree' => true,
    );
    $form[$a]['beforeHTML'] = array(
      '#type' => 'textfield',
      '#title' => t('HTML to go before link'),
      '#default_value' => $fontsize_properties['beforeHTML'],
      '#description' => t('HTML to go before link'),
    );
    $form[$a]['insideHTML'] = array(
      '#type' => 'textfield',
      '#title' => t('HTML to go inside anchor tag'),
      '#default_value' => $fontsize_properties['insideHTML'],
      '#description' => t('HTML to go inside anchor tag'),
    );
    $form[$a]['afterHTML'] = array(
      '#type' => 'textfield',
      '#title' => t('HTML to go after link'),
      '#default_value' => $fontsize_properties['afterHTML'],
      '#description' => t('HTML to go after link'),
    );
    $form[$a]['title'] = array(
      '#type' => 'textfield',
      '#title' => t('Link title text'),
      '#default_value' => $fontsize_properties['title'],
      '#description' => t('Link title text. For translation enter a english title and translate the string with locale module.'),
    );
    $form[$a]['id'] = array(
      '#type' => 'textfield',
      '#title' => t('Name of ID field'),
      '#default_value' => $fontsize_properties['id'],
      '#description' => t('Name of ID field'),
    );
    $form[$a]['name'] = array(
      '#type' => 'textfield',
      '#title' => t('Name of NAME field'),
      '#default_value' => $fontsize_properties['name'],
      '#description' => t('Name of NAME field'),
    );
    $form[$a]['class'] = array(
      '#type' => 'textfield',
      '#title' => t('Name of CLASS field'),
      '#default_value' => $fontsize_properties['class'],
      '#description' => t('Name of CLASS field'),
    );
    $form[$a]['accesskey'] = array(
      '#type' => 'textfield',
      '#title' => t('Accesskey attribute'),
      '#default_value' => $fontsize_properties['accesskey'],
      '#description' => t('Accesskey attribute'),
    );
    $form[$a]['onmouseover'] = array(
      '#type' => 'textfield',
      '#title' => t('OnMouseOver JavaScript'),
      '#default_value' => $fontsize_properties['onmouseover'],
      '#description' => t('OnMouseOver JavaScript'),
    );
    $form[$a]['onmouseout'] = array(
      '#type' => 'textfield',
      '#title' => t('OnMouseOut JavaScript'),
      '#default_value' => $fontsize_properties['onmouseout'],
      '#description' => t('OnMouseOut JavaScript'),
    );
    $form[$a]['onfocus'] = array(
      '#type' => 'textfield',
      '#title' => t('OnFocus JavaScript'),
      '#default_value' => $fontsize_properties['onfocus'],
      '#description' => t('OnFocus JavaScript'),
    );
    
  }
  
  // Cookie settings
  $cookie_properties = variable_get($prefix.'_cookie', array());
  
  $cookie_default = array(
    'name' => $prefix,
    'expires' => 365,
    'path' => '/',
    'domain' => '',
  );
  
  // Merge the variables and their default values
  $cookie_properties = array_merge($cookie_default, $cookie_properties);
  
  $form[$prefix.'_cookie'] = array(
    '#type' => 'fieldset',
    '#title' => t('Cookie settings'),
    '#collapsible' => true,
    '#collapsed' => true,
    '#tree' => true,
  );
  $form[$prefix.'_cookie']['name'] = array(
    '#type' => 'textfield',
    '#title' => t('Cookie name'),
    '#default_value' => $cookie_properties['name'],
    '#size' => '20',
    '#description' => t('The name of the fontsize cookie. Defaults to <em>@name</em>.', array('@name' => $prefix)),
    '#required' => true,
  );
  $form[$prefix.'_cookie']['expires'] = array(
    '#type' => 'textfield',
    '#title' => t('Cookie expires'),
    '#default_value' => $cookie_properties['expires'],
    '#size' => '5',
    '#field_suffix' => t('days'),
    '#description' => t('The cookie lifetime in days. Defaults to <em>365</em> days.'),
    '#required' => true,
  );
  $form[$prefix.'_cookie']['path'] = array(
    '#type' => 'textfield',
    '#title' => t('Cookie path'),
    '#default_value' => $cookie_properties['path'],
    '#description' => t('The path the cookie is saved for. If you change default "/" the cookie cannot be read inside other directories.'),
    '#required' => true,
  );
  $form[$prefix.'_cookie']['domain'] = array(
  	'#type' => 'textfield',
  	'#title' => t('Cookie domain'),
  	'#default_value' => $cookie_properties['domain'],
  	'#description' => t('If you need a domain cookie, enter "<em>.example.com</em>". A blank string defaults to current domain.'),
    '#required' => false,
  );
    
  return system_settings_form($form);
}

function fontsize_admin_settings_form_validate($form_id, $form_values) {
  
  $prefix='fontsize';
  
  // global settings validation
  if ($form_values[$prefix.'_min'] <= 10 || $form_values[$prefix.'_min'] > 100) {
    form_set_error($prefix.'_min', t('Minimum font size setting should between 10-100.'));
  }
  if ($form_values[$prefix.'_max'] <= 10 || $form_values[$prefix.'_max'] > 500) {
    form_set_error($prefix.'_max', t('Maximum font size setting should between 10-500.'));
  }
  if ($form_values[$prefix.'_default'] <= 10 || $form_values[$prefix.'_default'] > 200) {
    form_set_error($prefix.'_default', t('Default font size setting should between 10-200.'));
  }
  if ($form_values[$prefix.'_increment'] <= 0 || $form_values[$prefix.'_increment'] > 50) {
    form_set_error($prefix.'_increment', t('Increment/decreases steps value setting should between 1-50.'));
  }
  
  // cookie validation
  if (!ereg("^[[:alnum:]]*$", $form_values[$prefix.'_cookie']['name'])) {
    form_set_error($prefix.'_cookie][name', t('Only use alphanumeric characters 0-9, A-Z or a-z for cookie name.'));
  }
  if ($form_values[$prefix.'_cookie']['expires'] <= 0 || $form_values[$prefix.'_cookie']['expires'] > 1000) {
    form_set_error($prefix.'_cookie][expires', t('Set the cookie livetime to 1-1000 days.'));
  }
  
}


/**
 * Adds a font size block
 */
function fontsize_block($op = 'list', $delta = 0) {

  // build the JS init and links code 
  $content  = '<div class="fontsize">';
  $content .= '<script type="text/javascript">';
  // OLD $content .= 'if (efa_fontSize) efa_fontSize.efaInit();';
  $content .= 'if (efa_fontSize) { efa_fontSize.efaInit();} else { var efa_fontSize=new Efa_Fontsize(); efa_fontSize.efaInit(); }';
  $content .= 'if (efa_fontSize) document.write(efa_fontSize.allLinks);';
  $content .= '</script>';
  $content .= '<noscript>'.t('Please enable JavaScript').'</noscript>';
  $content .= '</div>';

  $block = array();
  $title = array(t('Font size'));

  switch ($op) {
    case 'list':
      $block[0]['info'] = $title[0];
      break;
    case 'view':
      $block['subject'] = t($title[$delta]);
      $block['content'] = $content;
      break;
  }
  return $block;
}

/**
 * Adds a custom region. This requires some additional code in 
 * template.php as describes in http://drupal.org/node/29139
 * 
 * In a template.php file, set a variable and assign the region content to it:
 * <?php
 * function _phptemplate_variables($hook, $vars = array()) {
 *   // Load region content assigned via drupal_set_content().
 *   if ($hook == 'page') {
 *     foreach (array('fontsize_init','fontsize_links') as $region) {
 *       $vars[$region] = drupal_get_content($region);
 *     }
 *   }
 *   return $vars;
 * }
 * ?>
 * 
 * In your page.tpl.php file, insert the following right after the <body> tag:
 * <?php print $fontsize_init; ?>
 * 
 * In your page.tpl.php file, insert the following where you wish the links 
 * to change the text size to appear:
 * <?php print $fontsize_links; ?>
 * 
 */
function fontsize_add_regions() {

  // Build INIT content
  $content_init  = '<script type="text/javascript">';
  // OLD $content_init .= 'var efa_fontSize=new Efa_Fontsize();';
  $content_init .= 'if (efa_fontSize) { efa_fontSize.efaInit();} else { var efa_fontSize=new Efa_Fontsize(); efa_fontSize.efaInit(); }';
  $content_init .= '</script>';

  // Build LINKS content
  $content_links  = '<div class="fontsize">';
  $content_links .= '<script type="text/javascript">';
  $content_links .= 'if (efa_fontSize) document.write(efa_fontSize.allLinks);';
  $content_links .= '</script>';
  $content_links .= '<noscript>'.t('Please enable JavaScript').'</noscript>';
  $content_links .= '</div>';

  // Set hidden "fontsize" regions
  drupal_set_content('fontsize_init', $content_init);
  drupal_set_content('fontsize_links', $content_links);

}

/**
 * Custom function creates the dynamic JavaScript
 */
function fontsize_add_js() {
  
  $prefix='fontsize';

  $cookie_properties = variable_get($prefix.'_cookie', array());
  $cookie_default = array(
    'name' => $prefix,
    'expires' => 365,
    'path' => '/',
    'domain' => '',
  );
  // Merge the variables and their default values
  $cookie_properties = array_merge($cookie_default, $cookie_properties);

  $settings = array($prefix => array(
    'cookieName' => $cookie_properties['name'],
    'cookieExpires' => $cookie_properties['expires'],
    'cookiePath' => $cookie_properties['path'],
    'cookieDomain' => $cookie_properties['domain'],
    'min' => round(variable_get($prefix.'_min', 62),0),
    'max' => round(variable_get($prefix.'_max', 142),0),
    'def' => round(variable_get($prefix.'_default', 82),0),
    'increment' => round(variable_get($prefix.'_increment', 10),0),
  ));
  
  // create array of fontsize properties
  $fontsizes = array( 
    $prefix.'_bigger' => 'bigger',
    $prefix.'_reset' => 'reset',
    $prefix.'_smaller' => 'smaller'
	);

  foreach ($fontsizes as $a => $b) {
    $fontsize_properties = variable_get($a, NULL);
    $settings[$prefix][$b] = array(
      $fontsize_properties['beforeHTML'],
      $fontsize_properties['insideHTML'],
      t($fontsize_properties['title']),
      $fontsize_properties['class'],
      $fontsize_properties['id'],
      $fontsize_properties['name'],
      $fontsize_properties['accesskey'],
      $fontsize_properties['onmouseover'],
      $fontsize_properties['onmouseout'],
      $fontsize_properties['onfocus'],
      $fontsize_properties['afterHTML']
    );
  }

  drupal_add_js($settings, 'setting');

}

function fontsize_add_html_head() {
  // Add required CSS
  drupal_add_css(drupal_get_path('module', 'fontsize').'/fontsize.css', 'module', 'all');
    
  // Add required JS
  // drupal_add_js(drupal_get_path('module','fontsize').'/js/jquery.cookie.pack.js');
  drupal_add_js(drupal_get_path('module','fontsize').'/js/fontsize.js');
  
}
