<?php

function taxonomy_sort_system($field){
  $system["description"] = t("Enables sort and taxonomy filtering at the main and taxonomy pages listings.");
  return $system[$field];
}


function taxonomy_sort_get_orderby() {
 
  global $edit;

  $edit = isset($_GET["edit"]) ? $_GET["edit"] : $_POST["edit"];

  $orderby[] = NULL;
  switch ($edit["orderby"]) {
    case 1: // last update
      $orderby[0] = "created";
      break;
    case 2: // total views
      $orderby[0] = "totalcount";
      break;
    case 3: // views today
      $orderby[0] = "daycount";
      break;
    default: // newer
      $orderby[0] = "changed";
  }
  if ($edit["orderdir"] == "asc") 
      $orderby[1] = "asc";
  else 
      $orderby[1] = "desc";


//  $path = preg_replace("/.+\/\/[^\/]+(.*)/", "\$1/", $base_url);
//  if ($edit["remember"]) 
//        setcookie("list_format", $edit[format], time() + 3600 * 24 * 365, $path);


  return $orderby;
}

function taxonomy_sort_get_format() {
  global $edit;
  
  return $edit["format"];
}

function taxonomy_sort_get_default_nodes() {
  global $edit;

  switch ($edit["format"]) {
    case 0: // summary
      $default_nodes = variable_get("default_nodes_main", 10);
      break;
    case 1: // title
      $default_nodes = variable_get("default_nodes_main", 10) * 5;
      break;
    case 2: // total views
      $default_nodes = floor(variable_get("default_nodes_main", 10) / 3);
      break;
    default: // summary
      $default_nodes = variable_get("default_nodes_main", 10);
      break;
  }
  return $default_nodes;
}

function taxonomy_sort_get_filters() {
  global $edit;

  $filters = NULL;
  $taxostr = NULL; 
  if (isset($edit["filterby"])) {
    $taxo = array_diff($edit["filterby"], array(0));
    $filters = NULL;
    foreach ($taxo as $taxitem) {
      $family = NULL;
      $term = taxonomy_get_term($taxitem);
      $children = taxonomy_get_tree($term->vid,$taxitem);
      $family[] .= $taxitem;
      foreach ($children as $child) {
        if ($child->tid !== 0) {
          $family[] = $child->tid;
        } // if
      } // foreach children
      $taxostr[] .= implode($family,",");
    } // foreach taxo
  } // if isset edit


  return $taxostr;
}

function taxonomy_sort_has_taxonomy($nid) {

  $filters = taxonomy_sort_get_filters();
  if (count($filters) > 0)
  foreach ($filters as $taxo) {
    $query = sprintf("SELECT * FROM {term_node} WHERE nid = %d and tid in(%s)", $nid, $taxo);
    if (db_num_rows(db_query($query)) == 0 )
       return 0;
  }
  return 1;
}

function taxonomy_sort_list($sql) {
  $result = db_query($sql);
  taxonomy_sort_render_nodes($result);
}

function taxonomy_sort_render_nodes($result) {
  print taxonomy_sort_get_form();
  $start_counter = taxonomy_sort_get_page_from();
  $current_fetch = 0;
  $output .= "";

//  $output.= "Format: " .taxonomy_sort_get_format() ."<hr>";
  if (taxonomy_sort_get_format() == 1) {
    $output .= "<table><th>" .t("Type") ."</th><th>" .t("Title/Categories - Author/Created") ."</th><th>" .t("Last update") ."</th><th><div align=\"right\">" .t("Total Reads") ."</div><th><div align=\"right\">" .t("Recent reads") ."</div></th>";
  }
  while ($node = db_fetch_object($result) and $current_fetch < $start_counter + taxonomy_sort_get_default_nodes()) {
    if (taxonomy_sort_has_taxonomy($node->nid)) {
      $current_fetch = $current_fetch + 1;
      if ($current_fetch > $start_counter)
        $output .= taxonomy_sort_node_view(node_load(array("nid" => $node->nid, "type" => $node->type)));
    } // end if has_taxonomy
  } // end while there are rows
  if (taxonomy_sort_get_format() == 1)
    theme("box",t("Content"),$output ."</table>","main");
  else
    print $output;
  print taxonomy_sort_pager_display($current_fetch, taxonomy_sort_get_default_nodes(), $start_counter);
}

function taxonomy_sort_get_form() {

  global $edit;
  $url = $_GET["q"];

  $tax_sort[] .= "actualització";
  $tax_sort[] .= "creació";
  $tax_sort[] .= "visites totals";
  $tax_sort[] .= "popular ara";
  
  $format_list[] .= "resum";
  $format_list[] .= "títol";
  $format_list[] .= "complert";

  if ($edit[orderdir] == "asc") 
//    $link_dir = "<a href=" .url($url ._taxonomy_sort_get_params("desc")) ."><img src=misc/arrow-desc.gif>" .t("Order by") ."</a>";
    $link_dir = "<a href=" .url($url ._taxonomy_sort_get_params("desc")) ."><img src=misc/arrow-desc.png></a>";
  else
    $link_dir = "<a href=" .url($url ._taxonomy_sort_get_params("asc")) ."><img src=misc/arrow-asc.png></a>";
//    $link_dir = "<a href=" .url($url ._taxonomy_sort_get_params("asc")) ."><img src=misc/arrow-asc.gif>" .t("Order by") ."</a>";
 
  $output = "<form action=\"node\" method=\"post\" onchange=\"submit\" ><label for=\"edit-orderby\">" .$link_dir ."</label><select name=\"edit[orderby]\" Opció id=\"edit-orderby\">";

  $select = '';
  foreach ($tax_sort as $key => $choice) {
    $output .= '<option value="'. $key .'"'. (is_array($value) ? (in_array($key, $value) ? ' selected="selected"' : '') : ($edit["orderby"] == $key ? ' selected="selected"' : '')) .'>'. check_plain($choice) .'</option>';
  }

   $output .= "</select><input type=\"submit\" class=\"form-submit\" name=\"op\" value=\"aplica\"  /></form>";

//  $output = "<table border=\"0\"><tr><td>";
//  $output .= form_select($link_dir, "orderby", $edit["orderby"], $tax_sort, "Hola", "", 0);
//  $output .= "</td><td>" ;
//  $omitted = variable_get("taxonomy_sort_filter_vocab", array());
//  foreach(taxonomy_get_vocabularies()  as $vocabulary) {
    // Supposed to be a private function... arg!!!
//    if (in_array($vocabulary->vid,$omitted) == false) {
//      $output .= _taxonomy_term_select($vocabulary->name, "filterby", $edit["filterby"] , $vocabulary->vid, "", 0, "<". t("tots") .">");
//      $output .= "</td><td>" ;
//    }
//  }
//  $output .= form_select("Llistat", "format", $edit["format"], $format_list, "", "", 0);

//  $output .= "</td><td>" ;

//  $output .= "<div class=\"form-item\"><div class=\"title\">&nbsp;</div>" ;
//  $output .= form_submit("aplica");
//  $output .= "</div></td><td><div class=\"form-item\"><div class=\"title\">";
//  $output .= t("Recorda'm:");
//  $output .= "</div>";
//  $output .= form_checkbox(NULL, "remember") ."</div>";
//  $output .= "</div></td></tr></table>" ;
  return form($output, "post", url($url));
}

function taxonomy_sort_node_view($node) {
  global $edit;

  $node = array2object($node);

  switch ($edit["format"])  {
    case 0: // summary
	node_view($node,1);
        break;
    case 1: // title
      $output = "<tr clas=\"dark\"><td>" .t($node->type) ."</td><td colspan=\"4\"><table width=100%><tr><td><div style=\"font-size: 1.3em\"><b><a href=node/view/" .$node->nid .">". $node->title ."</a></b></div></td><td><small><div align=\"right\">" .implode(taxonomy_link("taxonomy terms", $node)," &middot; ") ."</div></small></td></tr></table></td></tr>";
      $output .="<tr style=\"border: 1px solid #abc;\" clas=\"light\"><td>&nbsp</td><td style=\"border-bottom: 1px solid #abc;\"><small>". t("by:") ." " .format_name($node) ." "  .t("on:") ." " .format_date($node->created,"large") ."</small></td><td style=\"border-bottom: 1px solid #abc;\">";
      if ($node->changed != "")
      $output .= format_date($node->changed,"large") ."</td><td style=\"border-bottom: 1px solid #abc;\" align=\"right\">";
      if (module_exist("statistics")) {
        $statistics = statistics_get($node->nid);
        if ($statistics)
          $output .= $statistics["totalcount"] ."</td><td style=\"border-bottom: 1px solid #abc;\" align=\"right\">" .$statistics["daycount"];
        } 
//        $output .= "</td></tr><tr><td>&nbsp</td></tr>";
        $output .= "</td></tr>";
        break;
    case 2: // full
	node_view($node,0);
        break;
    default:
        node_view($node,1);
  }
  return $output;
}


function taxonomy_sort_get_page_from()
{
  if ($from = $_GET["from"])
	return $from;
  else
       return 0;
}

function _taxonomy_sort_get_params($orderdir = "") {
   global $edit;

   $params = "";
   if (($edit[orderby] != "") or ($orderdir != ""))
      $params .= "&amp;edit[orderby]=" .$edit[orderby] ."&amp;edit[orderdir]=" .$orderdir;
   $taxid = 0;
   if ($edit[filterby] != "")
   foreach ($edit[filterby] as $taxitem) {
     $params .= "&amp;edit[filterby][" .$taxid ."]=" .$taxitem;         
     $taxid += 1;
   }
   if ($edit[format] != "")
     $params .= "&amp;edit[format]=" .$edit[format];         

   
   return $params;
}

function taxonomy_sort_pager_display($curr, $nodes = 10, $start = 0) {

   global $edit;

   $params = _taxonomy_sort_get_params($edit[orderdir]);

   $output = "";
//   print $curr ." " .$nodes ." " .$start ." - ";

   if ($nodes < $curr) {
      if ($start - $nodes > 0)
        $output .= "<div><a href=" .$_GET["q"] ."?from=0" .$params .">" .t("first page") ."</a></div>";
      if ($output != "")
	$output .= " ... ";
      if ($nodes <= $start)
        $output .= "<div><a href=" .$_GET["q"] ."?from=" .($start - $nodes) .$params .">" .t("previous page") ."</a></div>";
   }
   if (($curr >= $nodes) and ($curr % $nodes == 0) and ($curr != $start)) {
      if ($output != "")
	$output .= " · ";
      $output .= "<div><a href=" .$_GET["q"] ."?from=" .$curr .$params .">" .t("next page") ."</a></div>";
   } else
   if (($curr == $start) or ($curr % $nodes != 0)) {
      if ($output != "")
	$output .= " · ";
      $output .= "<div>" .t("end of content to display") ."</div>";
   }

   $output = "<div id=\"pager\" class=\"container-inline\">" .$output ."</div>";

   return $output;
}

function taxonomy_sort_page() {
  global $theme;
  global $edit;

  $keys = isset($_GET["keys"]) ? $_GET["keys"] : $_POST["keys"];
  $edit = isset($_GET["edit"]) ? $_GET["edit"] : $_POST["edit"];
  $theme->header();

  $howto_search = t("<br><h2>Instruccions del cercador</h2>El cercador et permet buscar paraules en els continguts del lloc web. Pots especificar múltiples paraules separades per espais, es faran servir totes en la recerca, la pàgina més coincident i que les contingui serà retornada. També pots usar comodins, així 'camina*' coincidirà amb 'camina', 'caminant', 'caminador' ... Les cerques no són sensibles a majúscules.<br>Pots restringir la recerca a la categoria que escullis. Si n'esculls més d'una, es retornen els documents que compleixin les dues.<h2>Paraules excloses de la recerca</h2>S'exclouen les paraules que són molt freqüents ('sorolloses'). Per exemple: desde,a,i,pmf,cef,per,de,la,com,jo,de,el,amb,... Les paraules més curtes de 2 lletres també s'exclouen.");

  $categories_present = 0;
  
  if (($keys == NULL) and ($edit == NULL)) 
    $output .= $howto_search;
  else if ($edit != NULL) {
    foreach ($edit["filterby"] as $vid) {
      if ($vid > 0)
	$categories_present .= + 1; 
    }

    if (($keys == "") and ($categories_present == 0) ) {
      $output .= t("<h2>No s'ha trovat cap condició a avaluar</h2>Si us plau, posa algun criteri per a la recerca");
      $output .= $howto_search;
    }
  }

  $output .= taxonomy_sort_search_form($edit, $keys);

  if (($keys <> "") or ($categories_present > 0) ) 
  	$result = taxonomy_sort_search_data($edit, $keys);

  $theme->box(t("Cercador de continguts"), $output);

  if ($result) {
    $theme->box(t("Result"), $result);
  }

  $theme->footer();
}

function taxonomy_sort_search_form($edit, $keys) {

  // add the taxonomy terms
  $form = "";
  $omitted = variable_get("taxonomy_sort_search_vocab", array());
//  print_r($omitted);
  foreach(taxonomy_get_vocabularies()  as $vocabulary) {
    // Supposed to be a private function... arg!!!
    if (in_array($vocabulary->vid,$omitted) == false)
      $form .= _taxonomy_term_select($vocabulary->name, "filterby", $edit["filterby"] , $vocabulary->vid, "", 0, "<". t("sense especificar") .">");
  }

  $form .= '
    <br />
    <input type="text" size="50" value="'. check_form($keys) .'" name="keys" />
    <input type="submit" value="'. t("Search") .'" />
    <br />
    <em>'. t("If you don't put key words, all nodes corresponding to the selected taxonomy terms will be showed") .'</em>';
  return  form($form, "post", $action);

}


function taxonomy_sort_search_data($edit, $keys) {

  $categories = NULL;

  // The search is done on taxonomy terms.  If we have key, then we restrein the search over theses keys.
  // If we don't have any keys nor taxonomy terms, that means that nothing has been selected to make a search
  // Return nothing

  $taxo = taxonomy_sort_get_filters();


  if ($keys) {
    $select_search = "select s.lno as lno, n.title as title, n.created as created, u.uid as uid, u.name as name, s.count as count, n.nid nid FROM {search_index} s, {node} n LEFT JOIN {users} u ON n.uid = u.uid WHERE s.lno = n.nid AND s.type = 'node' AND s.word like '%'  AND n.status = 1" ;
    $result = do_search(array("keys" => $keys, "type" => "node", "select" => $select_search));
    if ($result) {
      $output = "<p><strong>". t("Matching results ranked in order of relevance") .":</strong></p>";

      foreach ($result as $entry) {
        $nid = explode("/",$entry["link"]);
        // let's check if this node has the selected taxonomy
        if (count($taxo)) {
//          $output .= $entry[nid] ." / ";
          if (taxonomy_sort_has_taxonomy( $nid[count($nid) - 1] )) 
            $output .= search_item($entry, $name);
        } //  if count (taxo)
        else {
          $output .= search_item($entry, $name);
        }
      } // foreach result
    } // if result
    else {
      $output = t("Your search yielded no results.");
    } // if result

  } // if keys
  else if (isset($edit["filterby"])) {
    $taxonomies_filter = "";
    foreach ($taxo as $taxostr) {
       if ($taxonomies_filter != "")
		$taxonomies_filter .= " OR ";
	$taxonomies_filter .= " tn.tid in (" .$taxostr .") ";
    }
    
    $query = sprintf("SELECT n.nid, n.title, u.name, n.created FROM {term_node} tn, {node} n, {users} u WHERE tn.nid = n.nid AND n.uid = u.uid AND (%s) GROUP BY n.nid HAVING COUNT(n.nid) = %d", $taxonomies_filter, count($taxo));
//    $query = sprintf("SELECT n.nid, n.title, u.name, n.created FROM {term_node} tn, {node} n, {users} u WHERE tn.nid = n.nid AND n.uid = u.uid");
    if (db_num_rows($res = db_query($query))) {
      $output = "<p><strong>". t("Matching results ranked in order of relevance") .":</strong></p>";
      while ($node = db_fetch_object($res)) {
        $entry = array("count" => "", "lno" => $node->nid, "title" => $node->title, "link" => (strstr($PHP_SELF, "admin.php") ? url("admin/node/edit/$node->nid") : url("node/view/$node->nid")) , "user" => $node->name, "date" => $node->created, "keywords" => "");
        $output .= search_item($entry, $name);
      }
    }
    else {
      $output = t("Your search yielded no results.");
    }
  } 

  return $output;
}

function taxonomy_sort_settings() {
  $vocabularies = taxonomy_get_vocabularies();  
  foreach ($vocabularies as $vocabulary) {
    $select[$vocabulary->vid] = $vocabulary->name;
  }  
  $output  = form_select(t("Omitted Vocabularies (filters form)"), "taxonomy_sort_filter_vocab", variable_get("taxonomy_sort_filter_vocab", array()), $select, t("Select vocabularies which should be <b>omitted</b> at the listings filter form."), "", 1);  
  $output  .= form_select(t("Omitted Vocabularies (search form)"), "taxonomy_sort_search_vocab", variable_get("taxonomy_sort_search_vocab", array()), $select, t("Select vocabularies which should be <b>omitted</b> at the search form."), "", 1);  
 return $output;
}

?>
