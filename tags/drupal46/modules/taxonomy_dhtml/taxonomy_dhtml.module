<?php
// $Id: taxonomy_dhtml.module,v 1.60.2.1 2005/04/15 18:56:50 weitzman Exp $

function taxonomy_dhtml_set_head() {
  global $base_url;

  $output[] = "<link rel=\"stylesheet\" type=\"text/css\" media=\"screen\" href=\"$base_url/modules/taxonomy_dhtml/menuExpandable3.css\" />";
  $output[] = "<script type=\"text/javascript\" src=\"$base_url/modules/taxonomy_dhtml/menuExpandable3.js\"></script>";
  return $output;
}

function taxonomy_dhtml_onload() {
  global $tdhtml_ul;
  if (user_access('access content')) {
    for ($n = 1; $n < $tdhtml_ul; $n++) {
      $items[] = "initializeMenu('menu_$n', 'actuator$n')";
    }
  return $items;
  }
}

function taxonomy_dhtml_block($op = "list", $delta = 0) {
  if($op == "list") {
    $vocabularies = taxonomy_get_vocabularies();
    $i = 0;
    foreach ($vocabularies as $vocabulary) {
      $blocks[$i]["info"] = $vocabulary->name;
      $i++;
    }
    return $blocks;
  }
  elseif ($op == 'view') {
    if (user_access("access content")) {
      $i = 0;
      $vocabularies = taxonomy_get_vocabularies();
      foreach ($vocabularies as $vocabulary) {
        $block["subject"]= t($vocabulary->name);
        $block["content"]= taxonomy_dhtml_vocab_vert($vocabulary->vid);
        if ($i == $delta) break;
        $i++;
      }
      return $block;
    }
  }
}


// TODO: recipe.module and node_aggregator did use $type to filter results to their own node type. no longer supported (but should be)
function taxonomy_dhtml_vocab_vert($vocabulary_id, $op = NULL) {
  $tree = taxonomy_get_tree($vocabulary_id);
  // build an array which holds all children of current term. necessary to build a proper 'or' value in the HREF
  foreach ($tree as $term) {
    $link = l(t($term->name), "taxonomy/term/$term->tid/9/$op", array("title" => t($term->description)));
    $out .= _taxonomy_depth($term->depth, "&nbsp;")."- $link";
    $count = taxonomy_term_count_nodes($term->tid);
    if ($count) {
      $out .= " ($count)";
    }
    $out .= "<br />";
  }
  return $out;
}

// accepts an optional param for restricting nodes to a particular type
function taxonomy_dhtml_overview($type = 0) {

  $n=0;
  $vocabularies = taxonomy_dhtml_get_vocabularies($type);
  foreach ($vocabularies as $vocabulary) {

    $tree_nodes = unserialize(cache_get("taxonomy_dhtml:tree_nodes_$type". $vocabulary->vid));
    if (!$tree_nodes) {
      $tree = taxonomy_get_tree($vocabulary->vid);

      // localize and append the node count to each term name
      for ($m=0; $m<count($tree); $m++) {
        $tree[$m]->name = t($tree[$m]->name);
        if ($count = taxonomy_term_count_nodes($tree[$m]->tid, $type)) {
          $tree[$m]->name .= " ($count)";
        }
      }

      $tree_nodes = taxonomy_dhtml_inject_nodes($tree, $type);
      cache_set("taxonomy_dhtml:tree_nodes_$type". $vocabulary->vid, serialize($tree_nodes), time() + variable_get("cache_clear", 120));
    }
    $boxes[$n]["content"] = theme("taxonomy_dhtml_render_outline", $tree_nodes);
    $boxes[$n]["subject"] = $vocabulary->name;
    $n++;
  }

  return $boxes ? $boxes : array();
}

function taxonomy_dhtml_get_vocabularies($type = 0) {
  $vocabularies = taxonomy_get_vocabularies($type);
   //omit undesired vocabularies from listing
   if (!$type) {
    $omits = variable_get("taxonomy_dhtml_overview_vocab", array());
    foreach ($omits as $omit) {
      unset($vocabularies[$omit]);
    }
  }
  return $vocabularies;
}

function taxonomy_dhtml_menu($may_cache) {
  if ($may_cache) {
    $items[] = array('path' => 'taxonomy_dhtml', 'title' => t("categories"),
    'callback' => 'taxonomy_dhtml_page',
    'access' => user_access('access content'),
    'weight' => 5,
    'type' => MENU_NORMAL_ITEM);
    return $items;
  }
  else {
    drupal_set_html_head(implode("\n", taxonomy_dhtml_set_head()));
  }
}

function taxonomy_dhtml_syndication() {
  $vocabularies = taxonomy_dhtml_get_vocabularies();

  $i=0;
  foreach ($vocabularies as $vocabulary) {
    $result = db_query_range("SELECT tid, name FROM {term_data} WHERE vid = '$vocabulary->vid' ORDER BY weight ASC", 0, 3);
    while ($term = db_fetch_object($result)) {
      $tids[] = $term->tid;
      $names[] = $term->name;
    }
    if ($tids && $names) {
      if (count($names) > 2) {
        $tids = implode("+", $tids);
        $names = implode(", ", $names);
        $link = l($names, "taxonomy/term/$tids/0/feed");
        $output = t("<p>The feeds above may be mixed by listing term IDs at the end of the url. ");
        $output .= t(" ID's should be separated by commas. For example, here is a feed for %s</p>", array ("%s" => $link));
      }
      $box[$i]['content']= taxonomy_dhtml_vocab_vert($vocabulary->vid, 'feed'). $output;
      $box[$i]['subject']= $vocabulary->name;
      unset($output, $tids, $names);
    }
    $i++;
  }
  return $box;
}

// given a taxonomy tree, add nodes below all relevant terms
function taxonomy_dhtml_inject_nodes($tree, $type = NULL) {
  $tree_node = $tree;
  // iterate over the tree backwards, so I don't trip on the new items
  for ($i=count($tree)-1; $i>=0 ; $i--) {
    $term = $tree[$i];
    /* restrict to a single type if given */
    $type_q = ($type ? " AND n.type = '$type'" : 1);
    $result = db_query_range(db_rewrite_sql("SELECT n.nid, n.title, n.type, u.uid, u.name FROM {term_node} r LEFT JOIN {node} n ON r.nid = n.nid LEFT JOIN {users} u ON n.uid = u.uid WHERE $type_q AND r.tid = '$term->tid' ORDER BY n.changed DESC"), 0, variable_get("taxonomy_dhtml_overview_count", 50));
    while ($node = db_fetch_object($result)) {                 
      if (module_exist('comment')) {
        $detail = t("Author: %name, comments: %num", array ("%name" => strip_tags(format_name($node)), "%num" => comment_num_all($node->nid)));
      }
      $link = l($node->title, "node/$node->nid", array ("title" => $detail, "class" => "dhtml_node"));
      $term_node = array2object(array ("nid" => $node->nid, "depth" => $term->depth+1, "link" => $link));
      $part1 = array_slice($tree_node, 0, $i+1);
      $part2 = array_slice($tree_node, $i+1, count($tree_node));
      $part1[] = $term_node;
      $tree_node = array_merge($part1, $part2);
    }
  }
  return $tree_node;
}

function theme_taxonomy_dhtml_render_outline($tree) {
  global $tdhtml_ul;

  $old_depth = -1;
  $output = "";
  for ($m = 0; $m < count($tree); $m++) {
    $term = $tree[$m];

    if ($term->depth > $old_depth) {
      $output .= "<ul class=\"".($term->depth == 0 ? "menuList" : "submenu"). "\" id=\"menu_$tdhtml_ul\">\n";
      $tdhtml_ul++;
    }
    if ($term->depth < $old_depth) {
      $delta = $old_depth - $term->depth;
      $output .= str_repeat("</ul>\n", ($delta > 0 ? $delta : 0 ));
    }

    $old_depth = $term->depth;
    // if children exist, output with proper class and id attributes, else, output item with specified link or default link
    if ($term->depth < $tree[$m+1]->depth) {
      $link = l(t($term->name), "taxonomy/term/$term->tid/9",
                array("title" => t($term->description),
                      "class" => "actuator",
                      "id"    => "actuator$tdhtml_ul"));
      $output .= "<li class=\"menubar\">$link</li>\n";
    }
    else if ($term->link){
      $link = $term->link;
      $output .= "<li>$link</li>\n";
    } else {
      $link = l(t($term->name), "taxonomy/term/$term->tid/9", array("title" => t($term->description)));
      $output .= "<li>$link</li>\n";
    }
  }
  $output .= str_repeat("</ul>\n", 1+$term->depth);
  return $output;
}

function taxonomy_dhtml_settings() {
  $vocabularies = taxonomy_get_vocabularies();
  $select[0] = "<". t("none") .">";
  foreach ($vocabularies as $vocabulary) {
    $select[$vocabulary->vid] = $vocabulary->name;
  }
  $output = form_select(t("Omitted vocabularies"), "taxonomy_dhtml_overview_vocab", variable_get("taxonomy_dhtml_overview_vocab", array()), $select, t("Select vocabularies which should be <b>omitted</b> from listings."), "", 1);
  $output .= form_textfield("Number of items", "taxonomy_dhtml_overview_count", variable_get("taxonomy_dhtml_overview_count", 50), 3, 3, t("The number of items to display per vocabulary in the overview page."));
  return $output;
}

function taxonomy_dhtml_page() {

  switch (arg(1)) {
    case "overview":
    default:
      if ($type = $_GET['type']) {
        $boxes = taxonomy_dhtml_overview($type);
      }
      else {
        $boxes = taxonomy_dhtml_overview();
      }
      foreach ($boxes as $box) {
       $output .= "<div class=\"voc\">\n";
       $output .= "<h3>". $box['subject']. "</h3>\n";
       $output .= $box['content']. "\n";
       $output .= "</div>\n";
      }
      print theme("page", $output);
  }
}

function taxonomy_dhtml_help($section) {
  $output ="";

  switch ($section) {
    case 'admin/modules#description':
      $output = t("A user interface for taxonomy featuring a collapsible list on main page");
      break;
    case 'admin/help#taxonomy_dhtml':
    case 'admin/settings/taxonomy_dhtml':
      $output = "This module provides a DHTML representation of this site's taxonomy. Currently, a ". l("block", "admin/system/block"). " is provided for each vocabulary as well as an ";
      $output .= l("overview", "taxonomy_dhtml");
      $output .= " page showing all vocabularies, terms, and recent nodes within each term. Finally, a box showing taxonomy feeds is outputted on the ". l("syndication page", "syndication"). " if <i>syndication.module</i> is installed.";
      break;
  }

  return $output;
}

?>
