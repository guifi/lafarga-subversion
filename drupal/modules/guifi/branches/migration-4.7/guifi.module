<?php
// $Id: guifi.module x$

include_once("guifi_zone.inc.php");      // zone management
include_once("guifi_ipv4.inc.php");      // ipv4 network management
include_once("guifi_node.inc.php");      // node (location) management
include_once("guifi_service.inc.php");   // services management
include_once("guifi_devices.inc.php");   // device management
include_once("guifi_radios.inc.php");    // radios management
include_once("guifi_interfaces.inc.php");// interfaces management
include_once("guifi_links.inc.php");     // links management
include_once("guifi_users.inc.php");     // user management
include_once("guifi_graphs.inc.php");    // graphs management
include_once("guifi_unsolclic.inc.php"); // unsolclic generator 
include_once("guifi_nodexchange.inc.php");// nodeXchange (XML) generator 
include_once("guifi_cnml.inc.php");      // CNML (XML) generator 
include_once("guifi_gml.inc.php");       // gml (geographic XML export) generator 
include_once("guifi_maps.inc.php");      // maps management
include_once("guifi_includes.inc.php");  // misc. routines
include_once("guifi_networkutils.inc.php");  // network calc routines
include_once("GeoCalc.class.php");       // geographic routines
# include_once("guifi_migration.inc.php"); // db migration, to take out once db has been migrated!

/**
 * @file
 * Allows administrators to customize the site guifi zones.
 */

/**
 * Implementation of node hooks.
 */

function guifi_menu($may_cache) {
  $items = array();

  if ($may_cache) {
     $items[] = array('path' => 'node/add/guifi-zone', 'title' => t('guifi zone'),
        'access' => user_access('create guifi zones'));
     $items[] = array('path' => 'node/add/guifi-node', 'title' => t('guifi node'),
        'access' => user_access('create guifi nodes'));
     $items[] = array('path' => 'node/add/guifi-service', 'title' => t('guifi service'),
        'access' => user_access('create guifi nodes'));
//     $items[] = array('path' => 'node/add/guifi-device', 'title' => t('create guifi device'),
//        'access' => user_access('create guifi nodes'));


    $items[] = array('path' => 'admin/guifi', 'title' => t('guifi'),
      'callback' => 'guifi_overview',
      'access' => user_access('administer guifi zones'));
    $items[] = array('path' => 'admin/guifi/list', 'title' => t('list'),
      'type' => MENU_DEFAULT_LOCAL_TASK, 'weight' => -10);
    $items[] = array('path' => 'admin/guifi/ipv4/add', 'title' => t('add ipv4 network allocation'),
      'callback' => 'guifi_edit_ipv4',
      'access' => user_access('administer guifi networks'),
      'type' => MENU_LOCAL_TASK);
    $items[] = array('path' => 'admin/guifi/ipv4/edit', 'title' => t('edit guifi netorks'),
      'callback' => 'guifi_edit_ipv4',
      'access' => user_access('administer guifi networks'),
      'type' => MENU_CALLBACK);
    $items[] = array('path' => 'admin/guifi/ipv4/delete', 'title' => t('delete guifi netorks'),
      'callback' => 'guifi_delete_ipv4',
      'access' => user_access('administer guifi networks'),
      'type' => MENU_CALLBACK);

  } else {
     $items[] = array('path' => 'guifi/add/device', 'title' => t('add device'), 	 
       'callback' => 'guifi_add_device', 	 
       'access' => user_access('create guifi nodes'), 	 
       'type' => MENU_LOCAL_TASK);
     $items[] = array('path' => 'guifi/graph', 'title' => t('display graph'),
       'callback' => 'guifi_graph',
       'access' => user_access('access content'),
       'type' => MENU_SUGGESTED_ITEM);
     $items[] = array('path' => 'guifi/graph_detail', 'title' => t('display detailed node graphs'),
       'callback' => 'guifi_graph_detail',
       'access' => user_access('access content'),
       'type' => MENU_SUGGESTED_ITEM);
     $items[] = array('path' => 'guifi/purge', 'title' => t('purge orphan devices/interfaces/ip addresses'),
       'callback' => 'guifi_purge',
       'access' => user_access('administer guifi networks'),
       'type' => MENU_SUGGESTED_ITEM);
     $items[] = array('path' => 'guifi/mrtg', 'title' => t('generate mrtg config file'),
       'callback' => 'guifi_mrtg',
       'access' => user_access('access content'),
       'type' => MENU_SUGGESTED_ITEM);
     $items[] = array('path' => 'guifi/nodexchange', 'title' => t('export zone in nodeXchange format'),
       'callback' => 'guifi_nodexchange',
       'access' => user_access('access content'),
       'type' => MENU_SUGGESTED_ITEM);
     $items[] = array('path' => 'guifi/cnml', 'title' => t('export zone in CNML format'),
       'callback' => 'guifi_cnml',
       'access' => user_access('access content'),
       'type' => MENU_SUGGESTED_ITEM);
     $items[] = array('path' => 'guifi/gml', 'title' => t('export zone in gml format'),
       'callback' => 'guifi_gml',
       'access' => user_access('access content'),
       'type' => MENU_SUGGESTED_ITEM);
     $items[] = array('path' => 'guifi/refresh', 'title' => t('check if data must be refreshed'),
       'callback' => 'guifi_refresh',
       'access' => user_access('access content'),
       'type' => MENU_SUGGESTED_ITEM);
     $items[] = array('path' => 'admin/settings/guifi/upgrade', 'title' => t('upgrade from previous versions'),
       'callback' => 'guifi_upgrade',
       'access' => user_access('access content'),
       'type' => MENU_SUGGESTED_ITEM);


    // guifi module menus
    $items[] = array('path' => 'guifi', 'title' => t('guifi mesh database'),
      'callback' => 'guifi_page',
      'access' => user_access('access content'),
      'type' => MENU_SUGGESTED_ITEM);
    // device management menus
    if (arg(1) == 'device') {
    $items[] = array('path' => 'guifi/device/'.arg(2), 'title' => t('view device'),
      'callback' => 'guifi_device_print',
      'callback arguments' => arg(2),
      'access' => user_access('access content'),
      'type' => MENU_SUGGESTED_ITEM);
    $items[] = array('path' => 'guifi/device/'.arg(2).'/view', 'title' => t('view'),
      'callback arguments' => arg(2),
      'type' => MENU_DEFAULT_LOCAL_TASK, 'weight' => -10);
    $items[] = array('path' => 'guifi/device/'.arg(2).'/view/all', 'title' => t('all'),
      'callback arguments' => arg(2),
      'type' => MENU_DEFAULT_LOCAL_TASK, 'weight' => -10);
    $items[] = array('path' => 'guifi/device/'.arg(2).'/view/data', 'title' => t('data'),
      'callback' => 'guifi_device_print',
      'callback arguments' => arg(2),
      'type' => MENU_LOCAL_TASK, 'weight' => 7);
    $items[] = array('path' => 'guifi/device/'.arg(2).'/view/graphs', 'title' => t('graphs'),
      'callback' => 'guifi_device_print',
      'callback arguments' => arg(2),
      'type' => MENU_LOCAL_TASK, 'weight' => 8);
    $items[] = array('path' => 'guifi/device/'.arg(2).'/view/links', 'title' => t('links'),
      'callback' => 'guifi_device_print',
      'callback arguments' => arg(2),
      'type' => MENU_LOCAL_TASK, 'weight' => 9);
    $items[] = array('path' => 'guifi/device/'.arg(2).'/view/interfaces', 'title' => t('interfaces'),
      'callback' => 'guifi_device_print',
      'callback arguments' => arg(2),
      'type' => MENU_LOCAL_TASK, 'weight' => 10);
    $items[] = array('path' => 'guifi/device/'.arg(2).'/view/services', 'title' => t('services'),
      'callback' => 'guifi_device_print',
      'callback arguments' => arg(2),
      'type' => MENU_LOCAL_TASK, 'weight' => 11);
    $items[] = array('path' => 'guifi/device/'.arg(2).'/edit', 'title' => t('edit device'),
      'callback' => 'guifi_edit_device',
      'callback arguments' => arg(2),
//      'access' => user_access('create guifi nodes'), 	 
      'access' => guifi_device_access('update',arg(2)),
      'type' => MENU_LOCAL_TASK);
    $items[] = array('path' => 'guifi/device/'.arg(2).'/view/unsolclic', 'title' => t('unsolclic'),
      'callback' => 'guifi_unsolclic',
      'callback arguments' => arg(2),
      'weight' => 10,
      'type' => MENU_LOCAL_TASK);
    $items[] = array('path' => 'guifi/device/'.arg(2).'/delete', 'title' => t('delete device'),
      'callback' => 'guifi_delete_device',
      'callback arguments' => arg(2),
      'access' => guifi_device_access('update',arg(2)),
      'weight' => 10,
      'type' => MENU_LOCAL_TASK);
    } 

    // node menus
    if (arg(0) == 'node' && is_numeric(arg(1))) {
      $node = node_load(arg(1));

      // zone menus
      if (($node->nid) && ($node->type == 'guifi-zone')) {
        $items[] = array('path' => 'node/'. arg(1) .'view', 'title' => t('view'),
          'callback' => 'guifi_view',
          'callback arguments' => arg(1),
          'access' => user_access('access content'),
          'weight' => -10,
          'type' => MENU_DEFAULT_LOCAL_TASK);
        $items[] = array('path' => 'node/'. arg(1) .'/view/all', 'title' => t('all'),
          'callback' => 'guifi_view',
          'callback arguments' => arg(1),
          'access' => user_access('access content'),
          'weight' => -10,
          'type' => MENU_DEFAULT_LOCAL_TASK);
        $items[] = array('path' => 'node/'. arg(1) .'/view/view', 'title' => t('page'),
          'callback' => 'guifi_view',
          'callback arguments' => arg(1),
          'access' => user_access('access content'),
          'weight' => 1,
          'type' => MENU_LOCAL_TASK);
        $items[] = array('path' => 'node/'. arg(1) .'/view/nodes', 'title' => t('nodes'),
          'callback' => 'guifi_view',
          'callback arguments' => arg(1),
          'access' => user_access('access content'),
          'weight' => 2,
          'type' => MENU_LOCAL_TASK);
        $items[] = array('path' => 'node/'. arg(1) .'/view/map', 'title' => t('map'),
          'callback' => 'guifi_view',
          'callback arguments' => arg(1),
          'access' => user_access('access content'),
          'weight' => 3,
          'type' => MENU_LOCAL_TASK);
        $items[] = array('path' => 'node/'. arg(1) .'/view/data', 'title' => t('data'),
          'callback' => 'guifi_view',
          'callback arguments' => arg(1),
          'access' => user_access('access content'),
          'weight' => 4,
          'type' => MENU_LOCAL_TASK);
        $items[] = array('path' => 'node/'. arg(1) .'/view/availability', 'title' => t('availability'),
          'callback' => 'guifi_view',
          'callback arguments' => arg(1),
          'access' => user_access('access content'),
          'weight' => 5,
          'type' => MENU_LOCAL_TASK);
        $items[] = array('path' => 'node/'. arg(1) .'/view/services', 'title' => t('services'),
          'callback' => 'guifi_view',
          'callback arguments' => arg(1),
          'access' => user_access('access content'),
          'weight' => 6,
          'type' => MENU_LOCAL_TASK);
        $items[] = array('path' => 'node/'. arg(1) .'/view/ipv4', 'title' => t('networks'),
          'callback' => 'guifi_view',
          'callback arguments' => arg(1),
          'access' => user_access('access content'),
          'weight' => 7,
          'type' => MENU_LOCAL_TASK);
        $items[] = array('path' => 'node/'. arg(1) .'/view/ipv4/all', 'title' => t('list'),
          'callback arguments' => arg(1),
          'type' => MENU_DEFAULT_LOCAL_TASK);
        $items[] = array('path' => 'node/'. arg(1) .'/view/ipv4/add', 'title' => t('add network range'),
          'callback' => 'guifi_edit_ipv4',
          'callback arguments' => arg(1),
          'access' => user_access('access content'),
          'weight' => 10,
          'type' => MENU_LOCAL_TASK);

        // Menus of edit
        $items[] = array('path' => 'node/'. arg(1) .'edit', 'title' => t('edit'),
          'callback' => 'guifi_edit',
          'callback arguments' => arg(1),
          'access' => user_access('access content'),
          'weight' => -10,
          'type' => MENU_DEFAULT_LOCAL_TASK);
        $items[] = array('path' => 'node/'. arg(1) .'/edit/data', 'title' => t('data'),
          'callback' => 'guifi_edit',
          'callback arguments' => arg(1),
          'access' => user_access('access content'),
          'weight' => -10,
          'type' => MENU_DEFAULT_LOCAL_TASK);

        // Menus of ipv4
        $items[] = array('path' => 'node/'. arg(1) .'/ipv4', 'title' => t('ipv4 nets'),
          'callback' => 'guifi_edit_ipv4',
          'callback arguments' => arg(1),
          'access' => user_access('administer guifi networks'),
          'weight' => 10,
          'type' => MENU_LOCAL_TASK);
      }

      // node (location) menus
      if (($node->nid) && ($node->type == 'guifi-node')) {
        $items[] = array('path' => 'node/'. arg(1) .'/add', 'title' => t('add device'),
          'callback' => 'guifi_create_device',
          'callback arguments' => arg(1),
          'access' => user_access('create guifi nodes'),
          'weight' => 10,
          'type' => MENU_LOCAL_TASK);
        $items[] = array('path' => 'node/'. arg(1) .'view', 'title' => t('view'),
          'callback' => 'guifi_view',
          'callback arguments' => arg(1),
          'access' => user_access('access content'),
          'weight' => -10,
          'type' => MENU_DEFAULT_LOCAL_TASK);
        $items[] = array('path' => 'node/'. arg(1) .'/view/all', 'title' => t('all'),
          'callback' => 'guifi_view',
          'callback arguments' => arg(1),
          'access' => user_access('access content'),
          'weight' => -10,
          'type' => MENU_DEFAULT_LOCAL_TASK);
        $items[] = array('path' => 'node/'. arg(1) .'/view/data', 'title' => t('data'),
          'callback' => 'guifi_view',
          'callback arguments' => arg(1),
          'access' => user_access('access content'),
          'weight' => 1,
          'type' => MENU_LOCAL_TASK);
        $items[] = array('path' => 'node/'. arg(1) .'/view/graphs', 'title' => t('graphs'),
          'callback' => 'guifi_view',
          'callback arguments' => arg(1),
          'access' => user_access('access content'),
          'weight' => 2,
          'type' => MENU_LOCAL_TASK);
        $items[] = array('path' => 'node/'. arg(1) .'/view/devices', 'title' => t('devices'),
          'callback' => 'guifi_view',
          'callback arguments' => arg(1),
          'access' => user_access('access content'),
          'weight' => 3,
          'type' => MENU_LOCAL_TASK);
        $items[] = array('path' => 'node/'. arg(1) .'/view/links', 'title' => t('links'),
          'callback' => 'guifi_view',
          'callback arguments' => arg(1),
          'access' => user_access('access content'),
          'weight' => 4,
          'type' => MENU_LOCAL_TASK);
        if ((($node->lat != '') and ($node->lon != '')) and (($node->lat > 0) and ($node->lon > 0)))
        $items[] = array('path' => 'node/'. arg(1) .'/view/distances', 'title' => t('distances'),
          'callback' => 'guifi_view',
          'callback arguments' => arg(1),
          'access' => user_access('access content'),
          'weight' => 5,
          'type' => MENU_LOCAL_TASK);
        $items[] = array('path' => 'node/'. arg(1) .'/view/services', 'title' => t('services'),
          'callback' => 'guifi_view',
          'callback arguments' => arg(1),
          'access' => user_access('access content'),
          'weight' => 6,
          'type' => MENU_LOCAL_TASK);
        $items[] = array('path' => 'node/'. arg(1) .'/view/users', 'title' => t('users'),
          'callback' => 'guifi_view',
          'callback arguments' => arg(1),
          'access' => user_access('access content'),
          'weight' => 7,
          'type' => MENU_LOCAL_TASK);
      }

      // service menus
      if (($node->nid) && ($node->type == 'guifi-service')) {
        $items[] = array('path' => 'node/'. arg(1) .'view', 'title' => t('view'),
          'callback' => 'guifi_view',
          'callback arguments' => arg(1),
          'access' => user_access('access content'),
          'weight' => -10,
          'type' => MENU_DEFAULT_LOCAL_TASK);
        $items[] = array('path' => 'node/'. arg(1) .'/view/all', 'title' => t('all'),
          'callback' => 'guifi_view',
          'callback arguments' => arg(1),
          'access' => user_access('access content'),
          'weight' => -10,
          'type' => MENU_DEFAULT_LOCAL_TASK);
        $items[] = array('path' => 'node/'. arg(1) .'/view/view', 'title' => t('page'),
          'callback' => 'guifi_view',
          'callback arguments' => arg(1),
          'access' => user_access('access content'),
          'weight' => 1,
          'type' => MENU_LOCAL_TASK);
        $items[] = array('path' => 'node/'. arg(1) .'/view/data', 'title' => t('data'),
          'callback' => 'guifi_view',
          'callback arguments' => arg(1),
          'access' => user_access('access content'),
          'weight' => 2,
          'type' => MENU_LOCAL_TASK);
        if ($node->service_type == 'Proxy') {
          $items[] = array('path' => 'node/'. arg(1) .'/view/users', 'title' => t('users'),
            'callback' => 'guifi_view',
            'callback arguments' => arg(1),
            'access' => user_access('access content'),
            'weight' => 3,
            'type' => MENU_LOCAL_TASK);
          $items[] = array('path' => 'node/'. arg(1) .'/view/passwd', 'title' => t('passwd'),
            'callback' => 'guifi_view',
            'callback arguments' => arg(1),
            'access' => user_access('access content'),
            'type' => MENU_CUSTOM_ITEM);
          $items[] = array('path' => 'node/'. arg(1) .'/view/federated', 'title' => t('federated'),
            'callback' => 'guifi_view',
            'callback arguments' => arg(1),
            'access' => user_access('access content'),
            'type' => MENU_CUSTOM_ITEM);
          $items[] = array('path' => 'node/'. arg(1) .'/view/ldif', 'title' => t('ldif'),
            'callback' => 'guifi_view',
            'callback arguments' => arg(1),
            'access' => user_access('access content'),
            'type' => MENU_CUSTOM_ITEM);
        }
      }
    }
  }

   $style = '<style type="text/css" media="all">@import "modules/guifi/guifi.css";</style>';
   drupal_set_html_head($style);

  return $items;
}

/**
 * Implementation of hook_help().
 */
function guifi_help($section) {
  switch ($section) {
    case 'admin/modules#description':
      return t('Manage the guifi.net, a mesh network community.');
    case 'admin/guifi':
      return t('Select an operation from the menus to manage zones.');
    case 'admin/guifi/zone/add':
      return t('Enter de zone information.');
    case 'node/add#guifi-node':
      return t("Create a node. A node is a physical location (will be dynamically drawed on the maps using lat/lon coordinates) where there are network devices, servers, etc.<br />Every node have to assigned to a guifi zone.");
    case 'node/add#guifi-zone':
      return t("Create a community, area or zone. A typical zone hierarchy can be related to the territory (Country/Region/City...) but not have to, i.e. a single city can have many groups or communities with distinct IP addressing policies.<br />Every zone will have it's own page so it can be used as the homepage of that community.<br />The zones must belong at least to the root zone, but can also belong to other zones, so in that way a hierarchy is created.<br />Every zone have its own properties like maps or ip ranges and every node will have to be assigned to an existing zone, and will inherit the zone properties like his IP address and drawn in the corresponding map.<br />If zone properties are leaved blank, will inherit the parent zone properties.");
    case 'node/add#guifi-service':
      return t("Create a service. A service is any resource available on the network that should be listed in the content directory of the site, like a web server, internet proxy,ntp, instant messaging, voip gateway, etc... .");
  }
}

function guifi_purge() {
  // deleting orphan devices
  unset($del);
  $q =db_query('SELECT d.id FROM {guifi_devices} d LEFT JOIN {guifi_location} n ON d.nid=n.id WHERE n.id IS NULL');
  while ($r = db_fetch_object($q) )
    $del[] .= $r->id;

  if (count($del)) {
    $SqlDelDev = sprintf("DELETE FROM {guifi_devices} WHERE id IN (%s)",implode(',',$del));
    db_query($SqlDelDev);
    $SqlDelRad = sprintf("DELETE FROM {guifi_radios} WHERE id IN (%s)",implode(',',$del));
    db_query($SqlDelRad);
  }

  // deleting orphan radios
  unset($del);
  $q =db_query('SELECT r.id FROM {guifi_radios} r LEFT JOIN {guifi_devices} d ON r.id=d.id WHERE d.id IS NULL');
  while ($r = db_fetch_object($q) )
    $del[] .= $r->id;

  if (count($del)) {
    $SqlDelRad = sprintf("DELETE FROM {guifi_radios} WHERE id IN (%s)",implode(',',$del));
    print $SqlDelRad;
    db_query($SqlDelRad);
  }

  // deleting orphan interfaces
  unset($del);
  $q =db_query('SELECT i.id FROM {guifi_interfaces} i LEFT JOIN {guifi_devices} d ON i.device_id=d.id WHERE d.id IS NULL');
  while ($r = db_fetch_object($q) )
    $del[] .= $r->id;

  if (count($del)) {
    $SqlDel= sprintf("DELETE FROM {guifi_interfaces} WHERE id IN (%s)",implode(',',$del));
    print $SqlDel;
    db_query($SqlDel);
  }

  // deleting orphan ip addresses
  unset($del);
  $q =db_query('SELECT a.interface_id FROM {guifi_ipv4} a LEFT JOIN {guifi_interfaces} i ON a.interface_id=i.id WHERE i.id IS NULL');
  while ($r = db_fetch_object($q) )
    $del[] .= $r->interface_id;

  if (count($del)) {
    $SqlDel= sprintf("DELETE FROM {guifi_ipv4} WHERE interface_id IN (%s)",implode(',',$del));
    print $SqlDel;
    db_query($SqlDel);
  }

  // deleting orphan links
  unset($del);
  $q =db_query('SELECT l.id FROM {guifi_links} l LEFT JOIN {guifi_devices} d ON l.device_id=d.id WHERE d.id IS NULL');
  while ($r = db_fetch_object($q) )
    $del[] .= $r->id;

  if (count($del)) {
    $SqlDel= sprintf("DELETE FROM {guifi_links} WHERE id IN (%s)",implode(',',$del));
    print $SqlDel;
    db_query($SqlDel);
  }

}

/**
 * Implementation of hook_perm().
 */
function guifi_perm() {
  return array('administer guifi zones','administer guifi networks','create guifi zones','create guifi nodes','administer guifi users','manage guifi users');
}

/**
 * Implementation of hook_node_info().
 */
function guifi_node_info() {
  return array(
      'guifi-zone' => array('name' => t('guifi zone'), 'base' => 'guifi_zone'),
      'guifi-node' => array('name' => t('guifi node'), 'base' => 'guifi_node'),
      'guifi-service' => array('name' => t('guifi service'), 'base' => 'guifi_service')
  );
}

function guifi_settings() {
  global $sql_updates;
  
  // A partir d'ara l'ordre el definirem per aquesta variable.
  // Així ens estalviem canviar-ho tot cada cop que inserim un nou element.
  $form_weight = -20;
  
  // Aquesta funció no sembla que s'utilitzi enlloc
  function update_sql($sql) {
    $result = db_query($sql);
    if ($result) {
      return array('1', nl2br(htmlentities($sql)) ." ", "<div style=\"color: green;\">OK</div>\n");
    }
    else {
      return array('0', nl2br(htmlentities($sql)) ." ", "<div style=\"color: red;\">FAILED</div>\n");
    }
  }

  
  include_once("database/updates_guifi.inc.php");
  $last_version = variable_get("guifi_db_version",0);
  foreach ($sql_updates as $version => $func) {
    if ($version > $last_version) {
      $form['version-markup-ini'] = array(
        '#value' => "<strong>$version</strong><br />\n<pre>\n",
        '#weight' => $form_weight++,
      );

      $ret = $func();
      foreach ($ret as $return) {
        $form['version-markup-rslt'] = array(
          '#value' => $return[1] . $return[2],
          '#weight' => $form_weight++,
        );
      }
      variable_set("guifi_db_version", $version);

      $form['version-markup-end'] = array(
        '#value' => "</pre>\n",
        '#weight' => $form_weight++,
      );
    }
  }
  db_query('DELETE FROM {cache}');
  
  // ----
  // Muntatge del formulari
  // --------------------------------  
  $form['guifi_license'] = array(
    '#type' => 'textarea', 
    '#title' => t('License agreement'), 
    '#default_value' => variable_get("guifi_license", t("By creating this node, you accept the <a href=\"http://guifi.net/WirelessWCL_EN\">Wireless commons license.</a><br />Note that this database is inteded for supporting a real network, will assign ip addresses and show the network information in various formats, so might be <b>not</b> the right place for submitting ficticious data or just have fun. If you want to run tests or do some self training, be sure you are doing it at some of the <a href=\"http://proves.guifi.net\">test sites</a>.<br />Your access to this site might be banned if inappropiate use.s detected")), 
    '#cols' => 60, 
    '#rows' => 10, 
    '#description' => t("Agreement &#038; help message when creating new nodes, users will not be able to create nodes unless they accept this message."),
    '#weight' => $form_weight++,
  );
  $form['guifi_title'] = array(
    '#type' => 'textfield',
    '#title' => t('Block title'),
    '#required' => FALSE,
    '#default_value' => variable_get("guifi_title", t("guifi.net")),
    '#size' => 35,
    '#maxlength' => 255, 
    '#description' => t("Title of guifi block..."),
    '#weight' => $form_weight++,
  );
  $form['guifi_root'] = array(
    '#type' => 'textfield',
    '#title' => t('Root zone'),
    '#required' => FALSE,
    '#default_value' => variable_get("guifi_root", 'guifi_zones'),
    '#size' => 35,
    '#maxlength' => 255, 
    '#description' => t("URL of the root zone..."),
    '#weight' => $form_weight++,
  );  
  $form['guifi_contact'] = array(
    '#type' => 'textfield',
    '#title' => t('Default contact'),
    '#required' => FALSE,
    '#default_value' => variable_get("guifi_contact", 'netadmin@guifi.net'),
    '#size' => 55,
    '#maxlength' => 255, 
    '#description' => t("An email will be submitted to this address when no contact address is present."),
    '#weight' => $form_weight++,
  );
  $form['guifi_max_distance'] = array(
    '#type' => 'select',
    '#title' => t('Max. Distance'),
    '#required' => FALSE,
    '#default_value' => variable_get('guifi_max_distance', 25),
    '#options' => drupal_map_assoc(array( 5, 10, 15, 20, 25, 30, 40, 50, 75, 100)),
    '#description' => t('At which distance the report of neighbours ends. In Kms.'),
    '#weight' => $form_weight++,
  );
  
  // *** Aquesta linia no sembla que faci res. 
  $vocabularies = taxonomy_get_vocabularies();
  
  $form['hotspot_ssid'] = array(
    '#type' => 'textfield',
    '#title' => t('Hotspot SSID'),
    '#required' => FALSE,
    '#default_value' => variable_get("hotspot_ssid", t("HotSpot"),
    '#size' => 35,
    '#maxlength' => 255, 
    '#description' => t("SSID name for the hotspot open access for guests"),
    '#weight' => $form_weight++,
  );
  $form['rrdtool'] = array(
    '#type' => 'textfield',
    '#title' => t('Path to rrdtool'),
    '#required' => FALSE,
    '#default_value' => variable_get("rrdtool_path", t("/usr/bin/rrdtool")),
    '#size' => 35,
    '#maxlength' => 255, 
    '#description' => t("Full path to rrtool executable"),
    '#weight' => $form_weight++,
  );
  $form['rrddb_path'] = array(
    '#type' => 'textfield',
    '#title' => t('Path to mrtg rrd files'),
    '#required' => FALSE,
    '#default_value' => variable_get("rrddb_path", t("/home/comesfa/mrtg/logs/"),
    '#size' => 35,
    '#maxlength' => 255, 
    '#description' => t("Full path to rrtd database files"),
    '#weight' => $form_weight++,
  );
  $form['rrdimg_path'] = array(
    '#type' => 'textfield',
    '#title' => t('Path to mrtg img files'),
    '#required' => FALSE,
    '#default_value' => variable_get("rrdimg_path", t("/home/comesfa/mrtg/images/"),
    '#size' => 35,
    '#maxlength' => 255, 
    '#description' => t("Full path to rrtd img files"),
    '#weight' => $form_weight++,
  );
  $form['graphs_url'] = array(
    '#type' => 'textfield',
    '#title' => t('URL for local graphs'),
    '#required' => FALSE,
    '#default_value' => variable_get("graphs_url", t("http://gufi.net/snpservices/graphs/graphs.php")),
    '#size' => 35,
    '#maxlength' => 255, 
    '#description' => t("Base URL for local rrd graphs"),
    '#weight' => $form_weight++,
  );
  $form['guifi_log'] = array(
    '#type' => 'textfield',
    '#title' => t('Log file'),
    '#required' => FALSE,
    '#default_value' => variable_get("guifi_log", t("/home/comesfa/logs/guifi.log")),
    '#size' => 35,
    '#maxlength' => 255, 
    '#description' => t("Full path to filename"),
    '#weight' => $form_weight++,
  );
  $form['guifi_loglevel'] = array(
    '#type' => 'select',
    '#title' => t('Log level'),
    '#required' => FALSE,
    '#default_value' => variable_get("guifi_loglevel", 0),
    '#options' => array(0=>'None',1=>'Basic',2=>'Trace',3=>'Full'),
    '#description' => t('At which distance the report of neighbours ends. In Kms.'),
    '#weight' => $form_weight++,
  );
  $form['guifi_rebuildmaps'] = array(
    '#type' => 'textfield',
    '#title' => t('Rebuild maps mark'),
    '#required' => FALSE,
    '#default_value' => variable_get("guifi_rebuildmaps", '/tmp/ms_tmp/REBUILD'),
    '#size' => 35,
    '#maxlength' => 255, 
    '#description' => t("Full path to filename to be created to indicate that maps should be refreshed"),
    '#weight' => $form_weight++,
  );
  $form['guifi_maps'] = array(
    '#type' => 'textfield',
    '#title' => t('URL for maps module'),
    '#required' => FALSE,
    '#default_value' => variable_get("guifi_maps", 'http://maps.guifi.net'),
    '#size' => 35,
    '#maxlength' => 255, 
    '#description' => t("Base URL for the mapping GIS application (guifimaps)"),
    '#weight' => $form_weight++,
  );
  $form['guifi_decimal'] = array(
    '#type' => 'textfield',
    '#title' => t('Decimal separator'),
    '#required' => FALSE,
    '#default_value' => variable_get("guifi_decimal", ','),
    '#size' => 1,
    '#maxlength' => 1, 
    '#description' => t("Decimal character for formatting numbers"),
    '#weight' => $form_weight++,
  );
  $form['guifi_thousand'] = array(
    '#type' => 'textfield',
    '#title' => t('Thousands separator'),
    '#required' => FALSE,
    '#default_value' => variable_get("guifi_thousand", '.'),
    '#size' => 1,
    '#maxlength' => 1, 
    '#description' => t("Thousands separatos for formatting numbers"),
    '#weight' => $form_weight++,
  );
  
  
  return $form;
  
  
  
  
  // *** Codi antic, s'haurà d'esborrar

//  if 
//  $installed_version = variable_get("guifi_version","1.0");
//  if ($installed_version < 2) {
//    $output = l("upgrade to guifi module version 2.0","admin/settings/guifi/upgrade");
//  }
  $output .= form_textarea("License agreement", "guifi_license", variable_get("guifi_license", t("By creating this node, you accept the <a href=\"http://guifi.net/WirelessWCL_EN\">Wireless commons license.</a><br />Note that this database is inteded for supporting a real network, will assign ip addresses and show the network information in various formats, so might be <b>not</b> the right place for submitting ficticious data or just have fun. If you want to run tests or do some self training, be sure you are doing it at some of the <a href=\"http://proves.guifi.net\">test sites</a>.<br />Your access to this site might be banned if inappropiate use.s detected")), 80, 10, t("Agreement &#038; help message when creating new nodes, users will not be able to create nodes unless they accept this message."));
  $output .= form_textfield("Block title", "guifi_title", variable_get("guifi_title", t("guifi.net")), 35, 255, t("Title of guifi block..."));
  $output .= form_textfield("Root zone", "guifi_root", variable_get("guifi_root", 'guifi_zones'), 35, 255, t("URL of the root zone..."));
  $output .= form_textfield("Default contact", "guifi_contact", variable_get("guifi_contact", 'netadmin@guifi.net'), 55, 255, t("An email will be submitted to this address when no contact address is present."));
  $output .= form_select(t('Max. Distance'), 'guifi_max_distance', variable_get('guifi_max_distance', 25), drupal_map_assoc(array( 5, 10, 15, 20, 25, 30, 40, 50, 75, 100)), t('At which distance the report of neighbours ends. In Kms.'));
  $vocabularies = taxonomy_get_vocabularies();
  $output .= form_textfield("Hotspot SSID", "hotspot_ssid", variable_get("hotspot_ssid", t("HotSpot")), 35, 255, t("SSID name for the hotspot open access for guests"));
  $output .= form_textfield("Path to rrdtool", "rrdtool", variable_get("rrdtool_path", t("/usr/bin/rrdtool")), 35, 255, t("Full path to rrtool executable"));
  $output .= form_textfield("Path to mrtg rrd files", "rrddb_path", variable_get("rrddb_path", t("/home/comesfa/mrtg/logs/")), 35, 255, t("Full path to rrtd database files"));
  $output .= form_textfield("Path to mrtg img files", "rrdimg_path", variable_get("rrdimg_path", t("/home/comesfa/mrtg/images/")), 35, 255, t("Full path to rrtd img files"));
  $output .= form_textfield("URL for local graphs", "graphs_url", variable_get("graphs_url", t("http://gufi.net/snpservices/graphs/graphs.php")), 35, 255, t("Base URL for local rrd graphs"));
  $output .= form_textfield("Log file", "guifi_log", variable_get("guifi_log", t("/home/comesfa/logs/guifi.log")), 35, 255, t("Full path to filename"));
  $output .= form_select("Log level", "guifi_loglevel", variable_get("guifi_loglevel", 0), array(0=>'None',1=>'Basic',2=>'Trace',3=>'Full'), null);
  $output .= form_textfield("Rebuild maps mark", "guifi_rebuildmaps", variable_get("guifi_rebuildmaps", '/tmp/ms_tmp/REBUILD'), 35, 255, t("Full path to filename to be created to indicate that maps should be refreshed"));
  $output .= form_textfield("URL for maps module", "guifi_maps", variable_get("guifi_maps", 'http://maps.guifi.net'), 35, 255, t("Base URL for the mapping GIS application (guifimaps)"));
  $output .= form_textfield("Decimal separator", "guifi_decimal", variable_get("guifi_decimal", ','), 1, 1, t("Decimal character for formatting numbers"));
  $output .= form_textfield("Thousands separator", "guifi_thousand", variable_get("guifi_thousand", '.'), 1, 1, t("Thousands separatos for formatting numbers"));

 return $output;
}

function guifi_system($field){
  $system["description"] = t("Mesh network database");
  return $system[$field];
}

function guifi_block($op = "list", $delta = 0) {
  $oGC = new GeoCalc();
  $dTotals = array();
  

  if ($op == "list") {
    $blocks[0]["info"] = t(variable_get("guifi_title",t("guifi nodes")));
    return $blocks;
  }
  else {
    $block['subject'] = t(variable_get("guifi_title","<a href=\"guifi\">" .t("List of guifi nodes") ."</a>"));
    $tnodes = db_query('SELECT status_flag, count(*) c from {guifi_location} GROUP BY status_flag');
    $str = '';
    $rows = array();
    $totals = 0;
    while ($summary = db_fetch_object($tnodes)) {
      $rows[] = array(t($summary->status_flag),array('data'=>number_format($summary->c,0,null,variable_get('guifi_thousand',',')),'class'=>$summary->status_flag));
      $totals = $totals + $summary->c;
    }
    $header = array(t('Nodes'),'<p align=RIGHT>'.number_format($totals,0,null,variable_get('guifi_thousand','.')).'</p>');
    $content = theme('table', $header, $rows);
    $content .= '<div class="more-link">'. l(t('node list and maps...'), variable_get('guifi_root','/guifi_zones'), array('title' => t('Go to the list of nodes root page and their maps.'))) .'</div>';

    $qlinks = db_query('SELECT l1.id, n1.id nid1, n2.id nid2, l1.link_type, n1.lat lat1, n1.lon lon1, n2.lat lat2, n2.lon lon2 FROM guifi_links l1 LEFT JOIN guifi_links l2 ON l1.id=l2.id LEFT JOIN guifi_location n1 ON l1.nid=n1.id LEFT JOIN guifi_location n2 ON l2.nid=n2.id WHERE l1.nid != l2.nid AND l1.device_id != l2.device_id');
    unset($listed);
    while ($link = db_fetch_object($qlinks)) {
      if (!isset($listed[$link->id]) )
        $listed[$link->id] = $link;
      else
        continue; 
      $d = round($oGC->EllipsoidDistance($link->lat1, $link->lon1, $link->lat2, $link->lon2),1);
      switch ($link->link_type) {
        case 'wds': $type=t('PtP link'); break;
        case 'ap/client': $type=t('ap/client'); break;
        default: $type=t('unknown'); 
      }
      if ($d < 100) {
        $dTotals[$type]['dTotal'] += $d; 
        $dTotals[$type]['count'] ++;
      } else
       guifi_log(GUIFILOG_BASIC,sprintf('Probable DISTANCE error between nodes (%d and %d) %d kms.',$link->nid1,$link->nid2,$d));
    }

    unset($rows);
    $rows=array();
    if (count($dTotals)) foreach ($dTotals as $key=>$dTotal) 
    if ($dTotal['dTotal']) {
      $rows[] = array($key,
                       array('data'=>number_format($dTotal['count'],0,null,variable_get('guifi_thousand','.')),
                             'align'=>'right'),
                       array('data'=>number_format($dTotal['dTotal'],2,variable_get('guifi_decimal',','),variable_get('guifi_thousand','.')),
                             'align'=>'right')
                      );
      $lcount += $dTotal['count'];
      $ldTotal += $dTotal['dTotal'];
    }
    if ($lcount)
      $rows[] = array('<strong>'.t('Total').'</strong>',
                       array('data'=>number_format($lcount,0,null,variable_get('guifi_thousand','.')),
                             'align'=>'right'),
                       array('data'=>number_format($ldTotal,2,variable_get('guifi_decimal',','),variable_get('guifi_thousand','.')),
                             'align'=>'right')
                      );
    $content.= theme('table',array(t('Wireless<br />links'),'<p align="right">#</p>',t('kms.')),$rows);

    $block['content'] = $content;
    return $block;
//    return print theme("block", $blocktitle, dictionary_page_form() );
  }
}


function guifi_access($op, $node) {
  global $user;
  $br->br();
  switch($op) {
    case 'create':
      return user_access("create guifi nodes");
    case 'update':
    case 'delete':
      if ($node->type == 'guifi-node') {
        if ((user_access('administer guifi zones')) || ($node->uid == $user->uid)) {
          return TRUE;
        }
        else {
          return FALSE;
        }
      } else {
        return user_access("create guifi nodes");
      }
  }
}

function guifi_device_access($op, $id) {
  global $user;

  if (empty($id))
   return FALSE;
 
  $device = guifi_get_device($id);

  $node = node_load($device['nid']);

  switch($op) {
    case 'create':
      return user_access("create guifi nodes");
    case 'update':
      if ((user_access('administer guifi zones')) || ($device['user_created'] == $user->uid) || ($node->uid == $user->uid)) {
        return TRUE;
      }
      else {
        return FALSE;
      }
  }
}

function guifi_load($node) {
  switch ($node->type) {
    case 'guifi-zone':
      return guifi_zone_load($node->nid);
    case 'guifi-node':
      return db_fetch_object(db_query("SELECT * FROM {guifi_location} WHERE id = '%d'", $node->nid));
    case 'guifi-service':
      $var = db_fetch_object(db_query("SELECT * FROM {guifi_services} WHERE id = '%d'", $node->nid));
      $var->var = unserialize($var->extra);
      return $var;
  }
}

function guifi_form(&$node, &$param) {
  switch ($node->type) {
    case 'guifi-zone': 
      return guifi_zone_form($node,$param);
    case 'guifi-node': 
      return guifi_node_form($node,$param);
    case 'guifi-service': 
      return guifi_service_form($node,$param);
  }
}

function guifi_validate(&$node) {
  switch ($node->type) {
    case 'guifi-zone': 
      return guifi_edit_zone_validate($node);
    case 'guifi-node': 
      return guifi_edit_node_validate($node);
    case 'guifi-service': 
      return guifi_edit_service_validate($node);
  }
}

function guifi_insert($node) {
  switch ($node->type) {
    case 'guifi-zone': 
      guifi_zone_insert($node);
      break; 
    case 'guifi-node': 
      guifi_node_insert($node);
      break; 
    case 'guifi-service': 
      guifi_service_insert($node);
      break; 
   }
   cache_clear_all();
}

function guifi_update($node) {
  switch ($node->type) {
    case 'guifi-zone': 
      guifi_zone_update($node);
      break; 
    case 'guifi-node': 
      guifi_node_update($node);
      break; 
    case 'guifi-service': 
      guifi_service_update($node);
      break; 
   }
   cache_clear_all();
}

function guifi_delete(&$node) {

  switch ($node->type) {
    case 'guifi-zone':
      db_query("DELETE FROM {guifi_zone} WHERE id = '%s'", $node->nid);
      db_query("DELETE FROM {guifi_networks} WHERE zone = '%s'", $node->nid);
      $image_path = file_create_path ( sprintf ( "guifi/%08d.jpg", $node->nid)); 
      file_delete ( $image_path );
      break;
    case 'guifi-node':
      $query = db_query("SELECT * FROM {guifi_devices} where nid = '%s'",
                        $node->nid);
      while ($row = db_fetch_array($query))
      {
        $query_interfaces = db_query("SELECT * FROM {guifi_interfaces} WHERE ".
                           "device_id=%d", $row['id']);
        while ($row2 = db_fetch_array($query_interfaces))
        {
                db_query("DELETE FROM {guifi_interfaces} WHERE ".
                         "id=%d", $row2['id']);
                db_query("DELETE FROM {guifi_ipv4} where ".
                        "interface_id='%s'", $row2['id']);
        }
        $query_links = db_query("SELECT id FROM {guifi_links} WHERE device_id = %d", $row['id']);
        while ($link = db_fetch_object($queryi_links))
          db_query('DELETE FROM {guifi_links} WHERE id = %d', $link->id);
        db_query("DELETE FROM {guifi_services} WHERE device_id = %d", $row['id']);
        db_query("DELETE FROM {guifi_devices} WHERE id = %d",$row['id']);
        db_query('DELETE FROM {guifi_radios} WHERE id = %d', $row['id']);
        db_query('DELETE FROM {guifi_interfaces} WHERE device_id = %d', $row['id']);
      }
      db_query("DELETE FROM {guifi_links} WHERE nid = %d",$node->nid);
      db_query("DELETE FROM {guifi_location} WHERE id = %d", $node->nid);
      break;
    case 'guifi-service':
      db_query("DELETE FROM {guifi_services} WHERE id = '%s'", $node->nid);
      break;
   }
   cache_clear_all();
//   touch(variable_get('guifi_rebuildmaps','/tmp/ms_tmp/REBUILD'));
   variable_set('guifi_refresh_cnml',time());
   variable_set('guifi_refresh_maps',time());
}

function guifi_link($type, $node = 0){
  $links = array();

  if ($type == "node" && $node->type == "guifi-zone") {
    $links[] = l(t('create mrtg config'), "guifi/mrtg/$node->nid", array('title'=>t('get an mrtg configuration file for this zone')) );
    $links[] = l('nodeXchange', "guifi/nodexchange/$node->nid", array('title'=>t('export zone in nodeXchange format')) );
    $links[] = l('CNML', "guifi/cnml/$node->nid", array('title'=>t('export zone in CNML format')) );
    $links[] = l('GML', "guifi/gml/$node->nid", array('title'=>t('export zone in gml format')) );
    if (module_exist('budgets'))
      $links[] = l(t('budgets'), "budgets/$node->nid", array('title'=>t('view budgets for this zone')));
  }
  if ($type == "node" && $node->type == "guifi-node") {
    $links[] = l('CNML', "guifi/cnml/$node->nid/node", array('title'=>t('export node in CNML format')) );
  }
 
  return $links;
}

function guifi_page($zone = NULL) {
  $output = guifi_overview_tree($zone);

  if ($zone) {
    $output .= '<hr />Node view ' .$zone;
    $output .= guifi_zone_print($zone);
  } else {
    $output .= t('This is the root zone for of the network. Navigate in the zone hierarchy above to drill down into the database.');
  }

  print theme('page', $output);
}

function guifi_view(&$node, $teaser = 0, $page = 0) {

  if (!is_object($node))  {
    $nid = $node;
    unset($node);
    $node = node_load($nid);
  }

  switch ($node->type) {
    case 'guifi-zone':
      guifi_zone_view($node);
      break;
    case 'guifi-node':
      guifi_node_view($node);
      break;
    case 'guifi-service':
      guifi_service_view($node);
  }
}

function guifi_edit(&$node, $teaser = 0, $page = 0) {

  if (!is_object($node))  {
    $nid = $node;
    unset($node);
    $node = node_load($nid);
  }

  switch ($node->type) {
    case 'guifi-zone':
      guifi_zone_edit($node);
      break;
    case 'guifi-node':
//      guifi_node_view($node);
      break;
    case 'guifi-service':
//      guifi_service_view($node);
  }
}

function guifi_cron() {
  // delete orphan devices, radios, ip addresses & links
  guifi_purge();
}

?>
