<?php
// $Id: budgets.module x$

/**
 * @file
 * allow to create budgets, allocated to projects, and then collect funds for them
 */

/**
 * Implementation of node hooks.
 */

function budgets_menu($may_cache) {
  $items = array();

  if ($may_cache) {

    $items[] = array('path' => 'node/add/budget', 'title' => t('budget'),
      'access' => user_access('create budgets'));


    // budgets module menus
    $items[] = array('path' => 'budgets', 'title' => t('budget and funding'),
      'callback' => 'budgets_page',
      'access' => user_access('access content'),
      'type' => MENU_SUGGESTED_ITEM);

   } else {
    $items[] = array('path' => 'budgets', 'title' => t('budget and funding'),
      'callback' => 'budgets_page',
      'access' => user_access('access content'),
      'type' => MENU_SUGGESTED_ITEM);

    if (arg(0) == 'node' && is_numeric(arg(1))) {
      $node = node_load(arg(1));

      // budget menus
      if (($node->nid) && ($node->type == 'budgets')) {
        $items[] = array('path' => 'node/'. arg(1) .'view', 'title' => t('view'),
          'callback' => 'budgets_view',
          'callback arguments' => arg(1),
          'access' => user_access('access content'),
          'weight' => -10,
          'type' => MENU_DEFAULT_LOCAL_TASK);
        $items[] = array('path' => 'node/'. arg(1) .'/view/all', 'title' => t('all'),
          'callback' => 'budgets_view',
          'callback arguments' => arg(1),
          'access' => user_access('access content'),
          'weight' => -10,
          'type' => MENU_DEFAULT_LOCAL_TASK);
        $items[] = array('path' => 'node/'. arg(1) .'/view/page', 'title' => t('page'),
          'callback' => 'budgets_view',
          'callback arguments' => arg(1),
          'access' => user_access('access content'),
          'weight' => 1,
          'type' => MENU_LOCAL_TASK);
        $items[] = array('path' => 'node/'. arg(1) .'/view/items', 'title' => t('budget details'),
          'callback' => 'budgets_view',
          'callback arguments' => arg(1),
          'access' => user_access('access content'),
          'weight' => 2,
          'type' => MENU_LOCAL_TASK);
        $items[] = array('path' => 'node/'. arg(1) .'/view/funds', 'title' => t('funds report'),
          'callback' => 'budgets_view',
          'callback arguments' => arg(1),
          'access' => user_access('access content'),
          'weight' => 3,
          'type' => MENU_LOCAL_TASK);
        if ($node->budget_status == 'Open')
        $items[] = array('path' => 'node/'. arg(1) .'/view/contribute', 'title' => t('make your donation'),
          'callback' => 'budgets_view',
          'callback arguments' => arg(1),
          'access' => user_access('access content'),
          'weight' => 4,
          'type' => MENU_LOCAL_TASK);

    }
  }
}

   $style = '<style type="text/css" media="all">@import "modules/budgets/budgets.css";</style>';
   drupal_set_html_head($style);

  return $items;
}

function _budgets_variable($var) {

  $payment_default = t("
To contribute to this budget, please allocate your desired contribution and:
<ul>
<li>Provide your contact information (name, telf. or email) so a promoter will be able to contact you,</li>
<li>... or if you wish, make a money transfer to the account EEEE OOOO DD CCCCCC specifying clearly your name for validation purposes.</li>
</ul>
Your contribution will be in 'Submitted' status. Once is verified, the promoter will update the status of your contibution to <i>'Approved'<i/> if accepts it, <i>'Declined'</i> if for any reason this contribution can't be acceped, or <i>'Paid'</i> to confirm that the money has arrived.");
  $terms_default = t("<ol>
<li>An open project budget may change without advice depending in how many funds is receiving. Contributors may ask for a return of their funds if they not agree with those changes.</li>
<li>Once a budget is closed, promoters are responsible to execute it, and contributors are not longer allowed to ask for a return.</li>
<li>Promoters are not liable for the results of the project, just for spending the funds in a similar way as described in the budget.</li>
<li>If a project does not execute, promoters will be responsible of returning funds to contributors or allocate them to a another project.</li>
<li>The promoters/contributors are liable by their budgets and fundings. This site just provides a way to communicate between them, with no other responibilities.</li>
</ul>");
  
  switch ($var) {
    case 'budget_payment': 
      return variable_get($var,$payment_default);
    case 'budget_terms': 
      return variable_get($var,$terms_default);
  }
}

/**
 * Implementation of hook_help().
 */
function budgets_help($section) {
  switch ($section) {
    case 'admin/modules#description':
      return t('Manage the guifi.net, a mesh network community.');
    case 'admin/guifi':
      return t('<p>Select an operation from the menus to manage zones.</p>');
    case 'admin/guifi/zone/add':
      return t('<p>Enter de zone information.</p>');
    case 'node/add#budget':
      return t("<p>Create a budget. A budget is an itemized project with allocated due costs. Therefore, contributors can donate funds to it.</p>");
  }
}

/**
 * Implementation of hook_link().
 */
function budgets_link($type, $node = 0, $main) {
  $links = array();

  if (($node->type == 'budgets') and ($node->budget_status == 'Open')) {
    $links[] = l(t('make your donation'), 'node/'. $node->nid.'/view/contribute', array('title' => t('make your donation to this project')));
  }
  return $links;
}

/**
 * Implementation of hook_perm().
 */
function budgets_perm() {
  return array('administer budgets','create budgets');
}

/**
 * Implementation of hook_node_info().
 */
function budgets_node_info() {
  return array('budget' => array('name' => t('budget'), 'base' => 'budget'));
}  

function _budget_expires_list() {
  return array('1w'=>t('One week'),'2w'=>t('Two weeks'),'1m'=>t('One month'),'2m'=>t('Two months'),'1q'=>t('One quarter'),'4m'=>t('4 months'),'1h'=>t('Half year'),'1y'=>t('One year'));
}

function budgets_settings() {
//  $installed_version = variable_get("budgets_version","1.0");
//  if ($installed_version < 2) {
//    $output = l("upgrade to budget module version 2.0","admin/settings/budgets/upgrade");
//  }
  $output .= form_textfield("Block title", "budget_block_title", variable_get("budget_block_title", t("budgets & funds")), 35, 255, t("Title of budgets block..."));
  $output .= form_textarea("Default payment instructions", 
                            "budget_payment", 
                            _budgets_variable("budget_payment"), 
                            60, 10, t("Default text for payment instructions."));
  $output .= form_textarea("Default terms & conditions", "budget_terms", 
                            _budgets_variable("budget_terms"), 
                            60, 10, t("Default text for budget 'Terms & Conditions' box."));
  $output  .= form_select(t("Default expiration"), "budget_expires", variable_get("budget_expires",12), _budget_expires_list(),t('By default, how many weeks the budget will expire (closed if not covered)')) ;
  $output  .= form_textfield(t("Default currency text"), "budget_currency_txt", variable_get("budget_currency_txt","Euros"), 10,10,t('By default, currency abbreviation)')) ;
  $output  .= form_textfield(t("Default currency symbol"), "budget_currency_symbol", variable_get("budget_currency_symbol","â‚¬"), 5,5,t('By default, currency symbol)')) ;
  $output  .= form_textfield(t("Default minimum contribution"), "budget_minimum", variable_get("budget_minimum","0"), 10,10,t('By default, minimum amount of each single contribution')) ;

 return $output;
}

//function budgets_system($field){
//  $system["description"] = t("Budgets & Fundings");
//  return $system[$field];
//}

function budgets_block($op = "list", $delta = 0) {
  if ($op == "list") {
    $blocks[0]["info"] = variable_get("budget_block_title",t("Open budgets"));
    return $blocks;
  }
  else {
    $block['subject'] = variable_get("budget_block_title","<a href=\"budgets\">" .t("budgets") ."</a>");
    $content .= t("Help raising the green bars with your donations!")."<br />";
    $qbudgets = db_query("SELECT n.nid, title, currency_symbol FROM {budgets} b, {node} n WHERE n.nid=b.nid AND budget_status = 'Open' ORDER BY changed DESC");
    while ($budget = db_fetch_object($qbudgets)) {
      $content .= '<div>&middot;&nbsp;<a href="node/'.$budget->nid.'">'.$budget->title.'</a></div>'; 
//      $content .= '&nbsp;<a href="node/'.$budget->nid.'/view/contribute"></div><div style="text-align: right;">'.t('donate').'</div></a></div><br />';
      $t = db_fetch_object(db_query("SELECT sum(quantity * cost) amount FROM {budget_items} WHERE nid = %d",$budget->nid));
      $s = db_fetch_object(db_query("SELECT sum(amount) amount FROM {budget_funds} WHERE fund_status != 'Declined' AND nid = %d",$budget->nid));
      $content .= budgets_bar($t->amount,$s->amount,$budget->currency_symbol);
    }
    $content .= '<div style="text-align: right;">'.l(t('view all open projects'),'budgets').'</div>';
    $block['content'] = $content;
    return $block;
  }
}


function budget_access($op, $node) {
  global $user;

  switch($op) {
    case 'create':
      return user_access("create budgets");
    case 'update':
      if ($node->type == 'budget') {
        if ((user_access('administer budgets')) || ($node->uid == $user->uid)) {
          return TRUE;
        }
        else {
          return FALSE;
        }
      } else {
        return user_access("create budgets");
      }
  }
}

function budgets_load($node) {
  $budget = db_fetch_object(db_query("SELECT * FROM {budgets} WHERE nid = '%d'", $node->nid));
  $budget->txtexpire = date('Y-n-j',$budget->expires); 
  $budget->zones = explode(',',$budget->guifi_zones);
  $qitems = db_query("SELECT * FROM {budget_items} WHERE nid = '%d' ORDER BY weight, item_id", $node->nid);
  $budget->total = 0;
  while ($item = db_fetch_array($qitems)) {
    $budget->items[] = $item;
    $budget->total = $budget->total + ($item['quantity'] * $item['cost']);
  }
  $budget->next_fund = 1;
  $budget->covered = 0;
  $qfunds = db_query("SELECT * FROM {budget_funds} WHERE nid = '%d' ORDER BY fund_id", $node->nid);
  while ($fund = db_fetch_array($qfunds)) {
    if ($budget->next_fund <= $fund['fund_id'])
      $budget->next_fund = $fund['fund_id'] + 1;
    if ($fund['fund_status'] != 'Declined')
      $budget->covered = $budget->covered + $fund['amount'];
    $budget->funds[] = $fund;
  }

  return $budget;
}

function budget_edit_form(&$node) {
  // A partir d'ara l'ordre el definirem per aquesta variable.
  // AixÃ­ ens estalviem canviar-ho tot cada cop que inserim un nou element.
  $form_weight = -20
  
  
  // ----
  // Establir el tÃ­tol del pressupost
  // --------------------------------------------
  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Title'),
    '#required' => TRUE,
    '#default_value' => $node->title,
    '#description' => '',
    '#weight' => $form_weight++,
  );
  
  
  
  // ----
  // Establir el tipus de presupost i algunes condicions
  // --------------------------------------------
  
  // General
  $form['general'] = array(
    '#type' => 'fieldset',
    '#title' => t('General'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
    '#tree' => FALSE,
    '#weight' => $form_weight++,
  );
  $form['general']['budget_status'] = array(
    '#type' => 'select',
    '#title' => t('Status'),
    '#required' => FALSE,
    '#default_value' => $node->budget_status,
    '#options' => array('Preparation'=>t('Preparation'),'Open'=>t('Open'),'Closed'=>t('Closed')),
    '#description' => '',
    '#weight' => $form_weight++,
  );
  $form['general']['txtexpire'] = array(
    '#type' => 'textfield',
    '#title' => t('Expiration'),
    '#required' => FALSE,
    '#default_value' => $node->txtexpire,
    '#size' => 10,
    '#maxlength' => 10, 
    '#description' => t('Date when this budget will expire (format: YYYY-MM-YY)'),
    '#weight' => $form_weight++,
  );
  
  // Moneda
  $form['currency'] = array(
    '#type' => 'fieldset',
    '#title' => t('Currency'),
    '#description' => '',
    '#weight' => $form_weight++,
  );
  $form['currency']['currency_txt'] = array(
    '#type' => 'textfield',
    '#title' => t('Text'),
    '#required' => FALSE,
    '#default_value' => $node->currency_txt,
    '#size' => 10,
    '#maxlength' => 10, 
    '#description' => t('abbreviation'),
    '#weight' => $form_weight++,
  );
  $form['currency']['currency_symbol'] = array(
    '#type' => 'textfield',
    '#title' => t('Symbol'),
    '#required' => FALSE,
    '#default_value' => $node->currency_symbol,
    '#size' => 5,
    '#maxlength' => 5,
    '#weight' => $form_weight++,
  );
  
  // Contribucions
  $form['contributions'] = array(
    '#type' => 'fieldset',
    '#title' => t('Contributions'),
    '#description' => '',
    '#weight' => $form_weight++,
  );
  $form['contributions']['min_contribution'] = array(
    '#type' => 'textfield',
    '#title' => '',
    '#required' => FALSE,
    '#default_value' => $node->min_contribution,
    '#size' => 10,
    '#maxlength' => 10, 
    '#description' => t('Under this amount, contributions will not be accepted'),
    '#weight' => $form_weight++,
  );
  
  
  // ----
  // Llistar els elements del pressupost
  // --------------------------------------------
  // Mirarem de generar-ho en una altra funciÃ³ (depÃ¨n)
  if( is_array($node->items) && !empty($node->items)) {
/*    $nocomponents = count($node->items);
    
    // sorting array by weight
    foreach ($node->items as $item_id => $item)
      $items_sorted[$item_id] = $item['weight'];
    asort($items_sorted);
    
    $total = 0;
    foreach($items_sorted as $item_id => $weight) {
      $subtotal = $node->items[$item_id]['quantity']* $node->items[$item_id]['cost'];
      $total = $total + $subtotal;
      
      $form['components']= array(
        '#type' => 'fieldset',
        '#title' => t('Contributions'),
        '#description' => '',
      );
      $form['components']['item_checked']= array(
        '#type' => 'radio',
        '#title' => '',
        '#default_value' => $item_id,
      );
      $form['components']["items][".$item_id.'][description']= array(
        '#type' => 'hidden', 
        '#value' => $node->items[$item_id]['description'],
      );
      $form['components']["items][".$item_id.'][comments']= array(
        '#type' => 'hidden', 
        '#value' => $node->items[$item_id]['comments'],
      );
      $form['components']["items][".$item_id.'][quantity'] = array(
        '#type' => 'textfield',
        '#title' => '',
        '#required' => FALSE,
        '#default_value' => $node->items[$item_id]['quantity'],
        '#size' => 6,
        '#maxlength' => 12,
      );
      $form['components']["items][".$item_id.'][cost'] = array(
        '#type' => 'textfield',
        '#title' => '',
        '#required' => FALSE,
        '#default_value' => $node->items[$item_id]['cost'],
        '#size' => 10,
        '#maxlength' => 11,
      );
      $form['components']['data'] = array(
        '#type' => 'item',
        '#title' => '',
        '#value' => number_format($subtotal,2,',','.'),
      );
      $form['components']["items][".$item_id.'][weight'] = array(
        '#type' => 'weight',
        '#title' => '',
        '#default_value' => $node->items[$item_id]['weight'],
        '#delta' => 20,
      );
    }
    
//    $rows[] = array(null,'<strong>'.t('Total').'</strong>',null,null,null,
//array('data'=>'<strong>'.number_format($total,2,',','.').'</strong>','align'=>'right'),null);

    $form['help'] = array(
      '#type' => 'item',
      '#title' => '',
      '#value' => t('To edit an item description or comment, check its box and press "Edit selected".') "<br>". t('To delete an item, check its box and press "Delete selected".') "<br>". t('You can edit units, cost and weight values directly in the form.') ."<br>". t('Remember to set weight on the components or they will be added to the budget in a random order.') ."<br>". t('The components are sorted first by weight and then by name.'),
      '#weight' => -5,
    );
    $form['form_item[edit]'] = array(
      '#type' => 'button',
      '#value' => t('Edit selected'),
      '#weight' => -5,
    );
    $form['form_item[delete]'] = array(
      '#type' => 'button', 
      '#value' => t('Delete selected'), 
      '#weight' => -5,
    );*/
  } else {
    $form['help'] = array(
      '#type' => 'item',
      '#title' => t('Budget items'),
      '#value' => t('There is no budget items yet for this project'),
      '#description' => t('Add values by pressing the "Add budget item" button'),
      '#weight' => $form_weight++,
    );
  }
  
  $form['form_item[add]'] = array(
    '#type' => 'button', 
    '#value' => t('Add budget item'), 
    '#weight' => $form_weight++,
  );
  
  // AixÃ² no sÃ© perquÃ¨ hi Ã©s
  if (!empty($node->budget_items)) {
  }
  
  
  
  
  // ----
  // Llistat de la informaciÃ³ associada
  // --------------------------------------------
  $form['body'] = array(
    '#type' => 'textarea', 
    '#title' => t('Body'), 
    '#default_value' => $node->body, 
    '#cols' => 60, 
    '#rows' => 10, 
    '#required' => FALSE,
    '#description' =>t("Description of the project. Describe here it's purpose, expected benefits and beneficiaries, justifications, etc. Use de default drupal node syntax for constructing a teaser with the first lines of text or by inserting the &lt;!-- header --&gt; tag") . ($error['body'] ? $error['body'] : ''),
    '#weight' => $form_weight++,
  );
  $form['zones'] = array(
    '#type' => 'select',
    '#title' => t('Zones'),
    '#required' => FALSE,
    '#default_value' => $node->zones,
    '#multiple' => TRUE,
    '#options' => guifi_zones_listbox(),
    '#description' => t("If there are, zones where this budget apply specifically."),
    '#weight' => $form_weight++,
  );
  $form['promoter'] = array(
    '#type' => 'textarea', 
    '#title' => t('Promoter(s)'), 
    '#default_value' => $node->promoter, 
    '#cols' => 60, 
    '#rows' => 3, 
    '#required' => FALSE,
    '#description' => t('Explain here who are you, how to contact you, why people have to trust you, what you have already done...'),
    '#weight' => $form_weight++,
  );
  $form['payment_instructions'] = array(
    '#type' => 'textarea', 
    '#title' => t('Payment instructions'), 
    '#default_value' => $node->payment_instructions, 
    '#cols' => 60, 
    '#rows' => 7, 
    '#required' => FALSE,
    '#description' => t("Explain here how to send money funds for this project, it can be an account for money transfers, ask for contact information, links to paypal or similar online applications..."),
    '#weight' => $form_weight++,
  );
  $form['terms'] = array(
    '#type' => 'textarea', 
    '#title' => t('Terms & Conditions'), 
    '#default_value' => $node->terms, 
    '#cols' => 60, 
    '#rows' => 7, 
    '#required' => FALSE,
    '#description' => t("Explain here the terms and conditions of this project or use the default text provided"),
    '#weight' => $form_weight++,
  );
  
  return $form;
  
  
  
  // Codi antic. Eliminar-lo

    $output = '<div class="extras">';
    $output .= form_group(t('General'),
       form_select(t("Status"), "budget_status", $node->budget_status, array('Preparation'=>t('Preparation'),'Open'=>t('Open'),'Closed'=>t('Closed')),null).
       form_textfield(t("Expiration"), "txtexpire", $node->txtexpire, 10,10,t('Date when this budget will expire (format: YYYY-MM-YY)')));
    $output .= form_group(t('Currency'),
                  form_textfield(t('Text'),"currency_txt",$node->currency_txt,10,10,t('abbreviation')).
                  form_textfield(t('Symbol'),"currency_symbol",$node->currency_symbol,5,5));
    $output .= form_group(t('Contributions'),
                  form_textfield(null,"min_contribution",$node->min_contribution,10,10,t('Under this amount, contributions will not be accepted')));
    $output .= "</div>\n";
     

  // List all budget items.
  if( is_array($node->items) && !empty($node->items)) {
    $nocomponents = count($node->items);

    // sorting array by weight
    foreach ($node->items as $item_id => $item)
      $items_sorted[$item_id] = $item['weight'];
    asort($items_sorted);

    $total = 0;
    foreach($items_sorted as $item_id => $weight) {
      $subtotal = $node->items[$item_id]['quantity']* $node->items[$item_id]['cost'];
      $total = $total + $subtotal;
      $rows[] = array(
                    form_radio('', 'item_checked', $item_id),
                    form_hidden("items][".$item_id.'][description', $node->items[$item_id]['description']).
                    $node->items[$item_id]['description'], 
                    form_hidden("items][".$item_id.'][comments', $node->items[$item_id]['comments']).
                    $node->items[$item_id]['comments'], 
                    form_textfield('', "items][".$item_id.'][quantity', $node->items[$item_id]['quantity'], 6, 12),
                    form_textfield('', "items][".$item_id.'][cost', $node->items[$item_id]['cost'], 10, 11),
                    array('data'=>number_format($subtotal,2,',','.'),'align'=>'right'),
                    form_weight('',"items][".$item_id.'][weight', $node->items[$item_id]['weight'],20));
    }
    $rows[] = array(null,'<strong>'.t('Total').'</strong>',null,null,null,
                    array('data'=>'<strong>'.number_format($total,2,',','.').'</strong>','align'=>'right'),null);

    $help_text = theme_item_list(array(
                                       t('To edit an item description or comment, check its box and press "Edit selected".'),
                                       t('To delete an item, check its box and press "Delete selected".'),
                                       t('You can edit units, cost and weight values directly in the form.'),
                                       t('Remember to set weight on the components or they will be added to the budget in a random order.'),
                                       t('The components are sorted first by weight and then by name.')
                                       )
                                 );
    $output .= form_item(t('Budget items'), $help_text);
    $headers = array(
//                     '<span>&nbsp;&nbsp;'.t('Select').'</span>',
                     '&nbsp;',
                     '<span>'.t('Description').'</span>',
                     t('Comments'),
                     '<span>'.t('Units').'</span>',
                     '<span>'.t('Cost').'</span>',
                     '<span>'.t('Total').'</span>',
                     '<span>'.t('Weight').'</span>'
                     );
    $output .= theme('table', $headers, $rows);
    $output .= form_button(t('Edit selected'), 'form_item[edit]');
    $output .= form_button(t('Delete selected'), 'form_item[delete]');
  } else {
    $output .= form_item(t('Budget items'),t('There is no budget items yet for this project'),t('Add values by pressing the "Add budget item" button'));
  }

  $output .= form_button(t('Add budget item'), 'form_item[add]');

  if (!empty($node->budget_items)) {
  }

  $output .= form_textarea(t("Body"), "body", $node->body, 60, 10, t("Description of the project. Describe here it's purpose, expected benefits and beneficiaries, justifications, etc. Use de default drupal node syntax for constructing a teaser with the first lines of text or by inserting the &lt;!-- header --&gt; tag") . ($error['body'] ? $error['body'] : ''));


  $output .= form_select(t("Zones"), "zones", $node->zones, guifi_zones_listbox(), t("If there are, zones where this budget apply specifically."),null,1);

  $output .= form_textarea(t("Promoter(s)"),
                            "promoter",
                            $node->promoter,
                            60, 3,
                            t('Explain here who are you, how to contact you, why people have to trust you, what you have already done...'));
  $output .= form_textarea(t("Payment instructions"),
                            "payment_instructions",
                            $node->payment_instructions,
                            60, 7, t("Explain here how to send money funds for this project, it can be an account for money transfers, ask for contact information, links to paypal or similar online applications..."));
  $output .= form_textarea(t("Terms & Conditions"),
                            "terms",
                            $node->terms,
                            60, 7, t("Explain here the terms and conditions of this project or use the default text provided"));
  return $output;

}


function budget_form(&$node, &$param) {
  return budget_edit_form($node);  
}

function budgets_edit_item($node,$op = null) {

  // hidden all values with no field at this forms to continue with the freamework
  foreach ($node as $key => $value) {
    if (is_array($value)) {
      if ($key != 'items') 
        foreach ($value as $k_id => $k_value)
          $output .= form_hidden($key.']['.$k_id,$k_value); 
    } else 
      $output .= form_hidden($key,$value);
  }

  // the budget items fields, setting the hidden values (not edited items)
  $next_item_id = 0;
  if (!empty($node->items)) foreach ($node->items as $item_id => $item) {
    if ($item_id >= $next_item_id) 
      $next_item_id = $item_id + 1;
    if ((isset($node->item_checked)) and ($node->item_checked == $item_id)) {
      $description = $item['description']; 
      $comments = $item['comments']; 
      $quantity = $item['quantity']; 
      $cost = $item['cost']; 
      $weight = $item['weight']; 
      $edit_item_id = $item_id;
    } else {
      foreach ($item as $field=>$value)
        $output .= form_hidden('items]['.$item_id.']['.$field,$value);
    } 
  }
  // going to edit the selected item
  if ($op == 'add')
    $edit_item_id = $next_item_id;

  $output .= form_textarea(t('Description'),'items]['.$edit_item_id.'][description',$description,60,10,t('Description of this item'));
  $output .= form_textarea(t('Comments'),'items]['.$edit_item_id.'][comments',$comments,60,10,t('Additional comments about this item'));
  $output .= form_textfield(t('Quantity'),'items]['.$edit_item_id.'][quantity',$quantity,11,11,t('Number of items units'));
  $output .= form_textfield(t('Cost'),'items]['.$edit_item_id.'][cost',$cost,11,11,t('Due cost per each unit').'('.variable_get('budget_currency_long','Euros').')');
  $output .= form_weight(t('Weight'),'items]['.$edit_item_id.'][weight',$weight,20,t('Item weight: Lower values are displayed first, larger last'));
  $output .= form_hidden('items]['.$edit_item_id.'][item_id',$edit_item_id);
  $output .= form_hidden('items]['.$edit_item_id.'][nid',$edit["nid"]);

  $output .= form_button(t('Back to budget form'),'back_to_form');
  $output .= t("<br />Warning: This button will accept your changes as sub-part of the edit.  You will still have to select <b>'submit'</b> on the next screen to make your changes permanent.");

  print theme('page', form($output));
}

function budgets_validate(&$node) {

  if (empty($node->nid)) {
    // Fill default values
    if (empty($node->payment_instructions))
      $node->payment_instructions = _budgets_variable("budget_payment");
    if (empty($node->terms))
      $node->terms = _budgets_variable("budget_terms");
    if (empty($node->expires)) {
      switch (variable_get("budget_expires",'1q')) {
        case '1w': $dexp = mktime(0, 0, 0, date("m"),  date("d")+7,  date("Y")); break; 
        case '2w': $dexp = mktime(0, 0, 0, date("m"),  date("d")+14,  date("Y")); break;
        case '1m': $dexp = mktime(0, 0, 0, date("m")+1,  date("d"),  date("Y")); break;
        case '2m': $dexp = mktime(0, 0, 0, date("m")+2,  date("d"),  date("Y")); break;
        case '1q': $dexp = mktime(0, 0, 0, date("m")+3,  date("d"),  date("Y")); break;
        case '4m': $dexp = mktime(0, 0, 0, date("m")+4,  date("d"),  date("Y")); break;
        case '1h': $dexp = mktime(0, 0, 0, date("m")+6,  date("d"),  date("Y")); break;
        case '1y': $dexp = mktime(0, 0, 0, date("m"),  date("d"),  date("Y")+1); break;
      }
      $node->txtexpire = date('Y-n-j',$dexp);
    }
    if (empty($node->currency_txt))
      $node->currency_txt = variable_get("budgets_currency_txt",'Euros');
    if (empty($node->currency_symbol))
      $node->currency_symbol = variable_get("budgets_currency_symbol",'â‚¬');
    if (empty($node->min_contribution))
      $node->min_contribution = variable_get("budgets_minimum",0);
  }


  // Follow the framework if going to edit other forms
  if (isset($_POST['form_item'])) {
    // If we are adding a new componenet or removing a old one
    // we have to do what the framework would do for us so we don't lose
    // information.
    if( isset($_POST['edit']) ) {
      $node = (object) $_POST['edit'];
    }
    $action = array_keys($_POST['form_item']);
    
    // if not adding an item and no item selected, set error
    // else, goes to item form
    if (($action[0] != 'add') and (!isset($node->item_checked)))  
      form_set_error('', t('You must select an item to perform this action'));
    else switch ($action[0]) {
        case 'delete': 
          unset($node->items[$node->item_checked]);
          break;
        default:
          budgets_edit_item($node,$action[0]);
          exit(0);
    }
  }
  if( isset($_POST['back_to_form']) ) {
    $node->items = $_POST['edit']['items'];
  }

  // validate budget items
  if (!empty($node->items)) foreach ($node->items as $item_id=>$item) {
    if (empty($item['description']))
      form_set_error('items]['.$item_id.'][quantity', t('Item description is mandatory'));
    $item['quantity'] = str_replace(',','.',$item['quantity']);
    if (!is_numeric($item['quantity'])) 
      form_set_error('items]['.$item_id.'][quantity', t('Quantity must be numeric'));
    $item['cost'] = str_replace(',','.',$item['cost']);
    if (!is_numeric($item['cost'])) 
      form_set_error('items]['.$item_id.'][cost', t('Cost must be numeric'));
  }

  if (!empty($node->txtexpire)) {
    if (strtotime($node->txtexpire) != -1) {
      $node->expires = strtotime($node->txtexpire);
      if ($node->expires < time())
        form_set_error('txtexpire',t('Expiration must be in the future'));
    } else 
      form_set_error('txtexpire', t('Invalid date, use format YYYY-MM-DD'));
  } else
    form_set_error('txtexpire', t('You must specify a date when this budget will expire'));
    
}

function budgets_insert($node) {
  db_query("INSERT INTO {budgets} ( nid, budget_status, promoter, expires, terms, payment_instructions, guifi_zones, currency_symbol, currency_txt, min_contribution) VALUES (%d, '%s', '%s', '%s', '%s', '%s', '%s', '%s', '%s', %d)", $node->nid, $node->budget_status, $node->promoter, $node->expires, $node->terms, $node->payment_instructions, implode(',',$node->zones), $node->currency_symbol, $node->currency_txt, $node->min_contribution);
  budgets_insert_items($node->nid,$node->items);
}

function budgets_update($node) {
  db_query("UPDATE {budgets} SET budget_status = '%s', promoter ='%s', expires = '%s', terms = '%s', payment_instructions = '%s', guifi_zones = '%s', currency_symbol = '%s', currency_txt = '%s', min_contribution = %d WHERE nid = '%d'", $node->budget_status, $node->promoter, $node->expires, $node->terms, $node->payment_instructions, implode(',',$node->zones), $node->currency_symbol, $node->currency_txt, $node->min_contribution, $node->nid);
  budgets_insert_items($node->nid,$node->items);
}


function budgets_delete(&$node) {
   db_query("DELETE FROM {budgets} WHERE nid = '%s'", $node->nid);
   db_query("DELETE FROM {budget_items} WHERE nid = '%s'", $node->nid);
   db_query("DELETE FROM {budget_funds} WHERE nid = '%s'", $node->nid);
}

function budgets_insert_items($nid, $items) {
  if (!empty($items)) {
    db_query("DELETE FROM {budget_items} WHERE nid = %d",$nid);
    foreach ($items as $item_id => $item)
      db_query("INSERT INTO {budget_items} (nid, item_id, description, comments, quantity, cost, weight) VALUES (%d, %d, '%s', '%s', %.10f, %.10f, %d)",
                $nid, $item_id, $item['description'],$item['comments'],$item['quantity'],$item['cost'],$item['weight']);
  }
}

function budgets_page($zone = NULL) {
  $result = pager_query("SELECT n.nid,b.guifi_zones FROM {node} n, {budgets} b WHERE n.nid=b.nid ORDER BY FIND_IN_SET(budget_status,'Open,Preparation,Closed'), n.changed DESC", variable_get('default_nodes_main', 10));

  if (db_num_rows($result)) {
//    drupal_set_html_head('<link rel="alternate" type="application/rss+xml" title="RSS" href="'. url('node/feed', NULL, NULL, TRUE) .'" />');

    $output = '';
    while ($node = db_fetch_object($result)) {
      if ($zone == null) 
        $output .= node_view(node_load($node->nid), 1);
      else {
        $zones = explode(",",$node->guifi_zones);
        if (in_array($zone,$zones))
          $output .= node_view(node_load($node->nid), 1);
      }
    }
    $output .= theme('pager', NULL, variable_get('default_nodes_main', 10));
  }
  else {
    $output = t("Welcome to budget module. This module will allow your community to maintain budgets, allocate due costs for them, ansd accept donations");
  }
  print theme('page', $output);
}

function budgets_view(&$node, $teaser = 0, $page = 0) {

  if (!is_object($node))  {
    $nid = $node;
    unset($node);
    $node = node_load($nid);
  }


  $output .= '</div></font><hr>';
  $output .= "<div id=budgets>";
  $node->body .= '<hr>'.budgets_bar($node->total,$node->covered,$node->currency_symbol);
  $node->teaser .= '<hr>'.budgets_bar($node->total,$node->covered,$node->currency_symbol);

  switch (arg(3)) {
    case 'page':
    case 'items':
    case 'funds':
    case 'contribute':
      $op = arg(3);
      break;
    default:
      if (!isset($_POST['form_item']))
        $op = "default";
      else
        return;
      break;
  }
  switch ($op) {
    case 'all': case 'page': case 'default':
      // budget details
      $output .= budgets_print_data($node);
      break;
    case 'items':
      // budget items
      // $output .= theme('table', array(t('traffic overview')), guifi_node_graph_overview($node->nid));
      $output .= budgets_print_items($node);;
      break;
    case 'funds':
      // budget funds
      // $output .= theme('table', array(t('traffic overview')), guifi_node_graph_overview($node->nid));
      $output .= budgets_print_funds($node);;
      break;
    case 'contribute':
      $output .= budgets_contribute($node);;
      break;
  }

  $node->body .= theme('box', t('budget information'), $output);

  if ($op != 'default')
    print theme('page',$output,t('node').': '.$node->title.' ('.t($op).')');

}

function budgets_print_data($node) {
  if (!empty($node->zones)) {
    $output = '<div class="breadcumb"><font size=3>';
    $output .= t('Zones').': ';
    foreach ($node->zones as $zid)
    if ($zid > 0) {
      $result = db_fetch_array(db_query('SELECT z.id, z.title FROM {guifi_zone} z WHERE z.id = %d ',$zid));
      $output .= guifi_zone_l('budgets/'.$result['id'], $result['title'], $link);
      $output .= '&nbsp;&raquo;&nbsp;';
    }
    $output .= '</div>';
  }
  
  $output .= '<h2>'.t('Status').'</h2>'.t($node->budget_status);
  if ($node->budget_status == 'Open') {
    $output .= '&nbsp;'.t('until').'&nbsp;'.format_date($node->expires);
  }
  $output .= '<h2>'.t('Promoter(s)').'</h2>';
  $output .= $node->promoter;
  $output .= budgets_print_items($node);
  $output .= '<h2>'.t('Payment Instructions').'</h2>';
  $output .= '<small>';
  $output .= $node->payment_instructions;
  $output .= "</small>\n";
  $output .= '<h2>'.t('Terms & Conditions').'</h2>';
  $output .= '<small>';
  $output .= $node->terms;
  $output .= "</small>\n";
  return $output;
}

function budgets_bar($total,$subtotal,$currency = 'â‚¬') {
  if ($subtotal > 0)
    $pct_green = round( (100*$subtotal) / $total  );
  else
    $pct_green = 0;
 
  $output .= "\n\r".'<div class="budgets_bar"><div class="bar">';
  $output .= "\n\r".'<div class="foreground" style="width: '.$pct_green.'%;">';
//  $output .= $pct_green.'% ('.number_format($subtotal,1,',','.').' '.t('of').' '.number_format($total,1,",",'.').$currency.')';
//  $output .= '</div></div></div>';
  $output .= '</div></div>';
  $output .= "\n\r".'<div class="total">'.$pct_green.'% ('.number_format($subtotal,1,',','.').' '.t('of').' '.number_format($total,1,",",'.').$currency.')</div></div>';

  return $output;
}

function budgets_print_items($node) {
  $output .= '<h2>'.t('Budget details').'</h2>';

  $total = 0; 
  if (!empty($node->items)) foreach ($node->items as $item_id => $item) {
    $subtotal = $item['quantity'] * $item['cost'];
    $total = $total + $subtotal;
    $rows[] = array(
               $item['description'],
               $item['comments'],
               array('data'=>number_format($item['quantity'],2,',','.'),'align'=>'right'),
               array('data'=>number_format($item['cost'],2,'.',',').$node->currency_symbol,'align'=>'right'),
               array('data'=>number_format($subtotal,2,',','.').$node->currency_symbol,'align'=>'right'));
  }
  $rows[] = array(
                 '<strong>Total</strong',
                 null,null,null,
                 array('data'=>'<strong>'.number_format($total,2,',','.').$node->currency_symbol.'</strong>','align'=>'right')
                 );
  $header = array(t('Description'),t('Comments'),
                  array('data'=>t('Units'),'align'=>'right'),
                  array('data'=>t('Cost per unit'),'align'=>'right'),
                  array('data'=>t('Subtotal'),'align'=>'right'));

  return $output.theme('table', $header, $rows);
}


function budgets_print_funds($node) {

  drupal_set_title(t('Contribuitions to').': '.$node->title);
  if (isset($_POST['edit'])) {
    $op = $_POST['op'];
    $edit = $_POST['edit'];
    switch ($op) {
      case t('Delete selected'):
         if (!isset($edit ['fund_checked'])) 
          form_set_error(null,t('A fund must be selected for its deletion'));
         else {
           if ($edit['confirm']) {
            db_query("DELETE FROM {budget_funds} WHERE nid = %d AND fund_id = %d",$node->nid,$edit['fund_checked']);
            drupal_set_message(t('Fund deleted'));
            drupal_goto('node/'.$node->nid.'/view/funds');
           } else {
             $f = db_fetch_object(db_query("SELECT contributor_name, amount FROM {budget_funds} WHERE nid = %d AND fund_id = %d",$node->nid, $edit['fund_checked']));
             $output .= form_hidden('fund_checked',$edit['fund_checked']);;
             $output .= theme('confirm',   t('This action cannot be undone.'),  'node/'.$node->nid.'/view/funds/', t('Are you sure that you want to delete the fund from %name of %amount?',array('%name'=>$f->contributor_name,'%amount'=>$f->amount)), t('Delete selected'));
           }
         }
         break;
      case t('Submit'):
//        $output = var_export($node->funds);
        foreach ($edit['fund_status'] as $fund_id=>$new_status) {
//          $output .= sprintf("\n<br />FundID: %d NewStatus: %s Status:%s\n<br />",$fund_id,$new_status,$node->funds[$fund_id - 1]['fund_status']);
          if ($node->funds[$fund_id - 1]['fund_status'] != $new_status) {
//            $output .= sprintf("UPDATE {budget_funds} SET fund_status = '%s' WHERE nid = %d AND fund_id =%d",$new_status,$node->nid,$fund_id);
            db_query("UPDATE {budget_funds} SET fund_status = '%s' WHERE nid = %d AND fund_id =%d",$new_status,$node->nid,$fund_id);
          }
        }
        drupal_set_message($output.' '.t('Changes saved'));
        drupal_goto('node/'.$node->nid.'/view/funds');
        break;
    }
  }

  $output .= '<h2>'.t('Fundings').'</h2>';
  
  $total = 0; 

  // Going to report the funds
  $rows = array();
  if (empty($node->funds)) {
    $rows[] = array(t('There is no contributions to this project yet'),
                    array('data'=>0,'align'=>'right'));
  } else
    foreach ($node->funds as $fund_id => $fund) {
      if ($fund['fund_status'] != 'Declined')
        $total = $total + $fund['amount'];
      if (budget_access('update',$node))
        $rows[] = array(
                   format_date($fund['timestamp_created']),
                   $fund['contributor_name'],
                   number_format($fund['amount'],2,',','.').$node->currency_symbol,
                   form_select('','fund_status]['.$fund['fund_id'],$fund['fund_status'],array('Submitted'=>t('Submitted'),'Accepted'=>t('Accepted'),'Declined'=>t('Declined'),'Paid'=>t('Paid'))),
                   $fund['contributor_email'],
                   $fund['contributor_telf'],
                   $fund['comments'],
                   form_radio('','fund_checked',$fund['fund_id'])
                    );
      else
        $rows[] = array(
                   format_date($fund['timestamp_created']),
                   $fund['contributor_name'],
                   number_format($fund['amount'],2,',','.').$node->currency_symbol,
                   array('data'=>$fund['fund_status'],'align'=>'right'),
                   $fund['comments']);
  }
  $rows[] = array(
                 '<strong>Total</strong',null,
                 array('data'=>'<strong>'.number_format($total,2,',','.').$node->currency_symbol.'</strong>','align'=>'right'),
                 null,null);
  $header = array(t('Date'),t('Name'),t('Amount'),t('Status'));
  if (budget_access('update',$node)) {
    $header = array_merge($header,array(t('Email'),t('Telf'),t('Comments'),'&nbsp;'));
    $output .= theme('table', $header, $rows);
    $output .= form_button(t('Submit'),'op');
    $output .= form_button(t('Delete selected'),'op');
    return form($output);
  } else
    return $output.theme('table', $header, $rows);

}

function budgets_contribute(&$node) {
  drupal_set_title(t('Contribute to').': '.$node->title);
  if ($node->budget_status != 'Open') {
    drupal_set_message(t('Budget must be open to accept contributions')); 
    return;
  }

  if (isset($_POST['submit_fund'])) {
    $fund = $_POST['edit'];
    budgets_validate_fund($fund);
    if (form_get_errors() == null) {
      db_query("INSERT INTO {budget_funds} (nid, fund_id, contributor_name, contributor_email, contributor_telf, amount, fund_status, comments, timestamp_created) VALUES (%d, %d, '%s', '%s', '%s', %.10f, 'Submitted', '%s', %d)",$node->nid, $node->next_fund, $fund['contributor_name'], $fund['contributor_email'], $fund['contributor_telf'], $fund['amount'], $fund['comments'], time());
      drupal_set_message(t('<b>Your contribution has been succesfully submitted.</b> Thanks for contributing to this project. Here you have a list of the current contributions'));
      cache_clear_all();
      drupal_goto('node/'.$node->nid.'/view/funds');
    } else {
      form_set_error(null,t('<b>WARNING:</b> Your contribution has <b><u>NOT</b></u> been sent. There was errors while validating, please read the error messages'));
    }
  }

  $form  = form_textfield(t('Name'),'contributor_name',$fund['contributor_name'], 60,60,t('Your full name, or if your contribution wants to be anonyomous, something that will identify that the money comes from this donation once is verified.'));
  $form .= form_textfield(t('Email'),'contributor_email',$fund['contributor_email'], 60,60,t('Your email-id. Will be available just to promoters and not published in the reports.'));
  $form .= form_textfield(t('Telf'),'contributor_telf',$fund['contributor_telf'], 60,60,t('How promoters can contact you by phone. Will be available just to them and not published at the reports'));
  $form .= form_textfield(t('Amount'),'amount',$fund['amount'], 15,15,t('Amount of the contribution').'&nbsp;('.$node->currency_txt.').'.
                          '<br />'.$node->payment_instructions);
  $form .= form_textarea(t('Comments'),'comments',$fund['comments'], 60,3,t('Write here any additional comments about your contribution. Note that in some cases you may donate other things, like reused material, availability to work...'));
  $form .= form_checkbox(t('I do agree with the <i>Terms & Conditions</i> expressed below').':','agree',true,false,$node->terms);

  $form .= form_button(t('Submit'),'submit_fund');
  $form .= form_hidden('min_contribution',$node->min_contribution);

  $output .= form($form);

  return $output;
}

function budgets_validate_fund(&$fund) {
  if (($fund['amount'] < $fund['min_contribution']) or (empty($fund['amount'])) )
    form_set_error('amount',t('Minimum donation is').'&nbsp;'.$fund['min_contribution']);
  $fund['amount'] = str_replace(',','.',$fund['amount']);
  $fund['amount'] = str_replace('â‚¬',null,$fund['amount']);
  $fund['amount'] = str_replace('$',null,$fund['amount']);
  $fund['amount'] = str_replace('EUR',null,$fund['amount']);
  $fund['amount'] = str_replace('euros',null,$fund['amount']);
  $fund['amount'] = str_replace('USD',null,$fund['amount']);
  $fund['amount'] = str_replace('dollars',null,$fund['amount']);
  if (!is_numeric($fund['amount']))
    form_set_error('amount',t('Amount must be numeric'));
  if ( (empty($fund['contributor_telf'])) and (empty($fund['contributor_email'])) )
    form_set_error('contributor_email',t('You must provide at least telf. or email for payment verification purposes'));
  if (empty($fund['contributor_name'])) 
    form_set_error('contributor_name',t('Name is mandatory'));
  if (($fund['agree']) != 1) 
    form_set_error('agree',t('You must accept the Terms & Conditions'));
  if (!empty($fund['contributor_email'])) {
    if (!valid_email_address($fund['contributor_email']))
      form_set_error('contributor_email',t('You must use a valid email address'));
  }
}

function budgets_edit(&$node, $teaser = 0, $page = 0) {

  if (!is_object($node))  {
    $nid = $node;
    unset($node);
    $node = node_load($nid);
  }

  switch ($node->type) {
    case 'guifi-zone':
      guifi_zone_edit($node);
      break;
    case 'guifi-node':
//      guifi_node_view($node);
      break;
    case 'guifi-service':
//      guifi_service_view($node);
  }
}

function budgets_cron() {
}

?>
